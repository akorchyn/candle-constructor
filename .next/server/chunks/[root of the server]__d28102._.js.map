{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/lib/db.ts"],"sourcesContent":["// src/lib/db.ts\nimport { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\n\nexport const prisma =\n    globalForPrisma.prisma ||\n    new PrismaClient({\n        log: ['query'],\n    })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACT,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACb,KAAK;QAAC;KAAQ;AAClB;AAEJ,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/app/api/categories/route.ts"],"sourcesContent":["import { prisma } from '@/lib/db'\nimport { NextResponse } from 'next/server'\n\nexport async function GET() {\n    try {\n        const categories = await prisma.category.findMany({})\n        return NextResponse.json(categories)\n    } catch (error) {\n        console.error('Error fetching categories:', error)\n        return NextResponse.json({ error: 'Error fetching categories' }, { status: 500 })\n    }\n}\n\nexport async function POST(request: Request) {\n    try {\n        const json = await request.json()\n        const category = await prisma.category.create({\n            data: {\n                name: json.name,\n                description: json.description,\n            }\n        })\n        return NextResponse.json(category)\n    } catch (error) {\n        return NextResponse.json({ error: 'Error creating category' }, { status: 500 })\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IAClB,IAAI;QACA,MAAM,aAAa,MAAM,kHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACnF;AACJ;AAEO,eAAe,KAAK,OAAgB;IACvC,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,WAAW,MAAM,kHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC1C,MAAM;gBACF,MAAM,KAAK,IAAI;gBACf,aAAa,KAAK,WAAW;YACjC;QACJ;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACJ"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}