{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/lib/db.ts"],"sourcesContent":["// src/lib/db.ts\nimport { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\n\nexport const prisma =\n    globalForPrisma.prisma ||\n    new PrismaClient({\n        log: ['query'],\n    })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACT,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACb,KAAK;QAAC;KAAQ;AAClB;AAEJ,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["// src/app/api/auth/[...nextauth]/route.ts\nimport NextAuth from \"next-auth\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\nimport { compare } from \"bcryptjs\"\nimport { prisma } from \"@/lib/db\"\n\nconst handler = NextAuth({\n    providers: [\n        CredentialsProvider({\n            name: 'Credentials',\n            credentials: {\n                username: { label: \"Username\", type: \"text\" },\n                password: { label: \"Password\", type: \"password\" }\n            },\n            async authorize(credentials) {\n                console.log({ credentials })\n\n                if (!credentials?.username || !credentials?.password) {\n                    return null\n                }\n\n                const user = await prisma.user.findUnique({\n                    where: {\n                        username: credentials.username\n                    }\n                })\n\n                if (!user) {\n                    return null\n                }\n\n                const isPasswordValid = await compare(credentials.password, user.password)\n\n                if (!isPasswordValid) {\n                    return null\n                }\n\n                return {\n                    id: user.id.toString(),\n                    username: user.username\n                }\n            }\n        })\n    ],\n    pages: {\n        signIn: '/login',\n    },\n    session: {\n        strategy: \"jwt\",\n    },\n})\n\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":"AAAA,0CAA0C;;;;;AAC1C;AACA;AACA;AACA;;;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACrB,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,aAAa;gBACT,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAO;gBAC5C,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YACpD;YACA,MAAM,WAAU,WAAW;gBACvB,QAAQ,GAAG,CAAC;oBAAE;gBAAY;gBAE1B,IAAI,CAAC,aAAa,YAAY,CAAC,aAAa,UAAU;oBAClD,OAAO;gBACX;gBAEA,MAAM,OAAO,MAAM,kHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACtC,OAAO;wBACH,UAAU,YAAY,QAAQ;oBAClC;gBACJ;gBAEA,IAAI,CAAC,MAAM;oBACP,OAAO;gBACX;gBAEA,MAAM,kBAAkB,MAAM,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAAE,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBAEzE,IAAI,CAAC,iBAAiB;oBAClB,OAAO;gBACX;gBAEA,OAAO;oBACH,IAAI,KAAK,EAAE,CAAC,QAAQ;oBACpB,UAAU,KAAK,QAAQ;gBAC3B;YACJ;QACJ;KACH;IACD,OAAO;QACH,QAAQ;IACZ;IACA,SAAS;QACL,UAAU;IACd;AACJ"}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}