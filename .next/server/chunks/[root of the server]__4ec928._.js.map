{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/lib/db.ts"],"sourcesContent":["// src/lib/db.ts\nimport { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\n\nexport const prisma =\n    globalForPrisma.prisma ||\n    new PrismaClient({\n        log: ['query'],\n    })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACT,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACb,KAAK;QAAC;KAAQ;AAClB;AAEJ,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/app/api/candles/%5Bid%5D/recipe/route.ts"],"sourcesContent":["import { prisma } from '@/lib/db'\nimport { NextResponse } from 'next/server'\n\nexport async function PUT(request: Request, props: { params: Promise<{ id: string }> }) {\n    const params = await props.params;\n    try {\n        const candleId = parseInt(params.id)\n        const { recipe } = await request.json()\n\n        // First, delete existing recipes\n        await prisma.candleRecipe.deleteMany({\n            where: {\n                candleId: candleId\n            }\n        })\n\n        // Then create new recipes\n        await prisma.candle.update({\n            where: {\n                id: candleId\n            },\n            data: {\n                recipes: {\n                    create: recipe.map((item: { materialId: number, amountUsed: number }) => ({\n                        materialId: item.materialId,\n                        amountUsed: item.amountUsed\n                    }))\n                }\n            }\n        })\n\n        // Fetch the updated candle with its recipes\n        const updatedCandle = await prisma.candle.findUnique({\n            where: {\n                id: candleId\n            },\n            include: {\n                recipes: {\n                    include: {\n                        material: true\n                    }\n                }\n            }\n        })\n\n        return NextResponse.json(updatedCandle)\n    } catch (error) {\n        console.error('Error updating recipe:', error)\n        return NextResponse.json(\n            { error: 'Error updating recipe' },\n            { status: 500 }\n        )\n    }\n}\n\n// Also update the GET handler in src/app/api/candles/[id]/route.ts to include recipes\nexport async function GET(request: Request, props: { params: Promise<{ id: string }> }) {\n    const params = await props.params;\n    try {\n        const candle = await prisma.candle.findUnique({\n            where: {\n                id: parseInt(params.id)\n            },\n            include: {\n                recipes: {\n                    include: {\n                        material: true\n                    }\n                }\n            }\n        })\n\n        if (!candle) {\n            return NextResponse.json(\n                { error: 'Candle not found' },\n                { status: 404 }\n            )\n        }\n\n        return NextResponse.json(candle)\n    } catch (error) {\n        return NextResponse.json(\n            { error: 'Error fetching candle' },\n            { status: 500 }\n        )\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAgB,EAAE,KAA0C;IAClF,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,IAAI;QACA,MAAM,WAAW,SAAS,OAAO,EAAE;QACnC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,QAAQ,IAAI;QAErC,iCAAiC;QACjC,MAAM,kHAAA,CAAA,SAAM,CAAC,YAAY,CAAC,UAAU,CAAC;YACjC,OAAO;gBACH,UAAU;YACd;QACJ;QAEA,0BAA0B;QAC1B,MAAM,kHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YACvB,OAAO;gBACH,IAAI;YACR;YACA,MAAM;gBACF,SAAS;oBACL,QAAQ,OAAO,GAAG,CAAC,CAAC,OAAqD,CAAC;4BACtE,YAAY,KAAK,UAAU;4BAC3B,YAAY,KAAK,UAAU;wBAC/B,CAAC;gBACL;YACJ;QACJ;QAEA,4CAA4C;QAC5C,MAAM,gBAAgB,MAAM,kHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,UAAU,CAAC;YACjD,OAAO;gBACH,IAAI;YACR;YACA,SAAS;gBACL,SAAS;oBACL,SAAS;wBACL,UAAU;oBACd;gBACJ;YACJ;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAEtB;AACJ;AAGO,eAAe,IAAI,OAAgB,EAAE,KAA0C;IAClF,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,IAAI;QACA,MAAM,SAAS,MAAM,kHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,UAAU,CAAC;YAC1C,OAAO;gBACH,IAAI,SAAS,OAAO,EAAE;YAC1B;YACA,SAAS;gBACL,SAAS;oBACL,SAAS;wBACL,UAAU;oBACd;gBACJ;YACJ;QACJ;QAEA,IAAI,CAAC,QAAQ;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAEtB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}