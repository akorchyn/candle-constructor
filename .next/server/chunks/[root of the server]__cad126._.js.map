{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/app/api/uploadthing/core.ts"],"sourcesContent":["import { createUploadthing, type FileRouter } from \"uploadthing/next\";\nimport { UploadThingError } from \"uploadthing/server\";\n\nconst f = createUploadthing();\n\nconst auth = (req: Request) => ({ id: \"fakeId\" }); // Fake auth function\n\n// FileRouter for your app, can contain multiple FileRoutes\nexport const ourFileRouter = {\n    // Define as many FileRoutes as you like, each with a unique routeSlug\n    imageUploader: f({\n        image: {\n            /**\n             * For full list of options and defaults, see the File Route API reference\n             * @see https://docs.uploadthing.com/file-routes#route-config\n             */\n            maxFileSize: \"4MB\",\n            maxFileCount: 1,\n        },\n    })\n        // Set permissions and file types for this FileRoute\n        .middleware(async ({ req }) => {\n            // This code runs on your server before upload\n            const user = await auth(req);\n\n            // If you throw, the user will not be able to upload\n            if (!user) throw new UploadThingError(\"Unauthorized\");\n\n            // Whatever is returned here is accessible in onUploadComplete as `metadata`\n            return { userId: user.id };\n        })\n        .onUploadComplete(async ({ metadata, file }) => {\n            // This code RUNS ON YOUR SERVER after upload\n            console.log(\"Upload complete for userId:\", metadata.userId);\n\n            console.log(\"file url\", file.url);\n\n            // !!! Whatever is returned here is sent to the clientside `onClientUploadComplete` callback\n            return { url: file.url };\n        }),\n} satisfies FileRouter;\n\nexport type OurFileRouter = typeof ourFileRouter;\n"],"names":[],"mappings":";;;AAAA;;;AAGA,MAAM,IAAI,CAAA,GAAA,8JAAA,CAAA,oBAAiB,AAAD;AAE1B,MAAM,OAAO,CAAC,MAAiB,CAAC;QAAE,IAAI;IAAS,CAAC,GAAG,qBAAqB;AAGjE,MAAM,gBAAgB;IACzB,sEAAsE;IACtE,eAAe,EAAE;QACb,OAAO;YACH;;;aAGC,GACD,aAAa;YACb,cAAc;QAClB;IACJ,EACI,oDAAoD;KACnD,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE;QACtB,8CAA8C;QAC9C,MAAM,OAAO,MAAM,KAAK;QAExB,oDAAoD;QACpD,uCAAW;;QAA0C;QAErD,4EAA4E;QAC5E,OAAO;YAAE,QAAQ,KAAK,EAAE;QAAC;IAC7B,GACC,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;QACvC,6CAA6C;QAC7C,QAAQ,GAAG,CAAC,+BAA+B,SAAS,MAAM;QAE1D,QAAQ,GAAG,CAAC,YAAY,KAAK,GAAG;QAEhC,4FAA4F;QAC5F,OAAO;YAAE,KAAK,KAAK,GAAG;QAAC;IAC3B;AACR"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/app/api/uploadthing/route.ts"],"sourcesContent":["import { createRouteHandler } from \"uploadthing/next\";\nimport { ourFileRouter } from \"./core\";\n\n// Export routes for Next App Router\nexport const { GET, POST } = createRouteHandler({\n    router: ourFileRouter,\n});\n"],"names":[],"mappings":";;;;AACA;AADA;;;AAIO,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,qBAAkB,AAAD,EAAE;IAC5C,QAAQ,0IAAA,CAAA,gBAAa;AACzB"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}