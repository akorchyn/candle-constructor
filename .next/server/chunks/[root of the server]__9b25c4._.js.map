{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/lib/db.ts"],"sourcesContent":["// src/lib/db.ts\nimport { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\n\nexport const prisma =\n    globalForPrisma.prisma ||\n    new PrismaClient({\n        log: ['query'],\n    })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACT,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACb,KAAK;QAAC;KAAQ;AAClB;AAEJ,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/yurtur/projects/candle-constructor/src/lib/test-setup.ts"],"sourcesContent":["// src/lib/test-setup.ts\nimport { prisma } from './db'\n\nexport async function setupTestData() {\n    try {\n        // Create a test material if it doesn't exist\n        const material = await prisma.material.upsert({\n            where: { id: 1 },\n            update: {},\n            create: {\n                name: 'Test Soy Wax',\n                units: 'grams',\n                pricePerUnit: 5.99,\n            },\n        })\n\n        // Create a test candle if it doesn't exist\n        const candle = await prisma.candle.upsert({\n            where: { id: 1 },\n            update: {},\n            create: {\n                name: 'Test Vanilla Candle',\n                description: 'A test candle',\n                price: 19.99,\n                weight: 200,\n                status: 'DRAFT',\n            },\n        })\n\n        return { material, candle }\n    } catch (error) {\n        console.error('Error setting up test data:', error)\n        throw error\n    }\n}\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;AACxB;;AAEO,eAAe;IAClB,IAAI;QACA,6CAA6C;QAC7C,MAAM,WAAW,MAAM,kHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC1C,OAAO;gBAAE,IAAI;YAAE;YACf,QAAQ,CAAC;YACT,QAAQ;gBACJ,MAAM;gBACN,OAAO;gBACP,cAAc;YAClB;QACJ;QAEA,2CAA2C;QAC3C,MAAM,SAAS,MAAM,kHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YACtC,OAAO;gBAAE,IAAI;YAAE;YACf,QAAQ,CAAC;YACT,QAAQ;gBACJ,MAAM;gBACN,aAAa;gBACb,OAAO;gBACP,QAAQ;gBACR,QAAQ;YACZ;QACJ;QAEA,OAAO;YAAE;YAAU;QAAO;IAC9B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM;IACV;AACJ"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}