{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"fiberRuntime.js","sources":["file:///home/yurtur/projects/candle-constructor/node_modules/effect/src/internal/fiberRuntime.ts"],"sourcesContent":["import { internalCall, yieldWrapGet } from \"effect/Utils\"\nimport * as RA from \"../Array.js\"\nimport * as Boolean from \"../Boolean.js\"\nimport type * as Cause from \"../Cause.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport type * as Clock from \"../Clock.js\"\nimport type { ConfigProvider } from \"../ConfigProvider.js\"\nimport * as Context from \"../Context.js\"\nimport type { DefaultServices } from \"../DefaultServices.js\"\nimport * as Deferred from \"../Deferred.js\"\nimport type * as Duration from \"../Duration.js\"\nimport type * as Effect from \"../Effect.js\"\nimport * as Effectable from \"../Effectable.js\"\nimport type * as Either from \"../Either.js\"\nimport * as ExecutionStrategy from \"../ExecutionStrategy.js\"\nimport type * as Exit from \"../Exit.js\"\nimport type * as Fiber from \"../Fiber.js\"\nimport * as FiberId from \"../FiberId.js\"\nimport type * as FiberRef from \"../FiberRef.js\"\nimport * as FiberRefs from \"../FiberRefs.js\"\nimport * as FiberRefsPatch from \"../FiberRefsPatch.js\"\nimport * as FiberStatus from \"../FiberStatus.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { dual, identity, pipe } from \"../Function.js\"\nimport { globalValue } from \"../GlobalValue.js\"\nimport * as HashMap from \"../HashMap.js\"\nimport * as HashSet from \"../HashSet.js\"\nimport * as Inspectable from \"../Inspectable.js\"\nimport type { Logger } from \"../Logger.js\"\nimport * as LogLevel from \"../LogLevel.js\"\nimport type * as MetricLabel from \"../MetricLabel.js\"\nimport * as Micro from \"../Micro.js\"\nimport * as MRef from \"../MutableRef.js\"\nimport * as Option from \"../Option.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport * as Predicate from \"../Predicate.js\"\nimport type * as Random from \"../Random.js\"\nimport * as Ref from \"../Ref.js\"\nimport type { Entry, Request } from \"../Request.js\"\nimport type * as RequestBlock from \"../RequestBlock.js\"\nimport type * as RuntimeFlags from \"../RuntimeFlags.js\"\nimport * as RuntimeFlagsPatch from \"../RuntimeFlagsPatch.js\"\nimport { currentScheduler, type Scheduler } from \"../Scheduler.js\"\nimport type * as Scope from \"../Scope.js\"\nimport type * as Supervisor from \"../Supervisor.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport type { Concurrency, NoInfer } from \"../Types.js\"\nimport * as _RequestBlock from \"./blockedRequests.js\"\nimport * as internalCause from \"./cause.js\"\nimport * as clock from \"./clock.js\"\nimport { currentRequestMap } from \"./completedRequestMap.js\"\nimport * as concurrency from \"./concurrency.js\"\nimport { configProviderTag } from \"./configProvider.js\"\nimport * as internalEffect from \"./core-effect.js\"\nimport * as core from \"./core.js\"\nimport * as defaultServices from \"./defaultServices.js\"\nimport { consoleTag } from \"./defaultServices/console.js\"\nimport * as executionStrategy from \"./executionStrategy.js\"\nimport * as internalFiber from \"./fiber.js\"\nimport * as FiberMessage from \"./fiberMessage.js\"\nimport * as fiberRefs from \"./fiberRefs.js\"\nimport * as fiberScope from \"./fiberScope.js\"\nimport * as internalLogger from \"./logger.js\"\nimport * as metric from \"./metric.js\"\nimport * as metricBoundaries from \"./metric/boundaries.js\"\nimport * as metricLabel from \"./metric/label.js\"\nimport * as OpCodes from \"./opCodes/effect.js\"\nimport { randomTag } from \"./random.js\"\nimport { complete } from \"./request.js\"\nimport * as _runtimeFlags from \"./runtimeFlags.js\"\nimport { OpSupervision } from \"./runtimeFlags.js\"\nimport * as supervisor from \"./supervisor.js\"\nimport * as SupervisorPatch from \"./supervisor/patch.js\"\nimport * as tracer from \"./tracer.js\"\nimport * as version from \"./version.js\"\n\n/** @internal */\nexport const fiberStarted = metric.counter(\"effect_fiber_started\", { incremental: true })\n/** @internal */\nexport const fiberActive = metric.counter(\"effect_fiber_active\")\n/** @internal */\nexport const fiberSuccesses = metric.counter(\"effect_fiber_successes\", { incremental: true })\n/** @internal */\nexport const fiberFailures = metric.counter(\"effect_fiber_failures\", { incremental: true })\n/** @internal */\nexport const fiberLifetimes = metric.tagged(\n  metric.histogram(\n    \"effect_fiber_lifetimes\",\n    metricBoundaries.exponential({\n      start: 0.5,\n      factor: 2,\n      count: 35\n    })\n  ),\n  \"time_unit\",\n  \"milliseconds\"\n)\n\n/** @internal */\ntype EvaluationSignal =\n  | EvaluationSignalContinue\n  | EvaluationSignalDone\n  | EvaluationSignalYieldNow\n\n/** @internal */\nconst EvaluationSignalContinue = \"Continue\" as const\n\n/** @internal */\ntype EvaluationSignalContinue = typeof EvaluationSignalContinue\n\n/** @internal */\nconst EvaluationSignalDone = \"Done\" as const\n\n/** @internal */\ntype EvaluationSignalDone = typeof EvaluationSignalDone\n\n/** @internal */\nconst EvaluationSignalYieldNow = \"Yield\" as const\n\n/** @internal */\ntype EvaluationSignalYieldNow = typeof EvaluationSignalYieldNow\n\nconst runtimeFiberVariance = {\n  /* c8 ignore next */\n  _E: (_: never) => _,\n  /* c8 ignore next */\n  _A: (_: never) => _\n}\n\nconst absurd = (_: never): never => {\n  throw new Error(\n    `BUG: FiberRuntime - ${\n      Inspectable.toStringUnknown(_)\n    } - please report an issue at https://github.com/Effect-TS/effect/issues`\n  )\n}\n\nconst YieldedOp = Symbol.for(\"effect/internal/fiberRuntime/YieldedOp\")\ntype YieldedOp = typeof YieldedOp\nconst yieldedOpChannel: {\n  currentOp: core.Primitive | null\n} = globalValue(\"effect/internal/fiberRuntime/yieldedOpChannel\", () => ({\n  currentOp: null\n}))\n\nconst contOpSuccess = {\n  [OpCodes.OP_ON_SUCCESS]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccess,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i1(value))\n  },\n  [\"OnStep\"]: (\n    _: FiberRuntime<any, any>,\n    _cont: core.OnStep,\n    value: unknown\n  ) => {\n    return core.exitSucceed(core.exitSucceed(value))\n  },\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE]: (\n    _: FiberRuntime<any, any>,\n    cont: core.OnSuccessAndFailure,\n    value: unknown\n  ) => {\n    return internalCall(() => cont.effect_instruction_i2(value))\n  },\n  [OpCodes.OP_REVERT_FLAGS]: (\n    self: FiberRuntime<any, any>,\n    cont: core.RevertFlags,\n    value: unknown\n  ) => {\n    self.patchRuntimeFlags(self.currentRuntimeFlags, cont.patch)\n    if (_runtimeFlags.interruptible(self.currentRuntimeFlags) && self.isInterrupted()) {\n      return core.exitFailCause(self.getInterruptedCause())\n    } else {\n      return core.exitSucceed(value)\n    }\n  },\n  [OpCodes.OP_WHILE]: (\n    self: FiberRuntime<any, any>,\n    cont: core.While,\n    value: unknown\n  ) => {\n    internalCall(() => cont.effect_instruction_i2(value))\n    if (internalCall(() => cont.effect_instruction_i0())) {\n      self.pushStack(cont)\n      return internalCall(() => cont.effect_instruction_i1())\n    } else {\n      return core.void\n    }\n  },\n  [OpCodes.OP_ITERATOR]: (\n    self: FiberRuntime<any, any>,\n    cont: core.FromIterator,\n    value: unknown\n  ) => {\n    const state = internalCall(() => cont.effect_instruction_i0.next(value))\n    if (state.done) return core.exitSucceed(state.value)\n    self.pushStack(cont)\n    return yieldWrapGet(state.value)\n  }\n}\n\nconst drainQueueWhileRunningTable = {\n  [FiberMessage.OP_INTERRUPT_SIGNAL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_INTERRUPT_SIGNAL }\n  ) => {\n    self.processNewInterruptSignal(message.cause)\n    return _runtimeFlags.interruptible(runtimeFlags) ? core.exitFailCause(message.cause) : cur\n  },\n  [FiberMessage.OP_RESUME]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    _cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage\n  ) => {\n    throw new Error(\"It is illegal to have multiple concurrent run loops in a single fiber\")\n  },\n  [FiberMessage.OP_STATEFUL]: (\n    self: FiberRuntime<any, any>,\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_STATEFUL }\n  ) => {\n    message.onFiber(self, FiberStatus.running(runtimeFlags))\n    return cur\n  },\n  [FiberMessage.OP_YIELD_NOW]: (\n    _self: FiberRuntime<any, any>,\n    _runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur: Effect.Effect<any, any, any>,\n    _message: FiberMessage.FiberMessage & { _tag: FiberMessage.OP_YIELD_NOW }\n  ) => {\n    return core.flatMap(core.yieldNow(), () => cur)\n  }\n}\n\n/**\n * Executes all requests, submitting requests to each data source in parallel.\n */\nconst runBlockedRequests = (self: RequestBlock.RequestBlock) =>\n  core.forEachSequentialDiscard(\n    _RequestBlock.flatten(self),\n    (requestsByRequestResolver) =>\n      forEachConcurrentDiscard(\n        _RequestBlock.sequentialCollectionToChunk(requestsByRequestResolver),\n        ([dataSource, sequential]) => {\n          const map = new Map<Request<any, any>, Entry<any>>()\n          const arr: Array<Array<Entry<any>>> = []\n          for (const block of sequential) {\n            arr.push(Chunk.toReadonlyArray(block) as any)\n            for (const entry of block) {\n              map.set(entry.request as Request<any, any>, entry)\n            }\n          }\n          const flat = arr.flat()\n          return core.fiberRefLocally(\n            invokeWithInterrupt(dataSource.runAll(arr), flat, () =>\n              flat.forEach((entry) => {\n                entry.listeners.interrupted = true\n              })),\n            currentRequestMap,\n            map\n          )\n        },\n        false,\n        false\n      )\n  )\n\n/** @internal */\nexport interface Snapshot {\n  refs: FiberRefs.FiberRefs\n  flags: RuntimeFlags.RuntimeFlags\n}\n\n/** @internal */\nexport class FiberRuntime<in out A, in out E = never> extends Effectable.Class<A, E>\n  implements Fiber.RuntimeFiber<A, E>\n{\n  readonly [internalFiber.FiberTypeId] = internalFiber.fiberVariance\n  readonly [internalFiber.RuntimeFiberTypeId] = runtimeFiberVariance\n  private _fiberRefs: FiberRefs.FiberRefs\n  private _fiberId: FiberId.Runtime\n  private _queue = new Array<FiberMessage.FiberMessage>()\n  private _children: Set<FiberRuntime<any, any>> | null = null\n  private _observers = new Array<(exit: Exit.Exit<A, E>) => void>()\n  private _running = false\n  private _stack: Array<core.Continuation> = []\n  private _asyncInterruptor: ((effect: Effect.Effect<any, any, any>) => any) | null = null\n  private _asyncBlockingOn: FiberId.FiberId | null = null\n  private _exitValue: Exit.Exit<A, E> | null = null\n  private _steps: Array<Snapshot> = []\n  private _isYielding = false\n\n  public currentRuntimeFlags: RuntimeFlags.RuntimeFlags\n  public currentOpCount: number = 0\n  public currentSupervisor!: Supervisor.Supervisor<any>\n  public currentScheduler!: Scheduler\n  public currentTracer!: Tracer.Tracer\n  public currentSpan!: Tracer.AnySpan | undefined\n  public currentContext!: Context.Context<never>\n  public currentDefaultServices!: Context.Context<DefaultServices>\n\n  constructor(\n    fiberId: FiberId.Runtime,\n    fiberRefs0: FiberRefs.FiberRefs,\n    runtimeFlags0: RuntimeFlags.RuntimeFlags\n  ) {\n    super()\n    this.currentRuntimeFlags = runtimeFlags0\n    this._fiberId = fiberId\n    this._fiberRefs = fiberRefs0\n    if (_runtimeFlags.runtimeMetrics(runtimeFlags0)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      fiberStarted.unsafeUpdate(1, tags)\n      fiberActive.unsafeUpdate(1, tags)\n    }\n    this.refreshRefCache()\n  }\n\n  commit(): Effect.Effect<A, E, never> {\n    return internalFiber.join(this)\n  }\n\n  /**\n   * The identity of the fiber.\n   */\n  id(): FiberId.Runtime {\n    return this._fiberId\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background. This can be called to \"kick off\" execution of a fiber after\n   * it has been created.\n   */\n  resume<A, E>(effect: Effect.Effect<A, E, any>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * The status of the fiber.\n   */\n  get status(): Effect.Effect<FiberStatus.FiberStatus> {\n    return this.ask((_, status) => status)\n  }\n\n  /**\n   * Gets the fiber runtime flags.\n   */\n  get runtimeFlags(): Effect.Effect<RuntimeFlags.RuntimeFlags> {\n    return this.ask((state, status) => {\n      if (FiberStatus.isDone(status)) {\n        return state.currentRuntimeFlags\n      }\n      return status.runtimeFlags\n    })\n  }\n\n  /**\n   * Returns the current `FiberScope` for the fiber.\n   */\n  scope(): fiberScope.FiberScope {\n    return fiberScope.unsafeMake(this)\n  }\n\n  /**\n   * Retrieves the immediate children of the fiber.\n   */\n  get children(): Effect.Effect<Array<Fiber.RuntimeFiber<any, any>>> {\n    return this.ask((fiber) => Array.from(fiber.getChildren()))\n  }\n\n  /**\n   * Gets the fiber's set of children.\n   */\n  getChildren(): Set<FiberRuntime<any, any>> {\n    if (this._children === null) {\n      this._children = new Set()\n    }\n    return this._children\n  }\n\n  /**\n   * Retrieves the interrupted cause of the fiber, which will be `Cause.empty`\n   * if the fiber has not been interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getInterruptedCause() {\n    return this.getFiberRef(core.currentInterruptedCause)\n  }\n\n  /**\n   * Retrieves the whole set of fiber refs.\n   */\n  fiberRefs(): Effect.Effect<FiberRefs.FiberRefs> {\n    return this.ask((fiber) => fiber.getFiberRefs())\n  }\n\n  /**\n   * Returns an effect that will contain information computed from the fiber\n   * state and status while running on the fiber.\n   *\n   * This allows the outside world to interact safely with mutable fiber state\n   * without locks or immutable data.\n   */\n  ask<Z>(\n    f: (runtime: FiberRuntime<any, any>, status: FiberStatus.FiberStatus) => Z\n  ): Effect.Effect<Z> {\n    return core.suspend(() => {\n      const deferred = core.deferredUnsafeMake<Z>(this._fiberId)\n      this.tell(\n        FiberMessage.stateful((fiber, status) => {\n          core.deferredUnsafeDone(deferred, core.sync(() => f(fiber, status)))\n        })\n      )\n      return core.deferredAwait(deferred)\n    })\n  }\n\n  /**\n   * Adds a message to be processed by the fiber on the fiber.\n   */\n  tell(message: FiberMessage.FiberMessage): void {\n    this._queue.push(message)\n    if (!this._running) {\n      this._running = true\n      this.drainQueueLaterOnExecutor()\n    }\n  }\n\n  get await(): Effect.Effect<Exit.Exit<A, E>> {\n    return core.async((resume) => {\n      const cb = (exit: Exit.Exit<A, E>) => resume(core.succeed(exit))\n      this.tell(\n        FiberMessage.stateful((fiber, _) => {\n          if (fiber._exitValue !== null) {\n            cb(this._exitValue!)\n          } else {\n            fiber.addObserver(cb)\n          }\n        })\n      )\n      return core.sync(() =>\n        this.tell(\n          FiberMessage.stateful((fiber, _) => {\n            fiber.removeObserver(cb)\n          })\n        )\n      )\n    }, this.id())\n  }\n\n  get inheritAll(): Effect.Effect<void> {\n    return core.withFiberRuntime((parentFiber, parentStatus) => {\n      const parentFiberId = parentFiber.id()\n      const parentFiberRefs = parentFiber.getFiberRefs()\n      const parentRuntimeFlags = parentStatus.runtimeFlags\n      const childFiberRefs = this.getFiberRefs()\n      const updatedFiberRefs = fiberRefs.joinAs(parentFiberRefs, parentFiberId, childFiberRefs)\n\n      parentFiber.setFiberRefs(updatedFiberRefs)\n\n      const updatedRuntimeFlags = parentFiber.getFiberRef(currentRuntimeFlags)\n\n      const patch = pipe(\n        _runtimeFlags.diff(parentRuntimeFlags, updatedRuntimeFlags),\n        // Do not inherit WindDown or Interruption!\n        RuntimeFlagsPatch.exclude(_runtimeFlags.Interruption),\n        RuntimeFlagsPatch.exclude(_runtimeFlags.WindDown)\n      )\n\n      return core.updateRuntimeFlags(patch)\n    })\n  }\n\n  /**\n   * Tentatively observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  get poll(): Effect.Effect<Option.Option<Exit.Exit<A, E>>> {\n    return core.sync(() => Option.fromNullable(this._exitValue))\n  }\n\n  /**\n   * Unsafely observes the fiber, but returns immediately if it is not\n   * already done.\n   */\n  unsafePoll(): Exit.Exit<A, E> | null {\n    return this._exitValue\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  interruptAsFork(fiberId: FiberId.FiberId): Effect.Effect<void> {\n    return core.sync(() => this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId))))\n  }\n\n  /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */\n  unsafeInterruptAsFork(fiberId: FiberId.FiberId) {\n    this.tell(FiberMessage.interruptSignal(internalCause.interrupt(fiberId)))\n  }\n\n  /**\n   * Adds an observer to the list of observers.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    if (this._exitValue !== null) {\n      observer(this._exitValue!)\n    } else {\n      this._observers.push(observer)\n    }\n  }\n\n  /**\n   * Removes the specified observer from the list of observers that will be\n   * notified when the fiber exits.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeObserver(observer: (exit: Exit.Exit<A, E>) => void): void {\n    this._observers = this._observers.filter((o) => o !== observer)\n  }\n  /**\n   * Retrieves all fiber refs of the fiber.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRefs(): FiberRefs.FiberRefs {\n    this.setFiberRef(currentRuntimeFlags, this.currentRuntimeFlags)\n    return this._fiberRefs\n  }\n\n  /**\n   * Deletes the specified fiber ref.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  unsafeDeleteFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): void {\n    this._fiberRefs = fiberRefs.delete_(this._fiberRefs, fiberRef)\n  }\n\n  /**\n   * Retrieves the state of the fiber ref, or else its initial value.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  getFiberRef<X>(fiberRef: FiberRef.FiberRef<X>): X {\n    if (this._fiberRefs.locals.has(fiberRef)) {\n      return this._fiberRefs.locals.get(fiberRef)![0][1] as X\n    }\n    return fiberRef.initial\n  }\n\n  /**\n   * Sets the fiber ref to the specified value.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRef<X>(fiberRef: FiberRef.FiberRef<X>, value: X): void {\n    this._fiberRefs = fiberRefs.updateAs(this._fiberRefs, {\n      fiberId: this._fiberId,\n      fiberRef,\n      value\n    })\n    this.refreshRefCache()\n  }\n\n  refreshRefCache() {\n    this.currentDefaultServices = this.getFiberRef(defaultServices.currentServices)\n    this.currentTracer = this.currentDefaultServices.unsafeMap.get(tracer.tracerTag.key)\n    this.currentSupervisor = this.getFiberRef(currentSupervisor)\n    this.currentScheduler = this.getFiberRef(currentScheduler)\n    this.currentContext = this.getFiberRef(core.currentContext)\n    this.currentSpan = this.currentContext.unsafeMap.get(tracer.spanTag.key)\n  }\n\n  /**\n   * Wholesale replaces all fiber refs of this fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  setFiberRefs(fiberRefs: FiberRefs.FiberRefs): void {\n    this._fiberRefs = fiberRefs\n    this.refreshRefCache()\n  }\n\n  /**\n   * Adds a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addChild(child: FiberRuntime<any, any>) {\n    this.getChildren().add(child)\n  }\n\n  /**\n   * Removes a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  removeChild(child: FiberRuntime<any, any>) {\n    this.getChildren().delete(child)\n  }\n\n  /**\n   * Transfers all children of this fiber that are currently running to the\n   * specified fiber scope.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself after it has\n   * evaluated the effects but prior to exiting.\n   */\n  transferChildren(scope: fiberScope.FiberScope) {\n    const children = this._children\n    // Clear the children of the current fiber\n    this._children = null\n    if (children !== null && children.size > 0) {\n      for (const child of children) {\n        // If the child is still running, add it to the scope\n        if (child._exitValue === null) {\n          scope.add(this.currentRuntimeFlags, child)\n        }\n      }\n    }\n  }\n\n  /**\n   * On the current thread, executes all messages in the fiber's inbox. This\n   * method may return before all work is done, in the event the fiber executes\n   * an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueOnCurrentThread() {\n    let recurse = true\n    while (recurse) {\n      let evaluationSignal: EvaluationSignal = EvaluationSignalContinue\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        while (evaluationSignal === EvaluationSignalContinue) {\n          evaluationSignal = this._queue.length === 0 ?\n            EvaluationSignalDone :\n            this.evaluateMessageWhileSuspended(this._queue.splice(0, 1)[0]!)\n        }\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n      }\n      // Maybe someone added something to the queue between us checking, and us\n      // giving up the drain. If so, we need to restart the draining, but only\n      // if we beat everyone else to the restart:\n      if (this._queue.length > 0 && !this._running) {\n        this._running = true\n        if (evaluationSignal === EvaluationSignalYieldNow) {\n          this.drainQueueLaterOnExecutor()\n          recurse = false\n        } else {\n          recurse = true\n        }\n      } else {\n        recurse = false\n      }\n    }\n  }\n\n  /**\n   * Schedules the execution of all messages in the fiber's inbox.\n   *\n   * This method will return immediately after the scheduling\n   * operation is completed, but potentially before such messages have been\n   * executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueLaterOnExecutor() {\n    this.currentScheduler.scheduleTask(\n      this.run,\n      this.getFiberRef(core.currentSchedulingPriority)\n    )\n  }\n\n  /**\n   * Drains the fiber's message queue while the fiber is actively running,\n   * returning the next effect to execute, which may be the input effect if no\n   * additional effect needs to be executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  drainQueueWhileRunning(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    cur0: Effect.Effect<any, any, any>\n  ) {\n    let cur = cur0\n    while (this._queue.length > 0) {\n      const message = this._queue.splice(0, 1)[0]\n      // @ts-expect-error\n      cur = drainQueueWhileRunningTable[message._tag](this, runtimeFlags, cur, message)\n    }\n    return cur\n  }\n\n  /**\n   * Determines if the fiber is interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */\n  isInterrupted(): boolean {\n    return !internalCause.isEmpty(this.getFiberRef(core.currentInterruptedCause))\n  }\n\n  /**\n   * Adds an interruptor to the set of interruptors that are interrupting this\n   * fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  addInterruptedCause(cause: Cause.Cause<never>) {\n    const oldSC = this.getFiberRef(core.currentInterruptedCause)\n    this.setFiberRef(core.currentInterruptedCause, internalCause.sequential(oldSC, cause))\n  }\n\n  /**\n   * Processes a new incoming interrupt signal.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  processNewInterruptSignal(cause: Cause.Cause<never>): void {\n    this.addInterruptedCause(cause)\n    this.sendInterruptSignalToAllChildren()\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  sendInterruptSignalToAllChildren(): boolean {\n    if (this._children === null || this._children.size === 0) {\n      return false\n    }\n    let told = false\n    for (const child of this._children) {\n      child.tell(FiberMessage.interruptSignal(internalCause.interrupt(this.id())))\n      told = true\n    }\n    return told\n  }\n\n  /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  interruptAllChildren() {\n    if (this.sendInterruptSignalToAllChildren()) {\n      const it = this._children!.values()\n      this._children = null\n      let isDone = false\n      const body = () => {\n        const next = it.next()\n        if (!next.done) {\n          return core.asVoid(next.value.await)\n        } else {\n          return core.sync(() => {\n            isDone = true\n          })\n        }\n      }\n      return core.whileLoop({\n        while: () => !isDone,\n        body,\n        step: () => {\n          //\n        }\n      })\n    }\n    return null\n  }\n\n  reportExitValue(exit: Exit.Exit<A, E>) {\n    if (_runtimeFlags.runtimeMetrics(this.currentRuntimeFlags)) {\n      const tags = this.getFiberRef(core.currentMetricLabels)\n      const startTimeMillis = this.id().startTimeMillis\n      const endTimeMillis = Date.now()\n      fiberLifetimes.unsafeUpdate(endTimeMillis - startTimeMillis, tags)\n      fiberActive.unsafeUpdate(-1, tags)\n      switch (exit._tag) {\n        case OpCodes.OP_SUCCESS: {\n          fiberSuccesses.unsafeUpdate(1, tags)\n          break\n        }\n        case OpCodes.OP_FAILURE: {\n          fiberFailures.unsafeUpdate(1, tags)\n          break\n        }\n      }\n    }\n    if (exit._tag === \"Failure\") {\n      const level = this.getFiberRef(core.currentUnhandledErrorLogLevel)\n      if (!internalCause.isInterruptedOnly(exit.cause) && level._tag === \"Some\") {\n        this.log(\"Fiber terminated with an unhandled error\", exit.cause, level)\n      }\n    }\n  }\n\n  setExitValue(exit: Exit.Exit<A, E>) {\n    this._exitValue = exit\n    this.reportExitValue(exit)\n    for (let i = this._observers.length - 1; i >= 0; i--) {\n      this._observers[i](exit)\n    }\n    this._observers = []\n  }\n\n  getLoggers() {\n    return this.getFiberRef(currentLoggers)\n  }\n\n  log(\n    message: unknown,\n    cause: Cause.Cause<any>,\n    overrideLogLevel: Option.Option<LogLevel.LogLevel>\n  ): void {\n    const logLevel = Option.isSome(overrideLogLevel) ?\n      overrideLogLevel.value :\n      this.getFiberRef(core.currentLogLevel)\n    const minimumLogLevel = this.getFiberRef(currentMinimumLogLevel)\n    if (LogLevel.greaterThan(minimumLogLevel, logLevel)) {\n      return\n    }\n    const spans = this.getFiberRef(core.currentLogSpan)\n    const annotations = this.getFiberRef(core.currentLogAnnotations)\n    const loggers = this.getLoggers()\n    const contextMap = this.getFiberRefs()\n    if (HashSet.size(loggers) > 0) {\n      const clockService = Context.get(this.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      const date = new Date(clockService.unsafeCurrentTimeMillis())\n      Inspectable.withRedactableContext(contextMap, () => {\n        for (const logger of loggers) {\n          logger.log({\n            fiberId: this.id(),\n            logLevel,\n            message,\n            cause,\n            context: contextMap,\n            spans,\n            annotations,\n            date\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Evaluates a single message on the current thread, while the fiber is\n   * suspended. This method should only be called while evaluation of the\n   * fiber's effect is suspended due to an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateMessageWhileSuspended(message: FiberMessage.FiberMessage): EvaluationSignal {\n    switch (message._tag) {\n      case FiberMessage.OP_YIELD_NOW: {\n        return EvaluationSignalYieldNow\n      }\n      case FiberMessage.OP_INTERRUPT_SIGNAL: {\n        this.processNewInterruptSignal(message.cause)\n        if (this._asyncInterruptor !== null) {\n          this._asyncInterruptor(core.exitFailCause(message.cause))\n          this._asyncInterruptor = null\n        }\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_RESUME: {\n        this._asyncInterruptor = null\n        this._asyncBlockingOn = null\n        this.evaluateEffect(message.effect)\n        return EvaluationSignalContinue\n      }\n      case FiberMessage.OP_STATEFUL: {\n        message.onFiber(\n          this,\n          this._exitValue !== null ?\n            FiberStatus.done :\n            FiberStatus.suspended(this.currentRuntimeFlags, this._asyncBlockingOn!)\n        )\n        return EvaluationSignalContinue\n      }\n      default: {\n        return absurd(message)\n      }\n    }\n  }\n\n  /**\n   * Evaluates an effect until completion, potentially asynchronously.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  evaluateEffect(effect0: Effect.Effect<any, any, any>) {\n    this.currentSupervisor.onResume(this)\n    try {\n      let effect: Effect.Effect<any, any, any> | null =\n        _runtimeFlags.interruptible(this.currentRuntimeFlags) && this.isInterrupted() ?\n          core.exitFailCause(this.getInterruptedCause()) :\n          effect0\n      while (effect !== null) {\n        const eff: Effect.Effect<any, any, any> = effect\n        const exit = this.runLoop(eff)\n        if (exit === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          yieldedOpChannel.currentOp = null\n          if (op._op === OpCodes.OP_YIELD) {\n            if (_runtimeFlags.cooperativeYielding(this.currentRuntimeFlags)) {\n              this.tell(FiberMessage.yieldNow())\n              this.tell(FiberMessage.resume(core.exitVoid))\n              effect = null\n            } else {\n              effect = core.exitVoid\n            }\n          } else if (op._op === OpCodes.OP_ASYNC) {\n            // Terminate this evaluation, async resumption will continue evaluation:\n            effect = null\n          }\n        } else {\n          this.currentRuntimeFlags = pipe(this.currentRuntimeFlags, _runtimeFlags.enable(_runtimeFlags.WindDown))\n          const interruption = this.interruptAllChildren()\n          if (interruption !== null) {\n            effect = core.flatMap(interruption, () => exit)\n          } else {\n            if (this._queue.length === 0) {\n              // No more messages to process, so we will allow the fiber to end life:\n              this.setExitValue(exit)\n            } else {\n              // There are messages, possibly added by the final op executed by\n              // the fiber. To be safe, we should execute those now before we\n              // allow the fiber to end life:\n              this.tell(FiberMessage.resume(exit))\n            }\n            effect = null\n          }\n        }\n      }\n    } finally {\n      this.currentSupervisor.onSuspend(this)\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on the current\n   * thread. This can be called to \"kick off\" execution of a fiber after it has\n   * been created, in hopes that the effect can be executed synchronously.\n   *\n   * This is not the normal way of starting a fiber, but it is useful when the\n   * express goal of executing the fiber is to synchronously produce its exit.\n   */\n  start<R>(effect: Effect.Effect<A, E, R>): void {\n    if (!this._running) {\n      this._running = true\n      const prev = (globalThis as any)[internalFiber.currentFiberURI]\n      ;(globalThis as any)[internalFiber.currentFiberURI] = this\n      try {\n        this.evaluateEffect(effect)\n      } finally {\n        this._running = false\n        ;(globalThis as any)[internalFiber.currentFiberURI] = prev\n        // Because we're special casing `start`, we have to be responsible\n        // for spinning up the fiber if there were new messages added to\n        // the queue between the completion of the effect and the transition\n        // to the not running state.\n        if (this._queue.length > 0) {\n          this.drainQueueLaterOnExecutor()\n        }\n      }\n    } else {\n      this.tell(FiberMessage.resume(effect))\n    }\n  }\n\n  /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background, and on the correct thread pool. This can be called to \"kick\n   * off\" execution of a fiber after it has been created, in hopes that the\n   * effect can be executed synchronously.\n   */\n  startFork<R>(effect: Effect.Effect<A, E, R>): void {\n    this.tell(FiberMessage.resume(effect))\n  }\n\n  /**\n   * Takes the current runtime flags, patches them to return the new runtime\n   * flags, and then makes any changes necessary to fiber state based on the\n   * specified patch.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  patchRuntimeFlags(oldRuntimeFlags: RuntimeFlags.RuntimeFlags, patch: RuntimeFlagsPatch.RuntimeFlagsPatch) {\n    const newRuntimeFlags = _runtimeFlags.patch(oldRuntimeFlags, patch)\n    ;(globalThis as any)[internalFiber.currentFiberURI] = this\n    this.currentRuntimeFlags = newRuntimeFlags\n    return newRuntimeFlags\n  }\n\n  /**\n   * Initiates an asynchronous operation, by building a callback that will\n   * resume execution, and then feeding that callback to the registration\n   * function, handling error cases and repeated resumptions appropriately.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  initiateAsync(\n    runtimeFlags: RuntimeFlags.RuntimeFlags,\n    asyncRegister: (resume: (effect: Effect.Effect<any, any, any>) => void) => void\n  ) {\n    let alreadyCalled = false\n    const callback = (effect: Effect.Effect<any, any, any>) => {\n      if (!alreadyCalled) {\n        alreadyCalled = true\n        this.tell(FiberMessage.resume(effect))\n      }\n    }\n    if (_runtimeFlags.interruptible(runtimeFlags)) {\n      this._asyncInterruptor = callback\n    }\n    try {\n      asyncRegister(callback)\n    } catch (e) {\n      callback(core.failCause(internalCause.die(e)))\n    }\n  }\n\n  pushStack(cont: core.Continuation) {\n    this._stack.push(cont)\n    if (cont._op === \"OnStep\") {\n      this._steps.push({ refs: this.getFiberRefs(), flags: this.currentRuntimeFlags })\n    }\n  }\n\n  popStack() {\n    const item = this._stack.pop()\n    if (item) {\n      if (item._op === \"OnStep\") {\n        this._steps.pop()\n      }\n      return item\n    }\n    return\n  }\n\n  getNextSuccessCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_FAILURE) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  getNextFailCont() {\n    let frame = this.popStack()\n    while (frame) {\n      if (frame._op !== OpCodes.OP_ON_SUCCESS && frame._op !== OpCodes.OP_WHILE && frame._op !== OpCodes.OP_ITERATOR) {\n        return frame\n      }\n      frame = this.popStack()\n    }\n  }\n\n  [OpCodes.OP_TAG](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    return core.sync(() => Context.unsafeGet(this.currentContext, op as unknown as Context.Tag<any, any>))\n  }\n\n  [\"Left\"](op: core.Primitive & { _op: \"Left\" }) {\n    return core.fail(op.left)\n  }\n\n  [\"None\"](_: core.Primitive & { _op: \"None\" }) {\n    return core.fail(new core.NoSuchElementException())\n  }\n\n  [\"Right\"](op: core.Primitive & { _op: \"Right\" }) {\n    return core.exitSucceed(op.right)\n  }\n\n  [\"Some\"](op: core.Primitive & { _op: \"Some\" }) {\n    return core.exitSucceed(op.value)\n  }\n\n  [\"Micro\"](op: Micro.Micro<any, any, never> & { _op: \"Micro\" }) {\n    return core.unsafeAsync<any, any>((microResume) => {\n      let resume = microResume\n      const fiber = Micro.runFork(Micro.provideContext(op, this.currentContext))\n      fiber.addObserver((exit) => {\n        if (exit._tag === \"Success\") {\n          return resume(core.exitSucceed(exit.value))\n        }\n        switch (exit.cause._tag) {\n          case \"Interrupt\": {\n            return resume(core.exitFailCause(internalCause.interrupt(FiberId.none)))\n          }\n          case \"Fail\": {\n            return resume(core.fail(exit.cause.error))\n          }\n          case \"Die\": {\n            return resume(core.die(exit.cause.defect))\n          }\n        }\n      })\n      return core.unsafeAsync<void>((abortResume) => {\n        resume = (_: any) => {\n          abortResume(core.void)\n        }\n        fiber.unsafeInterrupt()\n      })\n    })\n  }\n\n  [OpCodes.OP_SYNC](op: core.Primitive & { _op: OpCodes.OP_SYNC }) {\n    const value = internalCall(() => op.effect_instruction_i0())\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, value)\n    } else {\n      yieldedOpChannel.currentOp = core.exitSucceed(value) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_SUCCESS }) {\n    const oldCur = op\n    const cont = this.getNextSuccessCont()\n    if (cont !== undefined) {\n      if (!(cont._op in contOpSuccess)) {\n        // @ts-expect-error\n        absurd(cont)\n      }\n      // @ts-expect-error\n      return contOpSuccess[cont._op](this, cont, oldCur.effect_instruction_i0)\n    } else {\n      yieldedOpChannel.currentOp = oldCur\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_FAILURE](op: core.Primitive & { _op: OpCodes.OP_FAILURE }) {\n    const cause = op.effect_instruction_i0\n    const cont = this.getNextFailCont()\n    if (cont !== undefined) {\n      switch (cont._op) {\n        case OpCodes.OP_ON_FAILURE:\n        case OpCodes.OP_ON_SUCCESS_AND_FAILURE: {\n          if (!(_runtimeFlags.interruptible(this.currentRuntimeFlags) && this.isInterrupted())) {\n            return internalCall(() => cont.effect_instruction_i1(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case \"OnStep\": {\n          if (!(_runtimeFlags.interruptible(this.currentRuntimeFlags) && this.isInterrupted())) {\n            return core.exitSucceed(core.exitFailCause(cause))\n          } else {\n            return core.exitFailCause(internalCause.stripFailures(cause))\n          }\n        }\n        case OpCodes.OP_REVERT_FLAGS: {\n          this.patchRuntimeFlags(this.currentRuntimeFlags, cont.patch)\n          if (_runtimeFlags.interruptible(this.currentRuntimeFlags) && this.isInterrupted()) {\n            return core.exitFailCause(internalCause.sequential(cause, this.getInterruptedCause()))\n          } else {\n            return core.exitFailCause(cause)\n          }\n        }\n        default: {\n          absurd(cont)\n        }\n      }\n    } else {\n      yieldedOpChannel.currentOp = core.exitFailCause(cause) as any\n      return YieldedOp\n    }\n  }\n\n  [OpCodes.OP_WITH_RUNTIME](op: core.Primitive & { _op: OpCodes.OP_WITH_RUNTIME }) {\n    return internalCall(() =>\n      op.effect_instruction_i0(\n        this as FiberRuntime<unknown, unknown>,\n        FiberStatus.running(this.currentRuntimeFlags) as FiberStatus.Running\n      )\n    )\n  }\n\n  [\"Blocked\"](op: core.Primitive & { _op: \"Blocked\" }) {\n    const refs = this.getFiberRefs()\n    const flags = this.currentRuntimeFlags\n    if (this._steps.length > 0) {\n      const frames: Array<core.Continuation> = []\n      const snap = this._steps[this._steps.length - 1]\n      let frame = this.popStack()\n      while (frame && frame._op !== \"OnStep\") {\n        frames.push(frame)\n        frame = this.popStack()\n      }\n      this.setFiberRefs(snap.refs)\n      this.currentRuntimeFlags = snap.flags\n      const patchRefs = FiberRefsPatch.diff(snap.refs, refs)\n      const patchFlags = _runtimeFlags.diff(snap.flags, flags)\n      return core.exitSucceed(core.blocked(\n        op.effect_instruction_i0,\n        core.withFiberRuntime<unknown, unknown>((newFiber) => {\n          while (frames.length > 0) {\n            newFiber.pushStack(frames.pop()!)\n          }\n          newFiber.setFiberRefs(\n            FiberRefsPatch.patch(newFiber.id(), newFiber.getFiberRefs())(patchRefs)\n          )\n          newFiber.currentRuntimeFlags = _runtimeFlags.patch(patchFlags)(newFiber.currentRuntimeFlags)\n          return op.effect_instruction_i1\n        })\n      ))\n    }\n    return core.uninterruptibleMask((restore) =>\n      core.flatMap(\n        forkDaemon(core.runRequestBlock(op.effect_instruction_i0)),\n        () => restore(op.effect_instruction_i1)\n      )\n    )\n  }\n\n  [\"RunBlocked\"](op: core.Primitive & { _op: \"RunBlocked\" }) {\n    return runBlockedRequests(op.effect_instruction_i0)\n  }\n\n  [OpCodes.OP_UPDATE_RUNTIME_FLAGS](op: core.Primitive & { _op: OpCodes.OP_UPDATE_RUNTIME_FLAGS }) {\n    const updateFlags = op.effect_instruction_i0\n    const oldRuntimeFlags = this.currentRuntimeFlags\n    const newRuntimeFlags = _runtimeFlags.patch(oldRuntimeFlags, updateFlags)\n    // One more chance to short circuit: if we're immediately going\n    // to interrupt. Interruption will cause immediate reversion of\n    // the flag, so as long as we \"peek ahead\", there's no need to\n    // set them to begin with.\n    if (_runtimeFlags.interruptible(newRuntimeFlags) && this.isInterrupted()) {\n      return core.exitFailCause(this.getInterruptedCause())\n    } else {\n      // Impossible to short circuit, so record the changes\n      this.patchRuntimeFlags(this.currentRuntimeFlags, updateFlags)\n      if (op.effect_instruction_i1) {\n        // Since we updated the flags, we need to revert them\n        const revertFlags = _runtimeFlags.diff(newRuntimeFlags, oldRuntimeFlags)\n        this.pushStack(new core.RevertFlags(revertFlags, op))\n        return internalCall(() => op.effect_instruction_i1!(oldRuntimeFlags))\n      } else {\n        return core.exitVoid\n      }\n    }\n  }\n\n  [OpCodes.OP_ON_SUCCESS](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [\"OnStep\"](op: core.Primitive & { _op: \"OnStep\" }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ON_SUCCESS_AND_FAILURE](op: core.Primitive & { _op: OpCodes.OP_ON_SUCCESS_AND_FAILURE }) {\n    this.pushStack(op)\n    return op.effect_instruction_i0\n  }\n\n  [OpCodes.OP_ASYNC](op: core.Primitive & { _op: OpCodes.OP_ASYNC }) {\n    this._asyncBlockingOn = op.effect_instruction_i1\n    this.initiateAsync(this.currentRuntimeFlags, op.effect_instruction_i0)\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_YIELD](op: core.Primitive & { op: OpCodes.OP_YIELD }) {\n    this._isYielding = false\n    yieldedOpChannel.currentOp = op\n    return YieldedOp\n  }\n\n  [OpCodes.OP_WHILE](op: core.Primitive & { _op: OpCodes.OP_WHILE }) {\n    const check = op.effect_instruction_i0\n    const body = op.effect_instruction_i1\n    if (check()) {\n      this.pushStack(op)\n      return body()\n    } else {\n      return core.exitVoid\n    }\n  }\n\n  [OpCodes.OP_ITERATOR](op: core.Primitive & { _op: OpCodes.OP_ITERATOR }) {\n    return contOpSuccess[OpCodes.OP_ITERATOR](this, op, undefined)\n  }\n\n  [OpCodes.OP_COMMIT](op: core.Primitive & { _op: OpCodes.OP_COMMIT }) {\n    return internalCall(() => op.commit())\n  }\n\n  /**\n   * The main run-loop for evaluating effects.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */\n  runLoop(effect0: Effect.Effect<any, any, any>): Exit.Exit<any, any> | YieldedOp {\n    let cur: Effect.Effect<any, any, any> | YieldedOp = effect0\n    this.currentOpCount = 0\n\n    while (true) {\n      if ((this.currentRuntimeFlags & OpSupervision) !== 0) {\n        this.currentSupervisor.onEffect(this, cur)\n      }\n      if (this._queue.length > 0) {\n        cur = this.drainQueueWhileRunning(this.currentRuntimeFlags, cur)\n      }\n      if (!this._isYielding) {\n        this.currentOpCount += 1\n        const shouldYield = this.currentScheduler.shouldYield(this)\n        if (shouldYield !== false) {\n          this._isYielding = true\n          this.currentOpCount = 0\n          const oldCur = cur\n          cur = core.flatMap(core.yieldNow({ priority: shouldYield }), () => oldCur)\n        }\n      }\n      try {\n        // @ts-expect-error\n        cur = this.currentTracer.context(\n          () => {\n            if (version.getCurrentVersion() !== (cur as core.Primitive)[core.EffectTypeId]._V) {\n              return core.dieMessage(\n                `Cannot execute an Effect versioned ${\n                  (cur as core.Primitive)[core.EffectTypeId]._V\n                } with a Runtime of version ${version.getCurrentVersion()}`\n              )\n            }\n            // @ts-expect-error\n            return this[(cur as core.Primitive)._op](cur as core.Primitive)\n          },\n          this\n        )\n\n        if (cur === YieldedOp) {\n          const op = yieldedOpChannel.currentOp!\n          if (\n            op._op === OpCodes.OP_YIELD ||\n            op._op === OpCodes.OP_ASYNC\n          ) {\n            return YieldedOp\n          }\n\n          yieldedOpChannel.currentOp = null\n          return (\n              op._op === OpCodes.OP_SUCCESS ||\n              op._op === OpCodes.OP_FAILURE\n            ) ?\n            op as unknown as Exit.Exit<A, E> :\n            core.exitFailCause(internalCause.die(op))\n        }\n      } catch (e) {\n        if (cur !== YieldedOp && !Predicate.hasProperty(cur, \"_op\") || !((cur as core.Primitive)._op in this)) {\n          cur = core.dieMessage(`Not a valid effect: ${Inspectable.toStringUnknown(cur)}`)\n        } else if (core.isEffectError(e)) {\n          cur = core.exitFailCause(e.cause)\n        } else if (core.isInterruptedException(e)) {\n          cur = core.exitFailCause(\n            internalCause.sequential(internalCause.die(e), internalCause.interrupt(FiberId.none))\n          )\n        } else {\n          cur = core.die(e)\n        }\n      }\n    }\n  }\n\n  run = () => {\n    this.drainQueueOnCurrentThread()\n  }\n}\n\n// circular with Logger\n\n/** @internal */\nexport const currentMinimumLogLevel: FiberRef.FiberRef<LogLevel.LogLevel> = globalValue(\n  \"effect/FiberRef/currentMinimumLogLevel\",\n  () => core.fiberRefUnsafeMake<LogLevel.LogLevel>(LogLevel.fromLiteral(\"Info\"))\n)\n\n/** @internal */\nexport const loggerWithConsoleLog = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.log(self.log(opts))\n  })\n\n/** @internal */\nexport const loggerWithLeveledLog = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    const unsafeLogger = Context.get(services, consoleTag).unsafe\n    switch (opts.logLevel._tag) {\n      case \"Debug\":\n        return unsafeLogger.debug(self.log(opts))\n      case \"Info\":\n        return unsafeLogger.info(self.log(opts))\n      case \"Trace\":\n        return unsafeLogger.trace(self.log(opts))\n      case \"Warning\":\n        return unsafeLogger.warn(self.log(opts))\n      case \"Error\":\n      case \"Fatal\":\n        return unsafeLogger.error(self.log(opts))\n      default:\n        return unsafeLogger.log(self.log(opts))\n    }\n  })\n\n/** @internal */\nexport const loggerWithConsoleError = <M, O>(self: Logger<M, O>): Logger<M, void> =>\n  internalLogger.makeLogger((opts) => {\n    const services = FiberRefs.getOrDefault(opts.context, defaultServices.currentServices)\n    Context.get(services, consoleTag).unsafe.error(self.log(opts))\n  })\n\n/** @internal */\nexport const defaultLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/defaultLogger\"),\n  () => loggerWithConsoleLog(internalLogger.stringLogger)\n)\n\n/** @internal */\nexport const jsonLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/jsonLogger\"),\n  () => loggerWithConsoleLog(internalLogger.jsonLogger)\n)\n\n/** @internal */\nexport const logFmtLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/logFmtLogger\"),\n  () => loggerWithConsoleLog(internalLogger.logfmtLogger)\n)\n\n/** @internal */\nexport const prettyLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/prettyLogger\"),\n  () => internalLogger.prettyLoggerDefault\n)\n\n/** @internal */\nexport const structuredLogger: Logger<unknown, void> = globalValue(\n  Symbol.for(\"effect/Logger/structuredLogger\"),\n  () => loggerWithConsoleLog(internalLogger.structuredLogger)\n)\n\n/** @internal */\nexport const tracerLogger = globalValue(\n  Symbol.for(\"effect/Logger/tracerLogger\"),\n  () =>\n    internalLogger.makeLogger<unknown, void>(({\n      annotations,\n      cause,\n      context,\n      fiberId,\n      logLevel,\n      message\n    }) => {\n      const span = Context.getOption(\n        fiberRefs.getOrDefault(context, core.currentContext),\n        tracer.spanTag\n      )\n      if (span._tag === \"None\" || span.value._tag === \"ExternalSpan\") {\n        return\n      }\n      const clockService = Context.unsafeGet(\n        fiberRefs.getOrDefault(context, defaultServices.currentServices),\n        clock.clockTag\n      )\n\n      const attributes: Record<string, unknown> = {}\n      for (const [key, value] of annotations) {\n        attributes[key] = value\n      }\n      attributes[\"effect.fiberId\"] = FiberId.threadName(fiberId)\n      attributes[\"effect.logLevel\"] = logLevel.label\n\n      if (cause !== null && cause._tag !== \"Empty\") {\n        attributes[\"effect.cause\"] = internalCause.pretty(cause, { renderErrorCause: true })\n      }\n\n      span.value.event(\n        Inspectable.toStringUnknown(Array.isArray(message) ? message[0] : message),\n        clockService.unsafeCurrentTimeNanos(),\n        attributes\n      )\n    })\n)\n\n/** @internal */\nexport const loggerWithSpanAnnotations = <Message, Output>(self: Logger<Message, Output>): Logger<Message, Output> =>\n  internalLogger.mapInputOptions(self, (options: Logger.Options<Message>) => {\n    const span = Option.flatMap(fiberRefs.get(options.context, core.currentContext), Context.getOption(tracer.spanTag))\n    if (span._tag === \"None\") {\n      return options\n    }\n    return {\n      ...options,\n      annotations: pipe(\n        options.annotations,\n        HashMap.set(\"effect.traceId\", span.value.traceId as unknown),\n        HashMap.set(\"effect.spanId\", span.value.spanId as unknown),\n        span.value._tag === \"Span\" ? HashMap.set(\"effect.spanName\", span.value.name as unknown) : identity\n      )\n    }\n  })\n\n/** @internal */\nexport const currentLoggers: FiberRef.FiberRef<\n  HashSet.HashSet<Logger<unknown, any>>\n> = globalValue(\n  Symbol.for(\"effect/FiberRef/currentLoggers\"),\n  () => core.fiberRefUnsafeMakeHashSet(HashSet.make(defaultLogger, tracerLogger))\n)\n\n/** @internal */\nexport const batchedLogger = dual<\n  <Output, R>(\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => <Message>(\n    self: Logger<Message, Output>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>,\n  <Message, Output, R>(\n    self: Logger<Message, Output>,\n    window: Duration.DurationInput,\n    f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n  ) => Effect.Effect<Logger<Message, void>, never, Scope.Scope | R>\n>(3, <Message, Output, R>(\n  self: Logger<Message, Output>,\n  window: Duration.DurationInput,\n  f: (messages: Array<NoInfer<Output>>) => Effect.Effect<void, never, R>\n): Effect.Effect<Logger<Message, void>, never, Scope.Scope | R> =>\n  core.flatMap(scope, (scope) => {\n    let buffer: Array<Output> = []\n    const flush = core.suspend(() => {\n      if (buffer.length === 0) {\n        return core.void\n      }\n      const arr = buffer\n      buffer = []\n      return f(arr)\n    })\n\n    return core.uninterruptibleMask((restore) =>\n      pipe(\n        internalEffect.sleep(window),\n        core.zipRight(flush),\n        internalEffect.forever,\n        restore,\n        forkDaemon,\n        core.flatMap((fiber) => core.scopeAddFinalizer(scope, core.interruptFiber(fiber))),\n        core.zipRight(addFinalizer(() => flush)),\n        core.as(\n          internalLogger.makeLogger((options) => {\n            buffer.push(self.log(options))\n          })\n        )\n      )\n    )\n  }))\n\nexport const annotateLogsScoped: {\n  (key: string, value: unknown): Effect.Effect<void, never, Scope.Scope>\n  (values: Record<string, unknown>): Effect.Effect<void, never, Scope.Scope>\n} = function() {\n  if (typeof arguments[0] === \"string\") {\n    return fiberRefLocallyScopedWith(\n      core.currentLogAnnotations,\n      HashMap.set(arguments[0], arguments[1])\n    )\n  }\n  const entries = Object.entries(arguments[0])\n  return fiberRefLocallyScopedWith(\n    core.currentLogAnnotations,\n    HashMap.mutate((annotations) => {\n      for (let i = 0; i < entries.length; i++) {\n        const [key, value] = entries[i]\n        HashMap.set(annotations, key, value)\n      }\n      return annotations\n    })\n  )\n}\n\n// circular with Effect\n\n/* @internal */\nexport const acquireRelease: {\n  <A, X, R2>(\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R2 | R | Scope.Scope>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (a: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, R2 | R | Scope.Scope>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  core.uninterruptible(\n    core.tap(acquire, (a) => addFinalizer((exit) => release(a, exit)))\n  ))\n\n/* @internal */\nexport const acquireReleaseInterruptible: {\n  <X, R2>(\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): <A, E, R>(acquire: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | R2 | R>\n  <A, E, R, X, R2>(\n    acquire: Effect.Effect<A, E, R>,\n    release: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n  ): Effect.Effect<A, E, Scope.Scope | R2 | R>\n} = dual((args) => core.isEffect(args[0]), (acquire, release) =>\n  ensuring(\n    acquire,\n    addFinalizer((exit) => release(exit))\n  ))\n\n/* @internal */\nexport const addFinalizer = <X, R>(\n  finalizer: (exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R>\n): Effect.Effect<void, never, R | Scope.Scope> =>\n  core.withFiberRuntime(\n    (runtime) => {\n      const acquireRefs = runtime.getFiberRefs()\n      const acquireFlags = runtime.currentRuntimeFlags\n      return core.flatMap(scope, (scope) =>\n        core.scopeAddFinalizerExit(scope, (exit) =>\n          core.withFiberRuntime((runtimeFinalizer) => {\n            const preRefs = runtimeFinalizer.getFiberRefs()\n            const preFlags = runtimeFinalizer.currentRuntimeFlags\n            const patchRefs = FiberRefsPatch.diff(preRefs, acquireRefs)\n            const patchFlags = _runtimeFlags.diff(preFlags, acquireFlags)\n            const inverseRefs = FiberRefsPatch.diff(acquireRefs, preRefs)\n            runtimeFinalizer.setFiberRefs(\n              FiberRefsPatch.patch(patchRefs, runtimeFinalizer.id(), acquireRefs)\n            )\n\n            return ensuring(\n              core.withRuntimeFlags(finalizer(exit) as Effect.Effect<X>, patchFlags),\n              core.sync(() => {\n                runtimeFinalizer.setFiberRefs(\n                  FiberRefsPatch.patch(inverseRefs, runtimeFinalizer.id(), runtimeFinalizer.getFiberRefs())\n                )\n              })\n            )\n          })))\n    }\n  )\n\n/* @internal */\nexport const daemonChildren = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> => {\n  const forkScope = core.fiberRefLocally(core.currentForkScopeOverride, Option.some(fiberScope.globalScope))\n  return forkScope(self)\n}\n\n/** @internal */\nconst _existsParFound = Symbol.for(\"effect/Effect/existsPar/found\")\n\n/* @internal */\nexport const exists: {\n  <A, E, R>(f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }): (elements: Iterable<A>) => Effect.Effect<boolean, E, R>\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }): Effect.Effect<boolean, E, R>\n} = dual(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () => core.suspend(() => existsLoop(elements[Symbol.iterator](), 0, f)),\n      () =>\n        core.matchEffect(\n          forEach(\n            elements,\n            (a, i) => core.if_(f(a, i), { onTrue: () => core.fail(_existsParFound), onFalse: () => core.void }),\n            options\n          ),\n          {\n            onFailure: (e) => e === _existsParFound ? core.succeed(true) : core.fail(e),\n            onSuccess: () => core.succeed(false)\n          }\n        )\n    )\n)\n\nconst existsLoop = <A, E, R>(\n  iterator: Iterator<A>,\n  index: number,\n  f: (a: A, i: number) => Effect.Effect<boolean, E, R>\n): Effect.Effect<boolean, E, R> => {\n  const next = iterator.next()\n  if (next.done) {\n    return core.succeed(false)\n  }\n  return pipe(core.flatMap(\n    f(next.value, index),\n    (b) => b ? core.succeed(b) : existsLoop(iterator, index + 1, f)\n  ))\n}\n\n/* @internal */\nexport const filter = dual<\n  <A, E, R>(\n    f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly negate?: boolean | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<A>, E, R>,\n  <A, E, R>(elements: Iterable<A>, f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => Effect.Effect<Array<A>, E, R>\n>(\n  (args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]),\n  <A, E, R>(elements: Iterable<A>, f: (a: NoInfer<A>, i: number) => Effect.Effect<boolean, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly negate?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => {\n    const predicate = options?.negate ? (a: A, i: number) => core.map(f(a, i), Boolean.not) : f\n    return concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        core.suspend(() =>\n          RA.fromIterable(elements).reduceRight(\n            (effect, a, i) =>\n              core.zipWith(\n                effect,\n                core.suspend(() => predicate(a, i)),\n                (list, b) => b ? [a, ...list] : list\n              ),\n            core.sync(() => new Array<A>()) as Effect.Effect<Array<A>, E, R>\n          )\n        ),\n      () =>\n        core.map(\n          forEach(\n            elements,\n            (a, i) => core.map(predicate(a, i), (b) => (b ? Option.some(a) : Option.none())),\n            options\n          ),\n          RA.getSomes\n        )\n    )\n  }\n)\n\n// === all\n\nconst allResolveInput = (\n  input: Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>\n): [Iterable<Effect.Effect<any, any, any>>, Option.Option<(as: ReadonlyArray<any>) => any>] => {\n  if (Array.isArray(input) || Predicate.isIterable(input)) {\n    return [input, Option.none()]\n  }\n  const keys = Object.keys(input)\n  const size = keys.length\n  return [\n    keys.map((k) => input[k]),\n    Option.some((values: ReadonlyArray<any>) => {\n      const res = {}\n      for (let i = 0; i < size; i++) {\n        ;(res as any)[keys[i]] = values[i]\n      }\n      return res\n    })\n  ]\n}\n\nconst allValidate = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<Either.Either<unknown, unknown>, never, unknown>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n  return core.flatMap(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching\n    }),\n    (eithers) => {\n      const none = Option.none()\n      const size = eithers.length\n      const errors: Array<unknown> = new Array(size)\n      const successes: Array<unknown> = new Array(size)\n      let errored = false\n      for (let i = 0; i < size; i++) {\n        const either = eithers[i] as Either.Either<unknown, unknown>\n        if (either._tag === \"Left\") {\n          errors[i] = Option.some(either.left)\n          errored = true\n        } else {\n          successes[i] = either.right\n          errors[i] = none\n        }\n      }\n      if (errored) {\n        return reconcile._tag === \"Some\" ?\n          core.fail(reconcile.value(errors)) :\n          core.fail(errors)\n      } else if (options?.discard) {\n        return core.void\n      }\n      return reconcile._tag === \"Some\" ?\n        core.succeed(reconcile.value(successes)) :\n        core.succeed(successes)\n    }\n  )\n}\n\nconst allEither = (\n  effects: Iterable<Effect.Effect<any, any, any>>,\n  reconcile: Option.Option<(as: ReadonlyArray<any>) => any>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) => {\n  const eitherEffects: Array<Effect.Effect<Either.Either<unknown, unknown>, never, unknown>> = []\n  for (const effect of effects) {\n    eitherEffects.push(core.either(effect))\n  }\n\n  if (options?.discard) {\n    return forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching,\n      discard: true\n    })\n  }\n\n  return core.map(\n    forEach(eitherEffects, identity, {\n      concurrency: options?.concurrency,\n      batching: options?.batching\n    }),\n    (eithers) =>\n      reconcile._tag === \"Some\" ?\n        reconcile.value(eithers) :\n        eithers\n  )\n}\n\n/* @internal */\nexport const all = <\n  const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>,\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n>(\n  arg: Arg,\n  options?: O\n): Effect.All.Return<Arg, O> => {\n  const [effects, reconcile] = allResolveInput(arg)\n\n  if (options?.mode === \"validate\") {\n    return allValidate(effects, reconcile, options) as any\n  } else if (options?.mode === \"either\") {\n    return allEither(effects, reconcile, options) as any\n  }\n\n  return options?.discard !== true && reconcile._tag === \"Some\"\n    ? core.map(\n      forEach(effects, identity, options as any),\n      reconcile.value\n    ) as any\n    : forEach(effects, identity, options as any) as any\n}\n\n/* @internal */\nexport const allWith = <\n  O extends {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly mode?: \"default\" | \"validate\" | \"either\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n>(options?: O) =>\n<const Arg extends Iterable<Effect.Effect<any, any, any>> | Record<string, Effect.Effect<any, any, any>>>(\n  arg: Arg\n): Effect.All.Return<Arg, O> => all(arg, options)\n\n/* @internal */\nexport const allSuccesses = <Eff extends Effect.Effect<any, any, any>>(\n  elements: Iterable<Eff>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n): Effect.Effect<Array<Effect.Effect.Success<Eff>>, never, Effect.Effect.Context<Eff>> =>\n  core.map(\n    all(RA.fromIterable(elements).map(core.exit), options),\n    RA.filterMap((exit) => core.exitIsSuccess(exit) ? Option.some(exit.effect_instruction_i0) : Option.none())\n  )\n\n/* @internal */\nexport const replicate = dual<\n  (n: number) => <A, E, R>(self: Effect.Effect<A, E, R>) => Array<Effect.Effect<A, E, R>>,\n  <A, E, R>(self: Effect.Effect<A, E, R>, n: number) => Array<Effect.Effect<A, E, R>>\n>(2, (self, n) => Array.from({ length: n }, () => self))\n\n/* @internal */\nexport const replicateEffect: {\n  (\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Array<A>, E, R>\n  (\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<void, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<Array<A>, E, R>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    n: number,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<void, E, R>\n} = dual(\n  (args) => core.isEffect(args[0]),\n  (self, n, options) => all(replicate(self, n), options)\n)\n\n/* @internal */\nexport const forEach: {\n  <B, E, R, S extends Iterable<any>>(\n    f: (a: RA.ReadonlyArray.Infer<S>, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): (\n    self: S\n  ) => Effect.Effect<RA.ReadonlyArray.With<S, B>, E, R>\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): (self: Iterable<A>) => Effect.Effect<void, E, R>\n  <A, B, E, R>(\n    self: RA.NonEmptyReadonlyArray<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect.Effect<RA.NonEmptyArray<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard?: false | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    } | undefined\n  ): Effect.Effect<Array<B>, E, R>\n  <A, B, E, R>(\n    self: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly discard: true\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<void, E, R>\n} = dual((args) => Predicate.isIterable(args[0]), <A, R, E, B>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) =>\n  core.withFiberRuntime<A | void, E, R>((r) => {\n    const isRequestBatchingEnabled = options?.batching === true ||\n      (options?.batching === \"inherit\" && r.getFiberRef(core.currentRequestBatching))\n\n    if (options?.discard) {\n      return concurrency.match(\n        options.concurrency,\n        () =>\n          finalizersMaskInternal(ExecutionStrategy.sequential, options?.concurrentFinalizers)((restore) =>\n            isRequestBatchingEnabled\n              ? forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), true, false, 1)\n              : core.forEachSequentialDiscard(self, (a, i) => restore(f(a, i)))\n          ),\n        () =>\n          finalizersMaskInternal(ExecutionStrategy.parallel, options?.concurrentFinalizers)((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false)\n          ),\n        (n) =>\n          finalizersMaskInternal(ExecutionStrategy.parallelN(n), options?.concurrentFinalizers)((restore) =>\n            forEachConcurrentDiscard(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled, false, n)\n          )\n      )\n    }\n\n    return concurrency.match(\n      options?.concurrency,\n      () =>\n        finalizersMaskInternal(ExecutionStrategy.sequential, options?.concurrentFinalizers)((restore) =>\n          isRequestBatchingEnabled\n            ? forEachParN(self, 1, (a, i) => restore(f(a, i)), true)\n            : core.forEachSequential(self, (a, i) => restore(f(a, i)))\n        ),\n      () =>\n        finalizersMaskInternal(ExecutionStrategy.parallel, options?.concurrentFinalizers)((restore) =>\n          forEachParUnbounded(self, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        ),\n      (n) =>\n        finalizersMaskInternal(ExecutionStrategy.parallelN(n), options?.concurrentFinalizers)((restore) =>\n          forEachParN(self, n, (a, i) => restore(f(a, i)), isRequestBatchingEnabled)\n        )\n    )\n  }))\n\n/* @internal */\nexport const forEachParUnbounded = <A, B, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.flatMap(f(a, i), (b) => core.sync(() => array[i] = b))\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false), core.succeed(array))\n  })\n\n/** @internal */\nexport const forEachConcurrentDiscard = <A, X, E, R>(\n  self: Iterable<A>,\n  f: (a: A, i: number) => Effect.Effect<X, E, R>,\n  batching: boolean,\n  processAll: boolean,\n  n?: number\n): Effect.Effect<void, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.transplant((graft) =>\n      core.withFiberRuntime((parent) => {\n        let todos = Array.from(self).reverse()\n        let target = todos.length\n        if (target === 0) {\n          return core.void\n        }\n        let counter = 0\n        let interrupted = false\n        const fibersCount = n ? Math.min(todos.length, n) : todos.length\n        const fibers = new Set<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const results = new Array()\n        const interruptAll = () =>\n          fibers.forEach((fiber) => {\n            fiber.currentScheduler.scheduleTask(() => {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }, 0)\n          })\n        const startOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const joinOrder = new Array<FiberRuntime<Exit.Exit<X, E> | Effect.Blocked<X, E>>>()\n        const residual = new Array<core.Blocked>()\n        const collectExits = () => {\n          const exits: Array<Exit.Exit<any, E>> = results\n            .filter(({ exit }) => exit._tag === \"Failure\")\n            .sort((a, b) => a.index < b.index ? -1 : a.index === b.index ? 0 : 1)\n            .map(({ exit }) => exit)\n          if (exits.length === 0) {\n            exits.push(core.exitVoid)\n          }\n          return exits\n        }\n        const runFiber = <A, E, R>(eff: Effect.Effect<A, E, R>, interruptImmediately = false) => {\n          const runnable = core.uninterruptible(graft(eff))\n          const fiber = unsafeForkUnstarted(\n            runnable,\n            parent,\n            parent.currentRuntimeFlags,\n            fiberScope.globalScope\n          )\n          parent.currentScheduler.scheduleTask(() => {\n            if (interruptImmediately) {\n              fiber.unsafeInterruptAsFork(parent.id())\n            }\n            fiber.resume(runnable)\n          }, 0)\n          return fiber\n        }\n        const onInterruptSignal = () => {\n          if (!processAll) {\n            target -= todos.length\n            todos = []\n          }\n          interrupted = true\n          interruptAll()\n        }\n        const stepOrExit = batching ? core.step : core.exit\n        const processingFiber = runFiber(\n          core.async<any, any, any>((resume) => {\n            const pushResult = <X, E>(res: Exit.Exit<X, E> | Effect.Blocked<X, E>, index: number) => {\n              if (res._op === \"Blocked\") {\n                residual.push(res as core.Blocked)\n              } else {\n                results.push({ index, exit: res })\n                if (res._op === \"Failure\" && !interrupted) {\n                  onInterruptSignal()\n                }\n              }\n            }\n            const next = () => {\n              if (todos.length > 0) {\n                const a = todos.pop()!\n                let index = counter++\n                const returnNextElement = () => {\n                  const a = todos.pop()!\n                  index = counter++\n                  return core.flatMap(core.yieldNow(), () =>\n                    core.flatMap(\n                      stepOrExit(restore(f(a, index))),\n                      onRes\n                    ))\n                }\n                const onRes = (\n                  res: Exit.Exit<X, E> | Effect.Blocked<X, E>\n                ): Effect.Effect<Exit.Exit<X, E> | Effect.Blocked<X, E>, never, R> => {\n                  if (todos.length > 0) {\n                    pushResult(res, index)\n                    if (todos.length > 0) {\n                      return returnNextElement()\n                    }\n                  }\n                  return core.succeed(res)\n                }\n                const todo = core.flatMap(\n                  stepOrExit(restore(f(a, index))),\n                  onRes\n                )\n                const fiber = runFiber(todo)\n                startOrder.push(fiber)\n                fibers.add(fiber)\n                if (interrupted) {\n                  fiber.currentScheduler.scheduleTask(() => {\n                    fiber.unsafeInterruptAsFork(parent.id())\n                  }, 0)\n                }\n                fiber.addObserver((wrapped) => {\n                  let exit: Exit.Exit<any, any> | core.Blocked\n                  if (wrapped._op === \"Failure\") {\n                    exit = wrapped\n                  } else {\n                    exit = wrapped.effect_instruction_i0 as any\n                  }\n                  joinOrder.push(fiber)\n                  fibers.delete(fiber)\n                  pushResult(exit, index)\n                  if (results.length === target) {\n                    resume(core.succeed(Option.getOrElse(\n                      core.exitCollectAll(collectExits(), { parallel: true }),\n                      () => core.exitVoid\n                    )))\n                  } else if (residual.length + results.length === target) {\n                    const requests = residual.map((blocked) => blocked.effect_instruction_i0).reduce(_RequestBlock.par)\n                    resume(core.succeed(core.blocked(\n                      requests,\n                      forEachConcurrentDiscard(\n                        [\n                          Option.getOrElse(\n                            core.exitCollectAll(collectExits(), { parallel: true }),\n                            () => core.exitVoid\n                          ),\n                          ...residual.map((blocked) => blocked.effect_instruction_i1)\n                        ],\n                        (i) => i,\n                        batching,\n                        true,\n                        n\n                      )\n                    )))\n                  } else {\n                    next()\n                  }\n                })\n              }\n            }\n            for (let i = 0; i < fibersCount; i++) {\n              next()\n            }\n          })\n        )\n        return core.asVoid(\n          core.onExit(\n            core.flatten(restore(internalFiber.join(processingFiber))),\n            core.exitMatch({\n              onFailure: () => {\n                onInterruptSignal()\n                const target = residual.length + 1\n                const concurrency = Math.min(typeof n === \"number\" ? n : residual.length, residual.length)\n                const toPop = Array.from(residual)\n                return core.async<any, any>((cb) => {\n                  const exits: Array<Exit.Exit<any, any>> = []\n                  let count = 0\n                  let index = 0\n                  const check = (index: number, hitNext: boolean) => (exit: Exit.Exit<any, any>) => {\n                    exits[index] = exit\n                    count++\n                    if (count === target) {\n                      cb(Option.getOrThrow(core.exitCollectAll(exits, { parallel: true })))\n                    }\n                    if (toPop.length > 0 && hitNext) {\n                      next()\n                    }\n                  }\n                  const next = () => {\n                    runFiber(toPop.pop()!, true).addObserver(check(index, true))\n                    index++\n                  }\n                  processingFiber.addObserver(check(index, false))\n                  index++\n                  for (let i = 0; i < concurrency; i++) {\n                    next()\n                  }\n                }) as any\n              },\n              onSuccess: () => core.forEachSequential(joinOrder, (f) => f.inheritAll)\n            })\n          )\n        )\n      })\n    )\n  )\n\n/* @internal */\nexport const forEachParN = <A, B, E, R>(\n  self: Iterable<A>,\n  n: number,\n  f: (a: A, i: number) => Effect.Effect<B, E, R>,\n  batching: boolean\n): Effect.Effect<Array<B>, E, R> =>\n  core.suspend(() => {\n    const as = RA.fromIterable(self)\n    const array = new Array<B>(as.length)\n    const fn = (a: A, i: number) => core.map(f(a, i), (b) => array[i] = b)\n    return core.zipRight(forEachConcurrentDiscard(as, fn, batching, false, n), core.succeed(array))\n  })\n\n/* @internal */\nexport const fork = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((state, status) => core.succeed(unsafeFork(self, state, status.runtimeFlags)))\n\n/* @internal */\nexport const forkDaemon = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  forkWithScopeOverride(self, fiberScope.globalScope)\n\n/* @internal */\nexport const forkWithErrorHandler = dual<\n  <E, X>(\n    handler: (e: E) => Effect.Effect<X>\n  ) => <A, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>,\n  <A, E, R, X>(\n    self: Effect.Effect<A, E, R>,\n    handler: (e: E) => Effect.Effect<X>\n  ) => Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R>\n>(2, (self, handler) =>\n  fork(core.onError(self, (cause) => {\n    const either = internalCause.failureOrCause(cause)\n    switch (either._tag) {\n      case \"Left\":\n        return handler(either.left)\n      case \"Right\":\n        return core.failCause(either.right)\n    }\n  })))\n\n/** @internal */\nexport const unsafeFork = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  childFiber.resume(effect)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeForkUnstarted = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope)\n  return childFiber\n}\n\n/** @internal */\nexport const unsafeMakeChildFiber = <A, E, R, E2, B>(\n  effect: Effect.Effect<A, E, R>,\n  parentFiber: FiberRuntime<B, E2>,\n  parentRuntimeFlags: RuntimeFlags.RuntimeFlags,\n  overrideScope: fiberScope.FiberScope | null = null\n): FiberRuntime<A, E> => {\n  const childId = FiberId.unsafeMake()\n  const parentFiberRefs = parentFiber.getFiberRefs()\n  const childFiberRefs = fiberRefs.forkAs(parentFiberRefs, childId)\n  const childFiber = new FiberRuntime<A, E>(childId, childFiberRefs, parentRuntimeFlags)\n  const childContext = fiberRefs.getOrDefault(\n    childFiberRefs,\n    core.currentContext as unknown as FiberRef.FiberRef<Context.Context<R>>\n  )\n  const supervisor = childFiber.currentSupervisor\n\n  supervisor.onStart(\n    childContext,\n    effect,\n    Option.some(parentFiber),\n    childFiber\n  )\n\n  childFiber.addObserver((exit) => supervisor.onEnd(exit, childFiber))\n\n  const parentScope = overrideScope !== null ? overrideScope : pipe(\n    parentFiber.getFiberRef(core.currentForkScopeOverride),\n    Option.getOrElse(() => parentFiber.scope())\n  )\n\n  parentScope.add(parentRuntimeFlags, childFiber)\n\n  return childFiber\n}\n\n/* @internal */\nconst forkWithScopeOverride = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  scopeOverride: fiberScope.FiberScope\n): Effect.Effect<Fiber.RuntimeFiber<A, E>, never, R> =>\n  core.withFiberRuntime((parentFiber, parentStatus) =>\n    core.succeed(unsafeFork(self, parentFiber, parentStatus.runtimeFlags, scopeOverride))\n  )\n\n/* @internal */\nexport const mergeAll = dual<\n  <Z, Eff extends Effect.Effect<any, any, any>>(\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z>(\n    elements: Iterable<Eff>,\n    zero: Z,\n    f: (z: Z, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<Z, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>>\n>(\n  (args) => Predicate.isFunction(args[2]),\n  <A, E, R, Z>(elements: Iterable<Effect.Effect<A, E, R>>, zero: Z, f: (z: Z, a: A, i: number) => Z, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) =>\n    concurrency.matchSimple(\n      options?.concurrency,\n      () =>\n        RA.fromIterable(elements).reduce(\n          (acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)),\n          core.succeed(zero) as Effect.Effect<Z, E, R>\n        ),\n      () =>\n        core.flatMap(Ref.make(zero), (acc) =>\n          core.flatMap(\n            forEach(\n              elements,\n              (effect, i) => core.flatMap(effect, (a) => Ref.update(acc, (b) => f(b, a, i))),\n              options\n            ),\n            () => Ref.get(acc)\n          ))\n    )\n)\n\n/* @internal */\nexport const partition = dual<\n  <A, B, E, R>(\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<A>) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A, i: number) => Effect.Effect<B, E, R>,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<[excluded: Array<E>, satisfying: Array<B>], never, R>\n>((args) => Predicate.isIterable(args[0]), (elements, f, options) =>\n  pipe(\n    forEach(elements, (a, i) => core.either(f(a, i)), options),\n    core.map((chunk) => core.partitionMap(chunk, identity))\n  ))\n\n/* @internal */\nexport const validateAll = dual<\n  {\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<Array<B>, Array<E>, R>\n    <A, B, E, R>(\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): (elements: Iterable<A>) => Effect.Effect<void, Array<E>, R>\n  },\n  {\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options?: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard?: false | undefined\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): Effect.Effect<Array<B>, Array<E>, R>\n    <A, B, E, R>(\n      elements: Iterable<A>,\n      f: (a: A, i: number) => Effect.Effect<B, E, R>,\n      options: {\n        readonly concurrency?: Concurrency | undefined\n        readonly batching?: boolean | \"inherit\" | undefined\n        readonly discard: true\n        readonly concurrentFinalizers?: boolean | undefined\n      }\n    ): Effect.Effect<void, Array<E>, R>\n  }\n>(\n  (args) => Predicate.isIterable(args[0]),\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly discard?: boolean | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }): Effect.Effect<any, Array<E>, R> =>\n    core.flatMap(\n      partition(elements, f, {\n        concurrency: options?.concurrency,\n        batching: options?.batching\n      }),\n      ([es, bs]) =>\n        es.length === 0\n          ? options?.discard ? core.void : core.succeed(bs)\n          : core.fail(es)\n    )\n)\n\n/* @internal */\nexport const raceAll: <Eff extends Effect.Effect<any, any, any>>(\n  all: Iterable<Eff>\n) => Effect.Effect<Effect.Effect.Success<Eff>, Effect.Effect.Error<Eff>, Effect.Effect.Context<Eff>> = <\n  A,\n  E,\n  R\n>(all: Iterable<Effect.Effect<A, E, R>>): Effect.Effect<A, E, R> => {\n  const list = Chunk.fromIterable(all)\n  if (!Chunk.isNonEmpty(list)) {\n    return core.dieSync(() => new core.IllegalArgumentException(`Received an empty collection of effects`))\n  }\n  const self = Chunk.headNonEmpty(list)\n  const effects = Chunk.tailNonEmpty(list)\n  const inheritAll = (res: readonly [A, Fiber.Fiber<A, E>]) =>\n    pipe(\n      internalFiber.inheritAll(res[1]),\n      core.as(res[0])\n    )\n  return pipe(\n    core.deferredMake<readonly [A, Fiber.Fiber<A, E>], E>(),\n    core.flatMap((done) =>\n      pipe(\n        Ref.make(effects.length),\n        core.flatMap((fails) =>\n          core.uninterruptibleMask<A, E, R>((restore) =>\n            pipe(\n              fork(core.interruptible(self)),\n              core.flatMap((head) =>\n                pipe(\n                  effects,\n                  core.forEachSequential((effect) => fork(core.interruptible(effect))),\n                  core.map((fibers) => Chunk.unsafeFromArray(fibers)),\n                  core.map((tail) => pipe(tail, Chunk.prepend(head)) as Chunk.Chunk<Fiber.RuntimeFiber<A, E>>),\n                  core.tap((fibers) =>\n                    pipe(\n                      fibers,\n                      RA.reduce(core.void, (effect, fiber) =>\n                        pipe(\n                          effect,\n                          core.zipRight(\n                            pipe(\n                              internalFiber._await(fiber),\n                              core.flatMap(raceAllArbiter(fibers, fiber, done, fails)),\n                              fork,\n                              core.asVoid\n                            )\n                          )\n                        ))\n                    )\n                  ),\n                  core.flatMap((fibers) =>\n                    pipe(\n                      restore(pipe(Deferred.await(done), core.flatMap(inheritAll))),\n                      core.onInterrupt(() =>\n                        pipe(\n                          fibers,\n                          RA.reduce(\n                            core.void,\n                            (effect, fiber) => pipe(effect, core.zipLeft(core.interruptFiber(fiber)))\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n}\n\nconst raceAllArbiter = <E, E1, A, A1>(\n  fibers: Iterable<Fiber.Fiber<A | A1, E | E1>>,\n  winner: Fiber.Fiber<A | A1, E | E1>,\n  deferred: Deferred.Deferred<readonly [A | A1, Fiber.Fiber<A | A1, E | E1>], E | E1>,\n  fails: Ref.Ref<number>\n) =>\n(exit: Exit.Exit<A | A1, E | E1>): Effect.Effect<void> =>\n  core.exitMatchEffect(exit, {\n    onFailure: (cause) =>\n      pipe(\n        Ref.modify(fails, (fails) =>\n          [\n            fails === 0 ?\n              pipe(core.deferredFailCause(deferred, cause), core.asVoid) :\n              core.void,\n            fails - 1\n          ] as const),\n        core.flatten\n      ),\n    onSuccess: (value): Effect.Effect<void> =>\n      pipe(\n        core.deferredSucceed(deferred, [value, winner] as const),\n        core.flatMap((set) =>\n          set ?\n            pipe(\n              Chunk.fromIterable(fibers),\n              RA.reduce(\n                core.void,\n                (effect, fiber) =>\n                  fiber === winner ?\n                    effect :\n                    pipe(effect, core.zipLeft(core.interruptFiber(fiber)))\n              )\n            ) :\n            core.void\n        )\n      )\n  })\n\n/* @internal */\nexport const reduceEffect = dual<\n  <Z, E, R, Eff extends Effect.Effect<any, any, any>>(\n    zero: Effect.Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => (elements: Iterable<Eff>) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>,\n  <Eff extends Effect.Effect<any, any, any>, Z, E, R>(\n    elements: Iterable<Eff>,\n    zero: Effect.Effect<Z, E, R>,\n    f: (acc: NoInfer<Z>, a: Effect.Effect.Success<Eff>, i: number) => Z,\n    options?: {\n      readonly concurrency?: Concurrency | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<Z, E | Effect.Effect.Error<Eff>, R | Effect.Effect.Context<Eff>>\n>((args) => Predicate.isIterable(args[0]) && !core.isEffect(args[0]), <A, E, R, Z>(\n  elements: Iterable<Effect.Effect<A, E, R>>,\n  zero: Effect.Effect<Z, E, R>,\n  f: (acc: NoInfer<Z>, a: NoInfer<A>, i: number) => Z,\n  options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n) =>\n  concurrency.matchSimple(\n    options?.concurrency,\n    () => RA.fromIterable(elements).reduce((acc, a, i) => core.zipWith(acc, a, (acc, a) => f(acc, a, i)), zero),\n    () =>\n      core.suspend(() =>\n        pipe(\n          mergeAll(\n            [zero, ...elements],\n            Option.none<Z>(),\n            (acc, elem, i) => {\n              switch (acc._tag) {\n                case \"None\": {\n                  return Option.some(elem as Z)\n                }\n                case \"Some\": {\n                  return Option.some(f(acc.value, elem as A, i))\n                }\n              }\n            },\n            options\n          ),\n          core.map((option) => {\n            switch (option._tag) {\n              case \"None\": {\n                throw new Error(\n                  \"BUG: Effect.reduceEffect - please report an issue at https://github.com/Effect-TS/effect/issues\"\n                )\n              }\n              case \"Some\": {\n                return option.value\n              }\n            }\n          })\n        )\n      )\n  ))\n\n/* @internal */\nexport const parallelFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Parallel\":\n            return self\n          case \"Sequential\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.parallel),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const parallelNFinalizers =\n  (parallelism: number) => <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n    core.contextWithEffect((context) =>\n      Option.match(Context.getOption(context, scopeTag), {\n        onNone: () => self,\n        onSome: (scope) => {\n          if (scope.strategy._tag === \"ParallelN\" && scope.strategy.parallelism === parallelism) {\n            return self\n          }\n          return core.flatMap(\n            core.scopeFork(scope, ExecutionStrategy.parallelN(parallelism)),\n            (inner) => scopeExtend(self, inner)\n          )\n        }\n      })\n    )\n\n/* @internal */\nexport const finalizersMask = (strategy: ExecutionStrategy.ExecutionStrategy) =>\n<A, E, R>(\n  self: (\n    restore: <A1, E1, R1>(self: Effect.Effect<A1, E1, R1>) => Effect.Effect<A1, E1, R1>\n  ) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => finalizersMaskInternal(strategy, true)(self)\n\n/* @internal */\nexport const finalizersMaskInternal =\n  (strategy: ExecutionStrategy.ExecutionStrategy, concurrentFinalizers?: boolean | undefined) =>\n  <A, E, R>(\n    self: (\n      restore: <A1, E1, R1>(self: Effect.Effect<A1, E1, R1>) => Effect.Effect<A1, E1, R1>\n    ) => Effect.Effect<A, E, R>\n  ): Effect.Effect<A, E, R> =>\n    core.contextWithEffect((context) =>\n      Option.match(Context.getOption(context, scopeTag), {\n        onNone: () => self(identity),\n        onSome: (scope) => {\n          if (concurrentFinalizers === true) {\n            const patch = strategy._tag === \"Parallel\"\n              ? parallelFinalizers\n              : strategy._tag === \"Sequential\"\n              ? sequentialFinalizers\n              : parallelNFinalizers(strategy.parallelism)\n            switch (scope.strategy._tag) {\n              case \"Parallel\":\n                return patch(self(parallelFinalizers))\n              case \"Sequential\":\n                return patch(self(sequentialFinalizers))\n              case \"ParallelN\":\n                return patch(self(parallelNFinalizers(scope.strategy.parallelism)))\n            }\n          } else {\n            return self(identity)\n          }\n        }\n      })\n    )\n\n/* @internal */\nexport const scopeWith = <A, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R | Scope.Scope> => core.flatMap(scopeTag, f)\n\n/** @internal */\nexport const scopedWith = <A, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<A, E, R>\n): Effect.Effect<A, E, R> => core.flatMap(scopeMake(), (scope) => core.onExit(f(scope), (exit) => scope.close(exit)))\n\n/* @internal */\nexport const scopedEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Effect.Effect<A, E, Exclude<R, Scope.Scope>> =>\n  core.flatMap(scopeMake(), (scope) => scopeUse(effect, scope))\n\n/* @internal */\nexport const sequentialFinalizers = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.contextWithEffect((context) =>\n    Option.match(Context.getOption(context, scopeTag), {\n      onNone: () => self,\n      onSome: (scope) => {\n        switch (scope.strategy._tag) {\n          case \"Sequential\":\n            return self\n          case \"Parallel\":\n          case \"ParallelN\":\n            return core.flatMap(\n              core.scopeFork(scope, ExecutionStrategy.sequential),\n              (inner) => scopeExtend(self, inner)\n            )\n        }\n      }\n    })\n  )\n\n/* @internal */\nexport const tagMetricsScoped = (key: string, value: string): Effect.Effect<void, never, Scope.Scope> =>\n  labelMetricsScoped([metricLabel.make(key, value)])\n\n/* @internal */\nexport const labelMetricsScoped = (\n  labels: Iterable<MetricLabel.MetricLabel>\n): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(core.currentMetricLabels, (old) => RA.union(old, labels))\n\n/* @internal */\nexport const using = dual<\n  <A, A2, E2, R2>(\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    use: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A2, E | E2, Exclude<R, Scope.Scope> | R2>\n>(2, (self, use) => scopedWith((scope) => core.flatMap(scopeExtend(self, scope), use)))\n\n/** @internal */\nexport const validate = dual<\n  <B, E1, R1>(\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<[A, B], E | E1, R | R1>,\n  <A, E, R, B, E1, R1>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<[A, B], E | E1, R | R1>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => validateWith(self, that, (a, b) => [a, b], options)\n)\n\n/** @internal */\nexport const validateWith = dual<\n  <B, E1, R1, A, C>(\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<C, E | E1, R | R1>,\n  <A, E, R, B, E1, R1, C>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<B, E1, R1>,\n    f: (a: A, b: B) => C,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<C, E | E1, R | R1>\n>((args) => core.isEffect(args[1]), (self, that, f, options) =>\n  core.flatten(zipWithOptions(\n    core.exit(self),\n    core.exit(that),\n    (ea, eb) =>\n      core.exitZipWith(ea, eb, {\n        onSuccess: f,\n        onFailure: (ca, cb) => options?.concurrent ? internalCause.parallel(ca, cb) : internalCause.sequential(ca, cb)\n      }),\n    options\n  )))\n\n/* @internal */\nexport const validateAllPar = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<Array<B>, Array<E>, R>,\n  <A, B, E, R>(\n    elements: Iterable<A>,\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => Effect.Effect<Array<B>, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, bs]) =>\n      es.length === 0\n        ? core.succeed(bs)\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateAllParDiscard = dual<\n  <A, B, E, R>(\n    f: (a: A) => Effect.Effect<B, E, R>\n  ) => (elements: Iterable<A>) => Effect.Effect<void, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A) => Effect.Effect<B, E, R>) => Effect.Effect<void, Array<E>, R>\n>(2, (elements, f) =>\n  core.flatMap(\n    partition(elements, f),\n    ([es, _]) =>\n      es.length === 0\n        ? core.void\n        : core.fail(es)\n  ))\n\n/* @internal */\nexport const validateFirst = dual<\n  <A, B, E, R>(f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => (elements: Iterable<A>) => Effect.Effect<B, Array<E>, R>,\n  <A, B, E, R>(elements: Iterable<A>, f: (a: A, i: number) => Effect.Effect<B, E, R>, options?: {\n    readonly concurrency?: Concurrency | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }) => Effect.Effect<B, Array<E>, R>\n>(\n  (args) => Predicate.isIterable(args[0]),\n  (elements, f, options) => core.flip(forEach(elements, (a, i) => core.flip(f(a, i)), options))\n)\n\n/* @internal */\nexport const withClockScoped = <A extends Clock.Clock>(value: A) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(clock.clockTag, value))\n\n/* @internal */\nexport const withRandomScoped = <A extends Random.Random>(value: A) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(randomTag, value))\n\n/* @internal */\nexport const withConfigProviderScoped = (value: ConfigProvider) =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(configProviderTag, value))\n\n/* @internal */\nexport const withEarlyRelease = <A, E, R>(\n  self: Effect.Effect<A, E, R>\n): Effect.Effect<[Effect.Effect<void>, A], E, R | Scope.Scope> =>\n  scopeWith((parent) =>\n    core.flatMap(core.scopeFork(parent, executionStrategy.sequential), (child) =>\n      pipe(\n        self,\n        scopeExtend(child),\n        core.map((value) => [\n          core.fiberIdWith((fiberId) => core.scopeClose(child, core.exitInterrupt(fiberId))),\n          value\n        ])\n      ))\n  )\n\n/** @internal */\nexport const zipOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<[A, A2], E | E2, R | R2>\n>((args) => core.isEffect(args[1]), (\n  self,\n  that,\n  options\n) => zipWithOptions(self, that, (a, b) => [a, b], options))\n\n/** @internal */\nexport const zipLeftOptions = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ) => Effect.Effect<A, E | E2, R | R2>\n>(\n  (args) => core.isEffect(args[1]),\n  (self, that, options) => {\n    if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n      return core.zipLeft(self, that)\n    }\n    return zipWithOptions(self, that, (a, _) => a, options)\n  }\n)\n\n/** @internal */\nexport const zipRightOptions: {\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<A2, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n): Effect.Effect<A2, E2 | E, R2 | R> => {\n  if (options?.concurrent !== true && (options?.batching === undefined || options.batching === false)) {\n    return core.zipRight(self, that)\n  }\n  return zipWithOptions(self, that, (_, b) => b, options)\n})\n\n/** @internal */\nexport const zipWithOptions: {\n  <A2, E2, R2, A, B>(\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): <E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<B, E2 | E, R2 | R>\n  <A, E, R, A2, E2, R2, B>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>,\n    f: (a: A, b: A2) => B,\n    options?: {\n      readonly concurrent?: boolean | undefined\n      readonly batching?: boolean | \"inherit\" | undefined\n      readonly concurrentFinalizers?: boolean | undefined\n    }\n  ): Effect.Effect<B, E2 | E, R2 | R>\n} = dual((args) => core.isEffect(args[1]), <A, E, R, A2, E2, R2, B>(\n  self: Effect.Effect<A, E, R>,\n  that: Effect.Effect<A2, E2, R2>,\n  f: (a: A, b: A2) => B,\n  options?: {\n    readonly concurrent?: boolean | undefined\n    readonly batching?: boolean | \"inherit\" | undefined\n    readonly concurrentFinalizers?: boolean | undefined\n  }\n): Effect.Effect<B, E2 | E, R2 | R> =>\n  core.map(\n    all([self, that], {\n      concurrency: options?.concurrent ? 2 : 1,\n      batching: options?.batching,\n      concurrentFinalizers: options?.concurrentFinalizers\n    }),\n    ([a, a2]) => f(a, a2)\n  ))\n\n/* @internal */\nexport const withRuntimeFlagsScoped = (\n  update: RuntimeFlagsPatch.RuntimeFlagsPatch\n): Effect.Effect<void, never, Scope.Scope> => {\n  if (update === RuntimeFlagsPatch.empty) {\n    return core.void\n  }\n  return pipe(\n    core.runtimeFlags,\n    core.flatMap((runtimeFlags) => {\n      const updatedRuntimeFlags = _runtimeFlags.patch(runtimeFlags, update)\n      const revertRuntimeFlags = _runtimeFlags.diff(updatedRuntimeFlags, runtimeFlags)\n      return pipe(\n        core.updateRuntimeFlags(update),\n        core.zipRight(addFinalizer(() => core.updateRuntimeFlags(revertRuntimeFlags))),\n        core.asVoid\n      )\n    }),\n    core.uninterruptible\n  )\n}\n\n// circular with Scope\n\n/** @internal */\nexport const scopeTag = Context.GenericTag<Scope.Scope>(\"effect/Scope\")\n\n/* @internal */\nexport const scope: Effect.Effect<Scope.Scope, never, Scope.Scope> = scopeTag\n\ninterface ScopeImpl extends Scope.CloseableScope {\n  state: {\n    readonly _tag: \"Open\"\n    readonly finalizers: Set<Scope.Scope.Finalizer>\n  } | {\n    readonly _tag: \"Closed\"\n    readonly exit: Exit.Exit<unknown, unknown>\n  }\n}\n\nconst scopeUnsafeAddFinalizer = (scope: ScopeImpl, fin: Scope.Scope.Finalizer): void => {\n  if (scope.state._tag === \"Open\") {\n    scope.state.finalizers.add(fin)\n  }\n}\n\nconst ScopeImplProto: Omit<ScopeImpl, \"strategy\" | \"state\"> = {\n  [core.ScopeTypeId]: core.ScopeTypeId,\n  [core.CloseableScopeTypeId]: core.CloseableScopeTypeId,\n  pipe() {\n    return pipeArguments(this, arguments)\n  },\n  fork(this: ScopeImpl, strategy) {\n    return core.sync(() => {\n      const newScope = scopeUnsafeMake(strategy)\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state\n        return newScope\n      }\n      const fin = (exit: Exit.Exit<unknown, unknown>) => newScope.close(exit)\n      this.state.finalizers.add(fin)\n      scopeUnsafeAddFinalizer(newScope, (_) =>\n        core.sync(() => {\n          if (this.state._tag === \"Open\") {\n            this.state.finalizers.delete(fin)\n          }\n        }))\n      return newScope\n    })\n  },\n  close(this: ScopeImpl, exit) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return core.void\n      }\n      const finalizers = Array.from(this.state.finalizers.values()).reverse()\n      this.state = { _tag: \"Closed\", exit }\n      if (finalizers.length === 0) {\n        return core.void\n      }\n      return executionStrategy.isSequential(this.strategy) ?\n        pipe(\n          core.forEachSequential(finalizers, (fin) => core.exit(fin(exit))),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        executionStrategy.isParallel(this.strategy) ?\n        pipe(\n          forEachParUnbounded(finalizers, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        ) :\n        pipe(\n          forEachParN(finalizers, this.strategy.parallelism, (fin) => core.exit(fin(exit)), false),\n          core.flatMap((results) =>\n            pipe(\n              core.exitCollectAll(results, { parallel: true }),\n              Option.map(core.exitAsVoid),\n              Option.getOrElse(() => core.exitVoid)\n            )\n          )\n        )\n    })\n  },\n  addFinalizer(this: ScopeImpl, fin) {\n    return core.suspend(() => {\n      if (this.state._tag === \"Closed\") {\n        return fin(this.state.exit)\n      }\n      this.state.finalizers.add(fin)\n      return core.void\n    })\n  }\n}\n\nconst scopeUnsafeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): ScopeImpl => {\n  const scope = Object.create(ScopeImplProto)\n  scope.strategy = strategy\n  scope.state = { _tag: \"Open\", finalizers: new Set() }\n  return scope\n}\n\n/* @internal */\nexport const scopeMake = (\n  strategy: ExecutionStrategy.ExecutionStrategy = executionStrategy.sequential\n): Effect.Effect<Scope.Scope.Closeable> => core.sync(() => scopeUnsafeMake(strategy))\n\n/* @internal */\nexport const scopeExtend = dual<\n  (scope: Scope.Scope) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(effect: Effect.Effect<A, E, R>, scope: Scope.Scope) =>\n    core.mapInputContext<A, E, R, Exclude<R, Scope.Scope>>(\n      effect,\n      // @ts-expect-error\n      Context.merge(Context.make(scopeTag, scope))\n    )\n)\n\n/* @internal */\nexport const scopeUse = dual<\n  (\n    scope: Scope.Scope.Closeable\n  ) => <A, E, R>(effect: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    effect: Effect.Effect<A, E, R>,\n    scope: Scope.Scope.Closeable\n  ) => Effect.Effect<A, E, Exclude<R, Scope.Scope>>\n>(2, (effect, scope) =>\n  pipe(\n    effect,\n    scopeExtend(scope),\n    core.onExit((exit) => scope.close(exit))\n  ))\n\n// circular with Supervisor\n\n/** @internal */\nexport const fiberRefUnsafeMakeSupervisor = (\n  initial: Supervisor.Supervisor<any>\n): FiberRef.FiberRef<Supervisor.Supervisor<any>> =>\n  core.fiberRefUnsafeMakePatch(initial, {\n    differ: SupervisorPatch.differ,\n    fork: SupervisorPatch.empty\n  })\n\n// circular with FiberRef\n\n/* @internal */\nexport const fiberRefLocallyScoped = dual<\n  <A>(value: A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, value: A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, value) =>\n  core.asVoid(\n    acquireRelease(\n      core.flatMap(\n        core.fiberRefGet(self),\n        (oldValue) => core.as(core.fiberRefSet(self, value), oldValue)\n      ),\n      (oldValue) => core.fiberRefSet(self, oldValue)\n    )\n  ))\n\n/* @internal */\nexport const fiberRefLocallyScopedWith = dual<\n  <A>(f: (a: A) => A) => (self: FiberRef.FiberRef<A>) => Effect.Effect<void, never, Scope.Scope>,\n  <A>(self: FiberRef.FiberRef<A>, f: (a: A) => A) => Effect.Effect<void, never, Scope.Scope>\n>(2, (self, f) => core.fiberRefGetWith(self, (a) => fiberRefLocallyScoped(self, f(a))))\n\n/* @internal */\nexport const fiberRefMake = <A>(\n  initial: A,\n  options?: {\n    readonly fork?: ((a: A) => A) | undefined\n    readonly join?: ((left: A, right: A) => A) | undefined\n  }\n): Effect.Effect<FiberRef.FiberRef<A>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMake(initial, options))\n\n/* @internal */\nexport const fiberRefMakeWith = <Value>(\n  ref: LazyArg<FiberRef.FiberRef<Value>>\n): Effect.Effect<FiberRef.FiberRef<Value>, never, Scope.Scope> =>\n  acquireRelease(\n    core.tap(core.sync(ref), (ref) => core.fiberRefUpdate(ref, identity)),\n    (fiberRef) => core.fiberRefDelete(fiberRef)\n  )\n\n/* @internal */\nexport const fiberRefMakeContext = <A>(\n  initial: Context.Context<A>\n): Effect.Effect<FiberRef.FiberRef<Context.Context<A>>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeContext(initial))\n\n/* @internal */\nexport const fiberRefMakeRuntimeFlags = (\n  initial: RuntimeFlags.RuntimeFlags\n): Effect.Effect<FiberRef.FiberRef<RuntimeFlags.RuntimeFlags>, never, Scope.Scope> =>\n  fiberRefMakeWith(() => core.fiberRefUnsafeMakeRuntimeFlags(initial))\n\n/** @internal */\nexport const currentRuntimeFlags: FiberRef.FiberRef<RuntimeFlags.RuntimeFlags> = core.fiberRefUnsafeMakeRuntimeFlags(\n  _runtimeFlags.none\n)\n\n/** @internal */\nexport const currentSupervisor: FiberRef.FiberRef<Supervisor.Supervisor<any>> = fiberRefUnsafeMakeSupervisor(\n  supervisor.none\n)\n\n// circular with Fiber\n\n/* @internal */\nexport const fiberAwaitAll = <const T extends Iterable<Fiber.Fiber<any, any>>>(\n  fibers: T\n): Effect.Effect<\n  [T] extends [ReadonlyArray<infer U>]\n    ? number extends T[\"length\"] ? Array<U extends Fiber.Fiber<infer A, infer E> ? Exit.Exit<A, E> : never>\n    : { -readonly [K in keyof T]: T[K] extends Fiber.Fiber<infer A, infer E> ? Exit.Exit<A, E> : never }\n    : Array<T extends Iterable<infer U> ? U extends Fiber.Fiber<infer A, infer E> ? Exit.Exit<A, E> : never : never>\n> => forEach(fibers, internalFiber._await) as any\n\n/** @internal */\nexport const fiberAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Fiber.Fiber<Array<A>, E> => {\n  const _fiberAll = {\n    ...Effectable.CommitPrototype,\n    commit() {\n      return internalFiber.join(this)\n    },\n    [internalFiber.FiberTypeId]: internalFiber.fiberVariance,\n    id: () =>\n      RA.fromIterable(fibers).reduce((id, fiber) => FiberId.combine(id, fiber.id()), FiberId.none as FiberId.FiberId),\n    await: core.exit(forEachParUnbounded(fibers, (fiber) => core.flatten(fiber.await), false)),\n    children: core.map(forEachParUnbounded(fibers, (fiber) => fiber.children, false), RA.flatten),\n    inheritAll: core.forEachSequentialDiscard(fibers, (fiber) => fiber.inheritAll),\n    poll: core.map(\n      core.forEachSequential(fibers, (fiber) => fiber.poll),\n      RA.reduceRight(\n        Option.some<Exit.Exit<Array<A>, E>>(core.exitSucceed(new Array())),\n        (optionB, optionA) => {\n          switch (optionA._tag) {\n            case \"None\": {\n              return Option.none()\n            }\n            case \"Some\": {\n              switch (optionB._tag) {\n                case \"None\": {\n                  return Option.none()\n                }\n                case \"Some\": {\n                  return Option.some(\n                    core.exitZipWith(optionA.value, optionB.value, {\n                      onSuccess: (a, chunk) => [a, ...chunk],\n                      onFailure: internalCause.parallel\n                    })\n                  )\n                }\n              }\n            }\n          }\n        }\n      )\n    ),\n    interruptAsFork: (fiberId: FiberId.FiberId) =>\n      core.forEachSequentialDiscard(fibers, (fiber) => fiber.interruptAsFork(fiberId))\n  }\n  return _fiberAll\n}\n\n/* @internal */\nexport const fiberInterruptFork = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<void> =>\n  core.asVoid(forkDaemon(core.interruptFiber(self)))\n\n/* @internal */\nexport const fiberJoinAll = <A, E>(fibers: Iterable<Fiber.Fiber<A, E>>): Effect.Effect<Array<A>, E> =>\n  internalFiber.join(fiberAll(fibers))\n\n/* @internal */\nexport const fiberScoped = <A, E>(self: Fiber.Fiber<A, E>): Effect.Effect<Fiber.Fiber<A, E>, never, Scope.Scope> =>\n  acquireRelease(core.succeed(self), core.interruptFiber)\n\n//\n// circular race\n//\n\n/** @internal */\nexport const raceWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfDone: (exit: Exit.Exit<A, E>, fiber: Fiber.Fiber<A1, E1>) => Effect.Effect<A2, E2, R2>\n      readonly onOtherDone: (exit: Exit.Exit<A1, E1>, fiber: Fiber.Fiber<A, E>) => Effect.Effect<A3, E3, R3>\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, (self, other, options) =>\n  raceFibersWith(self, other, {\n    onSelfWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onSelfDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onSelfDone(exit, loser)\n          }\n        }\n      }),\n    onOtherWin: (winner, loser) =>\n      core.flatMap(winner.await, (exit) => {\n        switch (exit._tag) {\n          case OpCodes.OP_SUCCESS: {\n            return core.flatMap(\n              winner.inheritAll,\n              () => options.onOtherDone(exit, loser)\n            )\n          }\n          case OpCodes.OP_FAILURE: {\n            return options.onOtherDone(exit, loser)\n          }\n        }\n      })\n  }))\n\n/** @internal */\nexport const disconnect = <A, E, R>(self: Effect.Effect<A, E, R>): Effect.Effect<A, E, R> =>\n  core.uninterruptibleMask((restore) =>\n    core.fiberIdWith((fiberId) =>\n      core.flatMap(forkDaemon(restore(self)), (fiber) =>\n        pipe(\n          restore(internalFiber.join(fiber)),\n          core.onInterrupt(() => pipe(fiber, internalFiber.interruptAsFork(fiberId)))\n        ))\n    )\n  )\n\n/** @internal */\nexport const race = dual<\n  <A2, E2, R2>(\n    that: Effect.Effect<A2, E2, R2>\n  ) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    that: Effect.Effect<A2, E2, R2>\n  ) => Effect.Effect<A | A2, E | E2, R | R2>\n>(\n  2,\n  (self, that) =>\n    core.fiberIdWith((parentFiberId) =>\n      raceWith(self, that, {\n        onSelfDone: (exit, right) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(right),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause, cause2))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                right,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          }),\n        onOtherDone: (exit, left) =>\n          core.exitMatchEffect(exit, {\n            onFailure: (cause) =>\n              pipe(\n                internalFiber.join(left),\n                internalEffect.mapErrorCause((cause2) => internalCause.parallel(cause2, cause))\n              ),\n            onSuccess: (value) =>\n              pipe(\n                left,\n                core.interruptAsFiber(parentFiberId),\n                core.as(value)\n              )\n          })\n      })\n    )\n)\n\n/** @internal */\nexport const raceFibersWith = dual<\n  <A1, E1, R1, E, A, A2, E2, R2, A3, E3, R3>(\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => <R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>,\n  <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n    self: Effect.Effect<A, E, R>,\n    other: Effect.Effect<A1, E1, R1>,\n    options: {\n      readonly onSelfWin: (\n        winner: Fiber.RuntimeFiber<A, E>,\n        loser: Fiber.RuntimeFiber<A1, E1>\n      ) => Effect.Effect<A2, E2, R2>\n      readonly onOtherWin: (\n        winner: Fiber.RuntimeFiber<A1, E1>,\n        loser: Fiber.RuntimeFiber<A, E>\n      ) => Effect.Effect<A3, E3, R3>\n      readonly selfScope?: fiberScope.FiberScope | undefined\n      readonly otherScope?: fiberScope.FiberScope | undefined\n    }\n  ) => Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>\n>(3, <A, E, R, A1, E1, R1, A2, E2, R2, A3, E3, R3>(\n  self: Effect.Effect<A, E, R>,\n  other: Effect.Effect<A1, E1, R1>,\n  options: {\n    readonly onSelfWin: (\n      winner: Fiber.RuntimeFiber<A, E>,\n      loser: Fiber.RuntimeFiber<A1, E1>\n    ) => Effect.Effect<A2, E2, R2>\n    readonly onOtherWin: (\n      winner: Fiber.RuntimeFiber<A1, E1>,\n      loser: Fiber.RuntimeFiber<A, E>\n    ) => Effect.Effect<A3, E3, R3>\n    readonly selfScope?: fiberScope.FiberScope | undefined\n    readonly otherScope?: fiberScope.FiberScope | undefined\n  }\n) =>\n  core.withFiberRuntime((parentFiber, parentStatus) => {\n    const parentRuntimeFlags = parentStatus.runtimeFlags\n    const raceIndicator = MRef.make(true)\n    const leftFiber: FiberRuntime<A, E> = unsafeMakeChildFiber(\n      self,\n      parentFiber,\n      parentRuntimeFlags,\n      options.selfScope\n    )\n    const rightFiber: FiberRuntime<A1, E1> = unsafeMakeChildFiber(\n      other,\n      parentFiber,\n      parentRuntimeFlags,\n      options.otherScope\n    )\n    return core.async((cb) => {\n      leftFiber.addObserver(() => completeRace(leftFiber, rightFiber, options.onSelfWin, raceIndicator, cb))\n      rightFiber.addObserver(() => completeRace(rightFiber, leftFiber, options.onOtherWin, raceIndicator, cb))\n      leftFiber.startFork(self)\n      rightFiber.startFork(other)\n    }, FiberId.combine(leftFiber.id(), rightFiber.id()))\n  }))\n\nconst completeRace = <A2, A3, E2, E3, R, R1, R2, R3>(\n  winner: Fiber.RuntimeFiber<any, any>,\n  loser: Fiber.RuntimeFiber<any, any>,\n  cont: (winner: Fiber.RuntimeFiber<any, any>, loser: Fiber.RuntimeFiber<any, any>) => Effect.Effect<any, any, any>,\n  ab: MRef.MutableRef<boolean>,\n  cb: (_: Effect.Effect<A2 | A3, E2 | E3, R | R1 | R2 | R3>) => void\n): void => {\n  if (MRef.compareAndSet(true, false)(ab)) {\n    cb(cont(winner, loser))\n  }\n}\n\n/** @internal */\nexport const ensuring: {\n  <X, R1>(\n    finalizer: Effect.Effect<X, never, R1>\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, R1 | R>\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R>\n} = dual(\n  2,\n  <A, E, R, X, R1>(self: Effect.Effect<A, E, R>, finalizer: Effect.Effect<X, never, R1>): Effect.Effect<A, E, R1 | R> =>\n    core.uninterruptibleMask((restore) =>\n      core.matchCauseEffect(restore(self), {\n        onFailure: (cause1) =>\n          core.matchCauseEffect(finalizer, {\n            onFailure: (cause2) => core.failCause(internalCause.sequential(cause1, cause2)),\n            onSuccess: () => core.failCause(cause1)\n          }),\n        onSuccess: (a) => core.as(finalizer, a)\n      })\n    )\n)\n\n/** @internal */\nexport const invokeWithInterrupt: <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) => Effect.Effect<void, E, R> = <A, E, R>(\n  self: Effect.Effect<A, E, R>,\n  entries: ReadonlyArray<Entry<unknown>>,\n  onInterrupt?: () => void\n) =>\n  core.fiberIdWith((id) =>\n    core.flatMap(\n      core.flatMap(\n        forkDaemon(core.interruptible(self)),\n        (processing) =>\n          core.async<void, E>((cb) => {\n            const counts = entries.map((_) => _.listeners.count)\n            const checkDone = () => {\n              if (counts.every((count) => count === 0)) {\n                if (\n                  entries.every((_) => {\n                    if (_.result.state.current._tag === \"Pending\") {\n                      return true\n                    } else if (\n                      _.result.state.current._tag === \"Done\" &&\n                      core.exitIsExit(_.result.state.current.effect) &&\n                      _.result.state.current.effect._tag === \"Failure\" &&\n                      internalCause.isInterrupted(_.result.state.current.effect.cause)\n                    ) {\n                      return true\n                    } else {\n                      return false\n                    }\n                  })\n                ) {\n                  cleanup.forEach((f) => f())\n                  onInterrupt?.()\n                  cb(core.interruptFiber(processing))\n                }\n              }\n            }\n            processing.addObserver((exit) => {\n              cleanup.forEach((f) => f())\n              cb(exit)\n            })\n            const cleanup = entries.map((r, i) => {\n              const observer = (count: number) => {\n                counts[i] = count\n                checkDone()\n              }\n              r.listeners.addObserver(observer)\n              return () => r.listeners.removeObserver(observer)\n            })\n            checkDone()\n            return core.sync(() => {\n              cleanup.forEach((f) => f())\n            })\n          })\n      ),\n      () =>\n        core.suspend(() => {\n          const residual = entries.flatMap((entry) => {\n            if (!entry.state.completed) {\n              return [entry]\n            }\n            return []\n          })\n          return core.forEachSequentialDiscard(\n            residual,\n            (entry) => complete(entry.request as any, core.exitInterrupt(id))\n          )\n        })\n    )\n  )\n\n/** @internal */\nexport const interruptWhenPossible = dual<\n  (all: Iterable<Request<any, any>>) => <A, E, R>(\n    self: Effect.Effect<A, E, R>\n  ) => Effect.Effect<void, E, R>,\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    all: Iterable<Request<any, any>>\n  ) => Effect.Effect<void, E, R>\n>(2, (self, all) =>\n  core.fiberRefGetWith(\n    currentRequestMap,\n    (map) =>\n      core.suspend(() => {\n        const entries = RA.fromIterable(all).flatMap((_) => map.has(_) ? [map.get(_)!] : [])\n        return invokeWithInterrupt(self, entries)\n      })\n  ))\n\n// circular Tracer\n\n/** @internal */\nexport const makeSpanScoped = (\n  name: string,\n  options?: Tracer.SpanOptions | undefined\n): Effect.Effect<Tracer.Span, never, Scope.Scope> => {\n  options = tracer.addSpanStackTrace(options)\n  return core.uninterruptible(\n    core.withFiberRuntime((fiber) => {\n      const scope = Context.unsafeGet(fiber.getFiberRef(core.currentContext), scopeTag)\n      const span = internalEffect.unsafeMakeSpan(fiber, name, options)\n      const timingEnabled = fiber.getFiberRef(core.currentTracerTimingEnabled)\n      const clock_ = Context.get(fiber.getFiberRef(defaultServices.currentServices), clock.clockTag)\n      return core.as(\n        core.scopeAddFinalizerExit(scope, (exit) => internalEffect.endSpan(span, exit, clock_, timingEnabled)),\n        span\n      )\n    })\n  )\n}\n\n/* @internal */\nexport const withTracerScoped = (value: Tracer.Tracer): Effect.Effect<void, never, Scope.Scope> =>\n  fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(tracer.tracerTag, value))\n\n/** @internal */\nexport const withSpanScoped: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Effect.Effect<A, E, R>) => Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Effect.Effect<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Effect.Effect<A, E, Scope.Scope | Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = tracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n  }\n  return (self: Effect.Effect<any, any, any>) =>\n    core.flatMap(\n      makeSpanScoped(name, tracer.addSpanStackTrace(options)),\n      (span) => internalEffect.provideService(self, tracer.spanTag, span)\n    )\n} as any\n"],"names":["internalCall","yieldWrapGet","RA","Boolean","Chunk","Context","Deferred","Effectable","ExecutionStrategy","FiberId","FiberRefs","FiberRefsPatch","FiberStatus","dual","identity","pipe","globalValue","HashMap","HashSet","Inspectable","LogLevel","Micro","MRef","Option","pipeArguments","Predicate","Ref","RuntimeFlagsPatch","currentScheduler","_RequestBlock","internalCause","clock","currentRequestMap","concurrency","configProviderTag","internalEffect","core","defaultServices","consoleTag","executionStrategy","internalFiber","FiberMessage","fiberRefs","fiberScope","internalLogger","metric","metricBoundaries","metricLabel","OpCodes","randomTag","complete","_runtimeFlags","OpSupervision","supervisor","SupervisorPatch","tracer","version","fiberStarted","counter","incremental","fiberActive","fiberSuccesses","fiberFailures","fiberLifetimes","tagged","histogram","exponential","start","factor","count","EvaluationSignalContinue","EvaluationSignalDone","EvaluationSignalYieldNow","runtimeFiberVariance","_E","_","_A","absurd","Error","toStringUnknown","YieldedOp","Symbol","for","yieldedOpChannel","currentOp","contOpSuccess","OP_ON_SUCCESS","cont","value","effect_instruction_i1","OnStep","_cont","exitSucceed","OP_ON_SUCCESS_AND_FAILURE","effect_instruction_i2","OP_REVERT_FLAGS","self","patchRuntimeFlags","currentRuntimeFlags","patch","interruptible","isInterrupted","exitFailCause","getInterruptedCause","OP_WHILE","effect_instruction_i0","pushStack","void","OP_ITERATOR","state","next","done","drainQueueWhileRunningTable","OP_INTERRUPT_SIGNAL","runtimeFlags","cur","message","processNewInterruptSignal","cause","OP_RESUME","_self","_cur","_message","OP_STATEFUL","onFiber","running","OP_YIELD_NOW","flatMap","yieldNow","runBlockedRequests","forEachSequentialDiscard","flatten","requestsByRequestResolver","forEachConcurrentDiscard","sequentialCollectionToChunk","dataSource","sequential","map","Map","arr","block","push","toReadonlyArray","entry","set","request","flat","fiberRefLocally","invokeWithInterrupt","runAll","forEach","listeners","interrupted","FiberRuntime","Class","FiberTypeId","fiberVariance","RuntimeFiberTypeId","_fiberRefs","_fiberId","_queue","Array","_children","_observers","_running","_stack","_asyncInterruptor","_asyncBlockingOn","_exitValue","_steps","_isYielding","currentOpCount","currentSupervisor","currentTracer","currentSpan","currentContext","currentDefaultServices","constructor","fiberId","fiberRefs0","runtimeFlags0","runtimeMetrics","tags","getFiberRef","currentMetricLabels","unsafeUpdate","refreshRefCache","commit","join","id","resume","effect","tell","status","ask","isDone","scope","unsafeMake","children","fiber","from","getChildren","Set","currentInterruptedCause","getFiberRefs","f","suspend","deferred","deferredUnsafeMake","stateful","deferredUnsafeDone","sync","deferredAwait","drainQueueLaterOnExecutor","await","async","cb","exit","succeed","addObserver","removeObserver","inheritAll","withFiberRuntime","parentFiber","parentStatus","parentFiberId","parentFiberRefs","parentRuntimeFlags","childFiberRefs","updatedFiberRefs","joinAs","setFiberRefs","updatedRuntimeFlags","diff","exclude","Interruption","WindDown","updateRuntimeFlags","poll","fromNullable","unsafePoll","interruptAsFork","interruptSignal","interrupt","unsafeInterruptAsFork","observer","filter","o","setFiberRef","unsafeDeleteFiberRef","fiberRef","delete_","locals","has","get","initial","updateAs","currentServices","unsafeMap","tracerTag","key","spanTag","addChild","child","add","removeChild","delete","transferChildren","size","drainQueueOnCurrentThread","recurse","evaluationSignal","prev","globalThis","currentFiberURI","length","evaluateMessageWhileSuspended","splice","scheduleTask","run","currentSchedulingPriority","drainQueueWhileRunning","cur0","_tag","isEmpty","addInterruptedCause","oldSC","sendInterruptSignalToAllChildren","told","interruptAllChildren","it","values","body","asVoid","whileLoop","while","step","reportExitValue","startTimeMillis","endTimeMillis","Date","now","OP_SUCCESS","OP_FAILURE","level","currentUnhandledErrorLogLevel","isInterruptedOnly","log","setExitValue","i","getLoggers","currentLoggers","overrideLogLevel","logLevel","isSome","currentLogLevel","minimumLogLevel","currentMinimumLogLevel","greaterThan","spans","currentLogSpan","annotations","currentLogAnnotations","loggers","contextMap","clockService","clockTag","date","unsafeCurrentTimeMillis","withRedactableContext","logger","context","evaluateEffect","suspended","effect0","onResume","eff","runLoop","op","_op","OP_YIELD","cooperativeYielding","exitVoid","OP_ASYNC","enable","interruption","onSuspend","startFork","oldRuntimeFlags","newRuntimeFlags","initiateAsync","asyncRegister","alreadyCalled","callback","e","failCause","die","refs","flags","popStack","item","pop","getNextSuccessCont","frame","OP_ON_FAILURE","getNextFailCont","OP_TAG","unsafeGet","Left","fail","left","None","NoSuchElementException","Right","right","Some","unsafeAsync","microResume","runFork","provideContext","none","error","defect","abortResume","unsafeInterrupt","OP_SYNC","undefined","oldCur","stripFailures","OP_WITH_RUNTIME","Blocked","frames","snap","patchRefs","patchFlags","blocked","newFiber","uninterruptibleMask","restore","forkDaemon","runRequestBlock","RunBlocked","OP_UPDATE_RUNTIME_FLAGS","updateFlags","revertFlags","RevertFlags","check","OP_COMMIT","onEffect","shouldYield","priority","getCurrentVersion","EffectTypeId","_V","dieMessage","hasProperty","isEffectError","isInterruptedException","fiberRefUnsafeMake","fromLiteral","loggerWithConsoleLog","makeLogger","opts","services","getOrDefault","unsafe","loggerWithLeveledLog","unsafeLogger","debug","info","trace","warn","loggerWithConsoleError","defaultLogger","stringLogger","jsonLogger","logFmtLogger","logfmtLogger","prettyLogger","prettyLoggerDefault","structuredLogger","tracerLogger","span","getOption","attributes","threadName","label","pretty","renderErrorCause","event","isArray","unsafeCurrentTimeNanos","loggerWithSpanAnnotations","mapInputOptions","options","traceId","spanId","name","fiberRefUnsafeMakeHashSet","make","batchedLogger","window","buffer","flush","sleep","zipRight","forever","scopeAddFinalizer","interruptFiber","addFinalizer","as","annotateLogsScoped","arguments","fiberRefLocallyScopedWith","entries","Object","mutate","acquireRelease","args","isEffect","acquire","release","uninterruptible","tap","a","acquireReleaseInterruptible","ensuring","finalizer","runtime","acquireRefs","acquireFlags","scopeAddFinalizerExit","runtimeFinalizer","preRefs","preFlags","inverseRefs","withRuntimeFlags","daemonChildren","forkScope","currentForkScopeOverride","some","globalScope","_existsParFound","exists","isIterable","elements","matchSimple","existsLoop","iterator","matchEffect","if_","onTrue","onFalse","onFailure","onSuccess","index","b","predicate","negate","not","fromIterable","reduceRight","zipWith","list","getSomes","allResolveInput","input","keys","k","res","allValidate","effects","reconcile","eitherEffects","either","batching","eithers","errors","successes","errored","discard","allEither","all","arg","mode","allWith","allSuccesses","filterMap","exitIsSuccess","replicate","n","replicateEffect","r","isRequestBatchingEnabled","currentRequestBatching","match","finalizersMaskInternal","concurrentFinalizers","parallel","parallelN","forEachParN","forEachSequential","forEachParUnbounded","array","fn","processAll","transplant","graft","parent","todos","reverse","target","fibersCount","Math","min","fibers","results","interruptAll","startOrder","joinOrder","residual","collectExits","exits","sort","runFiber","interruptImmediately","runnable","unsafeForkUnstarted","onInterruptSignal","stepOrExit","processingFiber","pushResult","returnNextElement","onRes","todo","wrapped","getOrElse","exitCollectAll","requests","reduce","par","onExit","exitMatch","toPop","hitNext","getOrThrow","fork","unsafeFork","forkWithScopeOverride","forkWithErrorHandler","handler","onError","failureOrCause","overrideScope","childFiber","unsafeMakeChildFiber","childId","forkAs","childContext","onStart","onEnd","parentScope","scopeOverride","mergeAll","isFunction","zero","acc","update","partition","chunk","partitionMap","validateAll","es","bs","raceAll","isNonEmpty","dieSync","IllegalArgumentException","headNonEmpty","tailNonEmpty","deferredMake","fails","head","unsafeFromArray","tail","prepend","_await","raceAllArbiter","onInterrupt","zipLeft","winner","exitMatchEffect","modify","deferredFailCause","deferredSucceed","reduceEffect","elem","option","parallelFinalizers","contextWithEffect","scopeTag","onNone","onSome","strategy","scopeFork","inner","scopeExtend","parallelNFinalizers","parallelism","finalizersMask","sequentialFinalizers","scopeWith","scopedWith","scopeMake","close","scopedEffect","scopeUse","tagMetricsScoped","labelMetricsScoped","labels","old","union","using","use","validate","that","validateWith","zipWithOptions","ea","eb","exitZipWith","ca","concurrent","validateAllPar","validateAllParDiscard","validateFirst","flip","withClockScoped","withRandomScoped","withConfigProviderScoped","withEarlyRelease","fiberIdWith","scopeClose","exitInterrupt","zipOptions","zipLeftOptions","zipRightOptions","a2","withRuntimeFlagsScoped","empty","revertRuntimeFlags","GenericTag","scopeUnsafeAddFinalizer","fin","finalizers","ScopeImplProto","ScopeTypeId","CloseableScopeTypeId","newScope","scopeUnsafeMake","isSequential","exitAsVoid","isParallel","create","mapInputContext","merge","fiberRefUnsafeMakeSupervisor","fiberRefUnsafeMakePatch","differ","fiberRefLocallyScoped","fiberRefGet","oldValue","fiberRefSet","fiberRefGetWith","fiberRefMake","fiberRefMakeWith","ref","fiberRefUpdate","fiberRefDelete","fiberRefMakeContext","fiberRefUnsafeMakeContext","fiberRefMakeRuntimeFlags","fiberRefUnsafeMakeRuntimeFlags","fiberAwaitAll","fiberAll","_fiberAll","CommitPrototype","combine","optionB","optionA","fiberInterruptFork","fiberJoinAll","fiberScoped","raceWith","other","raceFibersWith","onSelfWin","loser","onSelfDone","onOtherWin","onOtherDone","disconnect","race","mapErrorCause","cause2","interruptAsFiber","raceIndicator","leftFiber","selfScope","rightFiber","otherScope","completeRace","ab","compareAndSet","matchCauseEffect","cause1","processing","counts","checkDone","every","result","current","exitIsExit","cleanup","completed","interruptWhenPossible","makeSpanScoped","addSpanStackTrace","unsafeMakeSpan","timingEnabled","currentTracerTimingEnabled","clock_","endSpan","withTracerScoped","withSpanScoped","dataFirst","provideService"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2124, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}