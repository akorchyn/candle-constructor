{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"stream.js","sources":["file:///home/yurtur/projects/candle-constructor/node_modules/effect/src/internal/stream.ts"],"sourcesContent":["import * as Cause from \"../Cause.js\"\nimport type * as Channel from \"../Channel.js\"\nimport * as Chunk from \"../Chunk.js\"\nimport * as Clock from \"../Clock.js\"\nimport * as Context from \"../Context.js\"\nimport * as Deferred from \"../Deferred.js\"\nimport * as Duration from \"../Duration.js\"\nimport * as Effect from \"../Effect.js\"\nimport * as Either from \"../Either.js\"\nimport * as Equal from \"../Equal.js\"\nimport * as Exit from \"../Exit.js\"\nimport * as Fiber from \"../Fiber.js\"\nimport * as FiberRef from \"../FiberRef.js\"\nimport type { LazyArg } from \"../Function.js\"\nimport { constTrue, dual, identity, pipe } from \"../Function.js\"\nimport * as Layer from \"../Layer.js\"\nimport * as MergeDecision from \"../MergeDecision.js\"\nimport * as Option from \"../Option.js\"\nimport type * as Order from \"../Order.js\"\nimport { pipeArguments } from \"../Pipeable.js\"\nimport { hasProperty, type Predicate, type Refinement } from \"../Predicate.js\"\nimport * as PubSub from \"../PubSub.js\"\nimport * as Queue from \"../Queue.js\"\nimport * as RcRef from \"../RcRef.js\"\nimport * as Ref from \"../Ref.js\"\nimport * as Runtime from \"../Runtime.js\"\nimport * as Schedule from \"../Schedule.js\"\nimport * as Scope from \"../Scope.js\"\nimport type * as Sink from \"../Sink.js\"\nimport type * as Stream from \"../Stream.js\"\nimport type * as Emit from \"../StreamEmit.js\"\nimport * as HaltStrategy from \"../StreamHaltStrategy.js\"\nimport type * as Take from \"../Take.js\"\nimport * as TPubSub from \"../TPubSub.js\"\nimport * as TQueue from \"../TQueue.js\"\nimport type * as Tracer from \"../Tracer.js\"\nimport * as Tuple from \"../Tuple.js\"\nimport type { NoInfer, TupleOf } from \"../Types.js\"\nimport * as channel from \"./channel.js\"\nimport * as channelExecutor from \"./channel/channelExecutor.js\"\nimport * as MergeStrategy from \"./channel/mergeStrategy.js\"\nimport * as core from \"./core-stream.js\"\nimport * as doNotation from \"./doNotation.js\"\nimport { RingBuffer } from \"./ringBuffer.js\"\nimport * as _sink from \"./sink.js\"\nimport * as DebounceState from \"./stream/debounceState.js\"\nimport * as emit from \"./stream/emit.js\"\nimport * as haltStrategy from \"./stream/haltStrategy.js\"\nimport * as Handoff from \"./stream/handoff.js\"\nimport * as HandoffSignal from \"./stream/handoffSignal.js\"\nimport * as pull from \"./stream/pull.js\"\nimport * as SinkEndReason from \"./stream/sinkEndReason.js\"\nimport * as ZipAllState from \"./stream/zipAllState.js\"\nimport * as ZipChunksState from \"./stream/zipChunksState.js\"\nimport * as InternalTake from \"./take.js\"\nimport * as InternalTracer from \"./tracer.js\"\n\n/** @internal */\nconst StreamSymbolKey = \"effect/Stream\"\n\n/** @internal */\nexport const StreamTypeId: Stream.StreamTypeId = Symbol.for(\n  StreamSymbolKey\n) as Stream.StreamTypeId\n\n/** @internal */\nconst streamVariance = {\n  _R: (_: never) => _,\n  _E: (_: never) => _,\n  _A: (_: never) => _\n}\n\n/** @internal */\nexport class StreamImpl<out A, out E = never, out R = never> implements Stream.Stream<A, E, R> {\n  readonly [StreamTypeId] = streamVariance\n  constructor(\n    readonly channel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R>\n  ) {\n  }\n\n  pipe() {\n    return pipeArguments(this, arguments)\n  }\n}\n\n/** @internal */\nexport const isStream = (u: unknown): u is Stream.Stream<unknown, unknown, unknown> =>\n  hasProperty(u, StreamTypeId) || Effect.isEffect(u)\n\n/** @internal */\nexport const DefaultChunkSize = 4096\n\n/** @internal */\nexport const accumulate = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n  chunks(accumulateChunks(self))\n\n/** @internal */\nexport const accumulateChunks = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> => {\n  const accumulator = (\n    s: Chunk.Chunk<A>\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const next = Chunk.appendAll(s, input)\n        return core.flatMap(\n          core.write(next),\n          () => accumulator(next)\n        )\n      },\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n  return new StreamImpl(core.pipeTo(toChannel(self), accumulator(Chunk.empty())))\n}\n\n/** @internal */\nexport const acquireRelease = <A, E, R, R2, X>(\n  acquire: Effect.Effect<A, E, R>,\n  release: (resource: A, exit: Exit.Exit<unknown, unknown>) => Effect.Effect<X, never, R2>\n): Stream.Stream<A, E, R | R2> => scoped(Effect.acquireRelease(acquire, release))\n\n/** @internal */\nexport const aggregate = dual<\n  <B, A, A2, E2, R2>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E2 | E, R2 | R>,\n  <A, E, R, B, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>\n  ) => Stream.Stream<B, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, B, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>\n  ): Stream.Stream<B, E2 | E, R2 | R> => aggregateWithin(self, sink, Schedule.forever)\n)\n\n/** @internal */\nexport const aggregateWithin = dual<\n  <B, A, A2, E2, R2, C, R3>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E2 | E, R2 | R3 | R>,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => Stream.Stream<B, E2 | E, R2 | R3 | R>\n>(\n  3,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): Stream.Stream<B, E2 | E, R2 | R3 | R> =>\n    filterMap(\n      aggregateWithinEither(self, sink, schedule),\n      (_) =>\n        Either.match(_, {\n          onLeft: Option.none,\n          onRight: Option.some\n        })\n    )\n)\n\n/** @internal */\nexport const aggregateWithinEither = dual<\n  <B, A, A2, E2, R2, C, R3>(\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R>,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ) => Stream.Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R>\n>(\n  3,\n  <A, E, R, B, A2, E2, R2, C, R3>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<B, A | A2, A2, E2, R2>,\n    schedule: Schedule.Schedule<C, Option.Option<B>, R3>\n  ): Stream.Stream<Either.Either<B, C>, E2 | E, R2 | R3 | R> => {\n    const layer = Effect.all([\n      Handoff.make<HandoffSignal.HandoffSignal<A, E | E2>>(),\n      Ref.make<SinkEndReason.SinkEndReason>(SinkEndReason.ScheduleEnd),\n      Ref.make(Chunk.empty<A | A2>()),\n      Schedule.driver(schedule),\n      Ref.make(false),\n      Ref.make(false)\n    ])\n    return fromEffect(layer).pipe(\n      flatMap(([handoff, sinkEndReason, sinkLeftovers, scheduleDriver, consumed, endAfterEmit]) => {\n        const handoffProducer: Channel.Channel<never, Chunk.Chunk<A>, never, E | E2, unknown, unknown> = core\n          .readWithCause({\n            onInput: (input: Chunk.Chunk<A>) =>\n              core.flatMap(\n                core.fromEffect(pipe(\n                  handoff,\n                  Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(HandoffSignal.emit(input)),\n                  Effect.when(() => Chunk.isNonEmpty(input))\n                )),\n                () => handoffProducer\n              ),\n            onFailure: (cause) =>\n              core.fromEffect(\n                Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                  handoff,\n                  HandoffSignal.halt(cause)\n                )\n              ),\n            onDone: () =>\n              core.fromEffect(\n                Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                  handoff,\n                  HandoffSignal.end(SinkEndReason.UpstreamEnd)\n                )\n              )\n          })\n        const handoffConsumer: Channel.Channel<Chunk.Chunk<A | A2>, unknown, E | E2, unknown, void, unknown> = pipe(\n          Ref.getAndSet(sinkLeftovers, Chunk.empty()),\n          Effect.flatMap((leftovers) => {\n            if (Chunk.isNonEmpty(leftovers)) {\n              return pipe(\n                Ref.set(consumed, true),\n                Effect.zipRight(Effect.succeed(pipe(\n                  core.write(leftovers),\n                  core.flatMap(() => handoffConsumer)\n                )))\n              )\n            }\n            return pipe(\n              Handoff.take(handoff),\n              Effect.map((signal) => {\n                switch (signal._tag) {\n                  case HandoffSignal.OP_EMIT: {\n                    return pipe(\n                      core.fromEffect(Ref.set(consumed, true)),\n                      channel.zipRight(core.write(signal.elements)),\n                      channel.zipRight(core.fromEffect(Ref.get(endAfterEmit))),\n                      core.flatMap((bool) => bool ? core.void : handoffConsumer)\n                    )\n                  }\n                  case HandoffSignal.OP_HALT: {\n                    return core.failCause(signal.cause)\n                  }\n                  case HandoffSignal.OP_END: {\n                    if (signal.reason._tag === SinkEndReason.OP_SCHEDULE_END) {\n                      return pipe(\n                        Ref.get(consumed),\n                        Effect.map((bool) =>\n                          bool ?\n                            core.fromEffect(\n                              pipe(\n                                Ref.set(sinkEndReason, SinkEndReason.ScheduleEnd),\n                                Effect.zipRight(Ref.set(endAfterEmit, true))\n                              )\n                            ) :\n                            pipe(\n                              core.fromEffect(\n                                pipe(\n                                  Ref.set(sinkEndReason, SinkEndReason.ScheduleEnd),\n                                  Effect.zipRight(Ref.set(endAfterEmit, true))\n                                )\n                              ),\n                              core.flatMap(() => handoffConsumer)\n                            )\n                        ),\n                        channel.unwrap\n                      )\n                    }\n                    return pipe(\n                      Ref.set<SinkEndReason.SinkEndReason>(sinkEndReason, signal.reason),\n                      Effect.zipRight(Ref.set(endAfterEmit, true)),\n                      core.fromEffect\n                    )\n                  }\n                }\n              })\n            )\n          }),\n          channel.unwrap\n        )\n        const timeout = (lastB: Option.Option<B>): Effect.Effect<C, Option.Option<never>, R2 | R3> =>\n          scheduleDriver.next(lastB)\n        const scheduledAggregator = (\n          sinkFiber: Fiber.RuntimeFiber<readonly [Chunk.Chunk<Chunk.Chunk<A | A2>>, B], E | E2>,\n          scheduleFiber: Fiber.RuntimeFiber<C, Option.Option<never>>,\n          scope: Scope.Scope\n        ): Channel.Channel<Chunk.Chunk<Either.Either<B, C>>, unknown, E | E2, unknown, unknown, unknown, R2 | R3> => {\n          const forkSink = pipe(\n            Ref.set(consumed, false),\n            Effect.zipRight(Ref.set(endAfterEmit, false)),\n            Effect.zipRight(\n              pipe(\n                handoffConsumer,\n                channel.pipeToOrFail(_sink.toChannel(sink)),\n                core.collectElements,\n                channel.run,\n                Effect.forkIn(scope)\n              )\n            )\n          )\n          const handleSide = (\n            leftovers: Chunk.Chunk<Chunk.Chunk<A | A2>>,\n            b: B,\n            c: Option.Option<C>\n          ): Channel.Channel<Chunk.Chunk<Either.Either<B, C>>, unknown, E | E2, unknown, unknown, unknown, R2 | R3> =>\n            pipe(\n              Ref.set(sinkLeftovers, Chunk.flatten(leftovers)),\n              Effect.zipRight(\n                Effect.map(Ref.get(sinkEndReason), (reason) => {\n                  switch (reason._tag) {\n                    case SinkEndReason.OP_SCHEDULE_END: {\n                      return pipe(\n                        Effect.all([\n                          Ref.get(consumed),\n                          forkSink,\n                          pipe(timeout(Option.some(b)), Effect.forkIn(scope))\n                        ]),\n                        Effect.map(([wasConsumed, sinkFiber, scheduleFiber]) => {\n                          const toWrite = pipe(\n                            c,\n                            Option.match({\n                              onNone: (): Chunk.Chunk<Either.Either<B, C>> => Chunk.of(Either.right(b)),\n                              onSome: (c): Chunk.Chunk<Either.Either<B, C>> =>\n                                Chunk.make(Either.right(b), Either.left(c))\n                            })\n                          )\n                          if (wasConsumed) {\n                            return pipe(\n                              core.write(toWrite),\n                              core.flatMap(() => scheduledAggregator(sinkFiber, scheduleFiber, scope))\n                            )\n                          }\n                          return scheduledAggregator(sinkFiber, scheduleFiber, scope)\n                        }),\n                        channel.unwrap\n                      )\n                    }\n                    case SinkEndReason.OP_UPSTREAM_END: {\n                      return pipe(\n                        Ref.get(consumed),\n                        Effect.map((wasConsumed) =>\n                          wasConsumed ?\n                            core.write(Chunk.of<Either.Either<B, C>>(Either.right(b))) :\n                            core.void\n                        ),\n                        channel.unwrap\n                      )\n                    }\n                  }\n                })\n              ),\n              channel.unwrap\n            )\n          return channel.unwrap(\n            Effect.raceWith(Fiber.join(sinkFiber), Fiber.join(scheduleFiber), {\n              onSelfDone: (sinkExit, _) =>\n                pipe(\n                  Fiber.interrupt(scheduleFiber),\n                  Effect.zipRight(pipe(\n                    Effect.suspend(() => sinkExit),\n                    Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.none()))\n                  ))\n                ),\n              onOtherDone: (scheduleExit, _) =>\n                Effect.matchCauseEffect(Effect.suspend(() => scheduleExit), {\n                  onFailure: (cause) =>\n                    Either.match(\n                      Cause.failureOrCause(cause),\n                      {\n                        onLeft: () =>\n                          pipe(\n                            handoff,\n                            Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                              HandoffSignal.end(SinkEndReason.ScheduleEnd)\n                            ),\n                            Effect.forkDaemon,\n                            Effect.zipRight(\n                              pipe(\n                                Fiber.join(sinkFiber),\n                                Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.none()))\n                              )\n                            )\n                          ),\n                        onRight: (cause) =>\n                          pipe(\n                            handoff,\n                            Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                              HandoffSignal.halt(cause)\n                            ),\n                            Effect.forkDaemon,\n                            Effect.zipRight(\n                              pipe(\n                                Fiber.join(sinkFiber),\n                                Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.none()))\n                              )\n                            )\n                          )\n                      }\n                    ),\n                  onSuccess: (c) =>\n                    pipe(\n                      handoff,\n                      Handoff.offer<HandoffSignal.HandoffSignal<A, E | E2>>(\n                        HandoffSignal.end(SinkEndReason.ScheduleEnd)\n                      ),\n                      Effect.forkDaemon,\n                      Effect.zipRight(\n                        pipe(\n                          Fiber.join(sinkFiber),\n                          Effect.map(([leftovers, b]) => handleSide(leftovers, b, Option.some(c)))\n                        )\n                      )\n                    )\n                })\n            })\n          )\n        }\n        return unwrapScopedWith((scope) =>\n          core.pipeTo(toChannel(self), handoffProducer).pipe(\n            channel.run,\n            Effect.forkIn(scope),\n            Effect.zipRight(\n              channel.pipeToOrFail(handoffConsumer, _sink.toChannel(sink)).pipe(\n                core.collectElements,\n                channel.run,\n                Effect.forkIn(scope),\n                Effect.flatMap((sinkFiber) =>\n                  timeout(Option.none()).pipe(\n                    Effect.forkIn(scope),\n                    Effect.map((scheduleFiber) =>\n                      new StreamImpl(\n                        scheduledAggregator(sinkFiber, scheduleFiber, scope)\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      })\n    )\n  }\n)\n\n/** @internal */\nexport const as = dual<\n  <B>(value: B) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, value: B) => Stream.Stream<B, E, R>\n>(2, <A, E, R, B>(self: Stream.Stream<A, E, R>, value: B): Stream.Stream<B, E, R> => map(self, () => value))\n\nconst queueFromBufferOptions = <A, E>(\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Effect.Effect<Queue.Queue<Take.Take<A, E>>> => {\n  if (bufferSize === \"unbounded\") {\n    return Queue.unbounded()\n  } else if (typeof bufferSize === \"number\" || bufferSize === undefined) {\n    return Queue.bounded(bufferSize ?? 16)\n  }\n  switch (bufferSize.strategy) {\n    case \"dropping\":\n      return Queue.dropping(bufferSize.bufferSize ?? 16)\n    case \"sliding\":\n      return Queue.sliding(bufferSize.bufferSize ?? 16)\n    default:\n      return Queue.bounded(bufferSize.bufferSize ?? 16)\n  }\n}\n\n/** @internal */\nexport const _async = <A, E = never, R = never>(\n  register: (\n    emit: Emit.Emit<R, E, A, void>\n  ) => Effect.Effect<void, never, R> | void,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Stream.Stream<A, E, R> =>\n  Effect.acquireRelease(\n    queueFromBufferOptions<A, E>(bufferSize),\n    (queue) => Queue.shutdown(queue)\n  ).pipe(\n    Effect.flatMap((output) =>\n      Effect.runtime<R>().pipe(\n        Effect.flatMap((runtime) =>\n          Effect.sync(() => {\n            const runPromiseExit = Runtime.runPromiseExit(runtime)\n            const canceler = register(emit.make<R, E, A, void>((resume) =>\n              InternalTake.fromPull(resume).pipe(\n                Effect.flatMap((take) => Queue.offer(output, take)),\n                Effect.asVoid,\n                runPromiseExit\n              ).then((exit) => {\n                if (Exit.isFailure(exit)) {\n                  if (!Cause.isInterrupted(exit.cause)) {\n                    throw Cause.squash(exit.cause)\n                  }\n                }\n              })\n            ))\n            return canceler\n          })\n        ),\n        Effect.map((value) => {\n          const loop: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = Queue.take(output).pipe(\n            Effect.flatMap((take) => InternalTake.done(take)),\n            Effect.match({\n              onFailure: (maybeError) =>\n                core.fromEffect(Queue.shutdown(output)).pipe(\n                  channel.zipRight(Option.match(maybeError, {\n                    onNone: () => core.void,\n                    onSome: (error) => core.fail(error)\n                  }))\n                ),\n              onSuccess: (chunk) => core.write(chunk).pipe(core.flatMap(() => loop))\n            }),\n            channel.unwrap\n          )\n          return fromChannel(loop).pipe(ensuring(value ?? Effect.void))\n        })\n      )\n    ),\n    unwrapScoped\n  )\n\n/** @internal */\nexport const asyncEffect = <A, E = never, R = never>(\n  register: (emit: Emit.Emit<R, E, A, void>) => Effect.Effect<unknown, E, R>,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Stream.Stream<A, E, R> =>\n  pipe(\n    Effect.acquireRelease(\n      queueFromBufferOptions<A, E>(bufferSize),\n      (queue) => Queue.shutdown(queue)\n    ),\n    Effect.flatMap((output) =>\n      pipe(\n        Effect.runtime<R>(),\n        Effect.flatMap((runtime) =>\n          pipe(\n            register(\n              emit.make((k) =>\n                pipe(\n                  InternalTake.fromPull(k),\n                  Effect.flatMap((take) => Queue.offer(output, take)),\n                  Effect.asVoid,\n                  Runtime.runPromiseExit(runtime)\n                ).then((exit) => {\n                  if (Exit.isFailure(exit)) {\n                    if (!Cause.isInterrupted(exit.cause)) {\n                      throw Cause.squash(exit.cause)\n                    }\n                  }\n                })\n              )\n            ),\n            Effect.map(() => {\n              const loop: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n                Queue.take(output),\n                Effect.flatMap(InternalTake.done),\n                Effect.match({\n                  onFailure: (maybeError) =>\n                    pipe(\n                      core.fromEffect(Queue.shutdown(output)),\n                      channel.zipRight(Option.match(maybeError, { onNone: () => core.void, onSome: core.fail }))\n                    ),\n                  onSuccess: (chunk) => pipe(core.write(chunk), core.flatMap(() => loop))\n                }),\n                channel.unwrap\n              )\n              return loop\n            })\n          )\n        )\n      )\n    ),\n    channel.unwrapScoped,\n    fromChannel\n  )\n\nconst queueFromBufferOptionsPush = <A, E>(\n  options?: { readonly bufferSize: \"unbounded\" } | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | undefined\n  } | undefined\n): Effect.Effect<Queue.Queue<Array<A> | Exit.Exit<void, E>>> => {\n  if (options?.bufferSize === \"unbounded\" || (options?.bufferSize === undefined && options?.strategy === undefined)) {\n    return Queue.unbounded()\n  }\n  switch (options?.strategy) {\n    case \"sliding\":\n      return Queue.sliding(options.bufferSize ?? 16)\n    default:\n      return Queue.dropping(options?.bufferSize ?? 16)\n  }\n}\n\n/** @internal */\nexport const asyncPush = <A, E = never, R = never>(\n  register: (emit: Emit.EmitOpsPush<E, A>) => Effect.Effect<unknown, E, R | Scope.Scope>,\n  options?: {\n    readonly bufferSize: \"unbounded\"\n  } | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | undefined\n  } | undefined\n): Stream.Stream<A, E, Exclude<R, Scope.Scope>> =>\n  Effect.acquireRelease(\n    queueFromBufferOptionsPush<A, E>(options),\n    Queue.shutdown\n  ).pipe(\n    Effect.tap((queue) =>\n      FiberRef.getWith(FiberRef.currentScheduler, (scheduler) => register(emit.makePush(queue, scheduler)))\n    ),\n    Effect.map((queue) => {\n      const loop: Channel.Channel<Chunk.Chunk<A>, unknown, E> = core.flatMap(Queue.take(queue), (item) =>\n        Exit.isExit(item)\n          ? Exit.isSuccess(item) ? core.void : core.failCause(item.cause)\n          : channel.zipRight(core.write(Chunk.unsafeFromArray(item)), loop))\n      return loop\n    }),\n    channel.unwrapScoped,\n    fromChannel\n  )\n\n/** @internal */\nexport const asyncScoped = <A, E = never, R = never>(\n  register: (emit: Emit.Emit<R, E, A, void>) => Effect.Effect<unknown, E, R | Scope.Scope>,\n  bufferSize?: number | \"unbounded\" | {\n    readonly bufferSize?: number | undefined\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  } | undefined\n): Stream.Stream<A, E, Exclude<R, Scope.Scope>> =>\n  pipe(\n    Effect.acquireRelease(\n      queueFromBufferOptions<A, E>(bufferSize),\n      (queue) => Queue.shutdown(queue)\n    ),\n    Effect.flatMap((output) =>\n      pipe(\n        Effect.runtime<R>(),\n        Effect.flatMap((runtime) =>\n          pipe(\n            register(\n              emit.make((k) =>\n                pipe(\n                  InternalTake.fromPull(k),\n                  Effect.flatMap((take) => Queue.offer(output, take)),\n                  Effect.asVoid,\n                  Runtime.runPromiseExit(runtime)\n                ).then((exit) => {\n                  if (Exit.isFailure(exit)) {\n                    if (!Cause.isInterrupted(exit.cause)) {\n                      throw Cause.squash(exit.cause)\n                    }\n                  }\n                })\n              )\n            ),\n            Effect.zipRight(Ref.make(false)),\n            Effect.flatMap((ref) =>\n              pipe(\n                Ref.get(ref),\n                Effect.map((isDone) =>\n                  isDone ?\n                    pull.end() :\n                    pipe(\n                      Queue.take(output),\n                      Effect.flatMap(InternalTake.done),\n                      Effect.onError(() =>\n                        pipe(\n                          Ref.set(ref, true),\n                          Effect.zipRight(Queue.shutdown(output))\n                        )\n                      )\n                    )\n                )\n              )\n            )\n          )\n        )\n      )\n    ),\n    scoped,\n    flatMap(repeatEffectChunkOption)\n  )\n\n/** @internal */\nexport const branchAfter = dual<\n  <A, A2, E2, R2>(\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream.Stream<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (input: Chunk.Chunk<A>) => Stream.Stream<A2, E2, R2>\n  ) =>\n    suspend(() => {\n      const buffering = (\n        acc: Chunk.Chunk<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, never, unknown, unknown, R | R2> =>\n        core.readWith({\n          onInput: (input) => {\n            const nextSize = acc.length + input.length\n            if (nextSize >= n) {\n              const [b1, b2] = pipe(input, Chunk.splitAt(n - acc.length))\n              return running(pipe(acc, Chunk.appendAll(b1)), b2)\n            }\n            return buffering(pipe(acc, Chunk.appendAll(input)))\n          },\n          onFailure: core.fail,\n          onDone: () => running(acc, Chunk.empty())\n        })\n      const running = (\n        prefix: Chunk.Chunk<A>,\n        leftover: Chunk.Chunk<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, never, unknown, unknown, R | R2> =>\n        core.pipeTo(\n          channel.zipRight(\n            core.write(leftover),\n            channel.identityChannel()\n          ),\n          toChannel(f(prefix))\n        )\n      return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(buffering(Chunk.empty<A>()))))\n    })\n)\n\n/** @internal */\nexport const broadcast = dual<\n  <N extends number>(\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<TupleOf<N, Stream.Stream<A, E>>, never, Scope.Scope | R>,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<TupleOf<N, Stream.Stream<A, E>>, never, Scope.Scope | R>\n>(3, <A, E, R, N extends number>(\n  self: Stream.Stream<A, E, R>,\n  n: N,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<TupleOf<N, Stream.Stream<A, E>>, never, Scope.Scope | R> =>\n  pipe(\n    self,\n    broadcastedQueues(n, maximumLag),\n    Effect.map((tuple) =>\n      tuple.map((queue) => flattenTake(fromQueue(queue, { shutdown: true }))) as TupleOf<N, Stream.Stream<A, E>>\n    )\n  ))\n\n/** @internal */\nexport const broadcastDynamic = dual<\n  (\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<Stream.Stream<A, E>, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<Stream.Stream<A, E>, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<Stream.Stream<A, E>, never, Scope.Scope | R> =>\n  Effect.map(toPubSub(self, maximumLag), (pubsub) => flattenTake(fromPubSub(pubsub))))\n\nexport const share = dual<\n  <A, E>(\n    config: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ) => <R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Stream.Stream<A, E>, never, R | Scope.Scope>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    config: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ) => Effect.Effect<Stream.Stream<A, E>, never, R | Scope.Scope>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n      readonly idleTimeToLive?: Duration.DurationInput | undefined\n    }\n  ): Effect.Effect<Stream.Stream<A, E>, never, R | Scope.Scope> =>\n    Effect.map(\n      RcRef.make({\n        acquire: broadcastDynamic(self, options),\n        idleTimeToLive: options.idleTimeToLive\n      }),\n      (rcRef) => unwrapScoped(RcRef.get(rcRef))\n    )\n)\n\n/** @internal */\nexport const broadcastedQueues = dual<\n  <N extends number>(\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R>,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    n: N,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R>\n>(3, <A, E, R, N extends number>(\n  self: Stream.Stream<A, E, R>,\n  n: N,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>, never, Scope.Scope | R> =>\n  Effect.flatMap(pubsubFromOptions(maximumLag), (pubsub) =>\n    pipe(\n      Effect.all(Array.from({ length: n }, () => PubSub.subscribe(pubsub))) as Effect.Effect<\n        TupleOf<N, Queue.Dequeue<Take.Take<A, E>>>,\n        never,\n        R\n      >,\n      Effect.tap(() => Effect.forkScoped(runIntoPubSubScoped(self, pubsub)))\n    )))\n\n/** @internal */\nexport const broadcastedQueuesDynamic = dual<\n  (\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    maximumLag: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  maximumLag: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, Scope.Scope>, never, Scope.Scope | R> =>\n  Effect.map(toPubSub(self, maximumLag), PubSub.subscribe))\n\n/** @internal */\nexport const buffer = dual<\n  (\n    options: {\n      readonly capacity: \"unbounded\"\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly capacity: \"unbounded\"\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n    }\n  ) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options: {\n    readonly capacity: \"unbounded\"\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  }\n): Stream.Stream<A, E, R> => {\n  if (options.capacity === \"unbounded\") {\n    return bufferUnbounded(self)\n  } else if (options.strategy === \"dropping\") {\n    return bufferDropping(self, options.capacity)\n  } else if (options.strategy === \"sliding\") {\n    return bufferSliding(self, options.capacity)\n  }\n  const queue = toQueueOfElements(self, options)\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.map(queue, (queue) => {\n        const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n          core.fromEffect(Queue.take(queue)),\n          core.flatMap(Exit.match({\n            onFailure: (cause) =>\n              pipe(\n                Cause.flipCauseOption(cause),\n                Option.match({ onNone: () => core.void, onSome: core.failCause })\n              ),\n            onSuccess: (value) => core.flatMap(core.write(Chunk.of(value)), () => process)\n          }))\n        )\n        return process\n      })\n    )\n  )\n})\n\n/** @internal */\nexport const bufferChunks = dual<\n  (options: {\n    readonly capacity: number\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  }) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, options: {\n    readonly capacity: number\n    readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n  }) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, options: {\n  readonly capacity: number\n  readonly strategy?: \"dropping\" | \"sliding\" | \"suspend\" | undefined\n}): Stream.Stream<A, E, R> => {\n  if (options.strategy === \"dropping\") {\n    return bufferChunksDropping(self, options.capacity)\n  } else if (options.strategy === \"sliding\") {\n    return bufferChunksSliding(self, options.capacity)\n  }\n  const queue = toQueue(self, options)\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.map(queue, (queue) => {\n        const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n          core.fromEffect(Queue.take(queue)),\n          core.flatMap(InternalTake.match({\n            onEnd: () => core.void,\n            onFailure: core.failCause,\n            onSuccess: (value) => pipe(core.write(value), core.flatMap(() => process))\n          }))\n        )\n        return process\n      })\n    )\n  )\n})\n\nconst bufferChunksDropping = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.dropping<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(self)))\n})\n\nconst bufferChunksSliding = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.sliding<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(self)))\n})\n\nconst bufferDropping = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.dropping<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(rechunk(1)(self))))\n})\n\nconst bufferSliding = dual<\n  (capacity: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, capacity: number): Stream.Stream<A, E, R> => {\n  const queue = Effect.acquireRelease(\n    Queue.sliding<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>(capacity),\n    (queue) => Queue.shutdown(queue)\n  )\n  return new StreamImpl(bufferSignal(queue, toChannel(pipe(self, rechunk(1)))))\n})\n\nconst bufferUnbounded = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> => {\n  const queue = toQueue(self, { strategy: \"unbounded\" })\n  return new StreamImpl(\n    channel.unwrapScoped(\n      Effect.map(queue, (queue) => {\n        const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n          core.fromEffect(Queue.take(queue)),\n          core.flatMap(InternalTake.match({\n            onEnd: () => core.void,\n            onFailure: core.failCause,\n            onSuccess: (value) => core.flatMap(core.write(value), () => process)\n          }))\n        )\n        return process\n      })\n    )\n  )\n}\n\nconst bufferSignal = <A, E, R>(\n  scoped: Effect.Effect<Queue.Queue<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>, never, Scope.Scope>,\n  bufferChannel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown, R>\n): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown, R> => {\n  const producer = (\n    queue: Queue.Queue<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>,\n    ref: Ref.Ref<Deferred.Deferred<void>>\n  ): Channel.Channel<never, Chunk.Chunk<A>, never, E, unknown, unknown, R> => {\n    const terminate = (take: Take.Take<A, E>): Channel.Channel<never, Chunk.Chunk<A>, never, E, unknown, unknown, R> =>\n      pipe(\n        Ref.get(ref),\n        Effect.tap(Deferred.await),\n        Effect.zipRight(Deferred.make<void>()),\n        Effect.flatMap((deferred) =>\n          pipe(\n            Queue.offer(queue, [take, deferred] as const),\n            Effect.zipRight(Ref.set(ref, deferred)),\n            Effect.zipRight(Deferred.await(deferred))\n          )\n        ),\n        Effect.asVoid,\n        core.fromEffect\n      )\n    return core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Deferred.make<void>(),\n          Effect.flatMap(\n            (deferred) =>\n              pipe(\n                Queue.offer(queue, [InternalTake.chunk(input), deferred] as const),\n                Effect.flatMap((added) => pipe(Ref.set(ref, deferred), Effect.when(() => added)))\n              )\n          ),\n          Effect.asVoid,\n          core.fromEffect,\n          core.flatMap(() => producer(queue, ref))\n        ),\n      onFailure: (error) => terminate(InternalTake.failCause(error)),\n      onDone: () => terminate(InternalTake.end)\n    })\n  }\n  const consumer = (\n    queue: Queue.Queue<readonly [Take.Take<A, E>, Deferred.Deferred<void>]>\n  ): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown, R> => {\n    const process: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n      core.fromEffect(Queue.take(queue)),\n      core.flatMap(([take, deferred]) =>\n        channel.zipRight(\n          core.fromEffect(Deferred.succeed(deferred, void 0)),\n          InternalTake.match(take, {\n            onEnd: () => core.void,\n            onFailure: core.failCause,\n            onSuccess: (value) => pipe(core.write(value), core.flatMap(() => process))\n          })\n        )\n      )\n    )\n    return process\n  }\n  return channel.unwrapScoped(\n    pipe(\n      scoped,\n      Effect.flatMap((queue) =>\n        pipe(\n          Deferred.make<void>(),\n          Effect.tap((start) => Deferred.succeed(start, void 0)),\n          Effect.flatMap((start) =>\n            pipe(\n              Ref.make(start),\n              Effect.flatMap((ref) =>\n                pipe(\n                  bufferChannel,\n                  core.pipeTo(producer(queue, ref)),\n                  channel.runScoped,\n                  Effect.forkScoped\n                )\n              ),\n              Effect.as(consumer(queue))\n            )\n          )\n        )\n      )\n    )\n  )\n}\n\n/** @internal */\nexport const catchAll = dual<\n  <E, A2, E2, R2>(\n    f: (error: E) => Stream.Stream<A2, E2, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (error: E) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2, R2 | R>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (error: E) => Stream.Stream<A2, E2, R2>\n): Stream.Stream<A2 | A, E2, R2 | R> =>\n  catchAllCause(self, (cause) =>\n    Either.match(Cause.failureOrCause(cause), {\n      onLeft: f,\n      onRight: failCause\n    })))\n\n/** @internal */\nexport const catchAllCause = dual<\n  <E, A2, E2, R2>(\n    f: (cause: Cause.Cause<E>) => Stream.Stream<A2, E2, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A | A2, E2, R | R2> =>\n    new StreamImpl<A | A2, E2, R | R2>(pipe(toChannel(self), core.catchAllCause((cause) => toChannel(f(cause)))))\n)\n\n/** @internal */\nexport const catchSome = dual<\n  <E, A2, E2, R2>(\n    pf: (error: E) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E | E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E | E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E | E2, R2 | R> =>\n    pipe(self, catchAll((error) => pipe(pf(error), Option.getOrElse(() => fail<E | E2>(error)))))\n)\n\n/** @internal */\nexport const catchSomeCause = dual<\n  <E, A2, E2, R2>(\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E | E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E | E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (cause: Cause.Cause<E>) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E | E2, R2 | R> =>\n    pipe(self, catchAllCause((cause) => pipe(pf(cause), Option.getOrElse(() => failCause<E | E2>(cause)))))\n)\n\n/* @internal */\nexport const catchTag = dual<\n  <K extends E[\"_tag\"] & string, E extends { _tag: string }, A1, E1, R1>(\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Stream.Stream<A1, E1, R1>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>,\n  <A, E extends { _tag: string }, R, K extends E[\"_tag\"] & string, A1, E1, R1>(\n    self: Stream.Stream<A, E, R>,\n    k: K,\n    f: (e: Extract<E, { _tag: K }>) => Stream.Stream<A1, E1, R1>\n  ) => Stream.Stream<A | A1, Exclude<E, { _tag: K }> | E1, R | R1>\n>(3, (self, k, f) =>\n  catchAll(self, (e) => {\n    if (\"_tag\" in e && e[\"_tag\"] === k) {\n      return f(e as any)\n    }\n    return fail(e as any)\n  }))\n\n/** @internal */\nexport const catchTags: {\n  <\n    E extends { _tag: string },\n    Cases extends {\n      [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Stream.Stream<any, any, any>\n    }\n  >(\n    cases: Cases\n  ): <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer A, infer _E, infer _R>) ? A\n        : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _A, infer E, infer _R>) ? E\n        : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _A, infer _E, infer R>) ? R\n        : never\n    }[keyof Cases]\n  >\n  <\n    A,\n    E extends { _tag: string },\n    R,\n    Cases extends {\n      [K in E[\"_tag\"]]+?: (error: Extract<E, { _tag: K }>) => Stream.Stream<any, any, any>\n    }\n  >(\n    self: Stream.Stream<A, E, R>,\n    cases: Cases\n  ): Stream.Stream<\n    | A\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _R, infer _E, infer A>) ? A\n        : never\n    }[keyof Cases],\n    | Exclude<E, { _tag: keyof Cases }>\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer _R, infer E, infer _A>) ? E\n        : never\n    }[keyof Cases],\n    | R\n    | {\n      [K in keyof Cases]: Cases[K] extends\n        ((...args: Array<any>) => Stream.Stream.Variance<infer R, infer _E, infer _A>) ? R\n        : never\n    }[keyof Cases]\n  >\n} = dual(2, (self, cases) =>\n  catchAll(self, (e: any) => {\n    const keys = Object.keys(cases)\n    if (\"_tag\" in e && keys.includes(e[\"_tag\"])) {\n      return cases[e[\"_tag\"]](e as any)\n    }\n    return fail(e as any)\n  }))\n\n/** @internal */\nexport const changes = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> =>\n  pipe(self, changesWith((x, y) => Equal.equals(y)(x)))\n\n/** @internal */\nexport const changesWith = dual<\n  <A>(f: (x: A, y: A) => boolean) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, f: (x: A, y: A) => boolean) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, f: (x: A, y: A) => boolean): Stream.Stream<A, E, R> => {\n  const writer = (\n    last: Option.Option<A>\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const [newLast, newChunk] = Chunk.reduce(\n          input,\n          [last, Chunk.empty<A>()] as const,\n          ([option, outputs], output) => {\n            if (Option.isSome(option) && f(option.value, output)) {\n              return [Option.some(output), outputs] as const\n            }\n            return [Option.some(output), pipe(outputs, Chunk.append(output))] as const\n          }\n        )\n        return core.flatMap(\n          core.write(newChunk),\n          () => writer(newLast)\n        )\n      },\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer(Option.none()))))\n})\n\n/** @internal */\nexport const changesWithEffect = dual<\n  <A, E2, R2>(\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (x: A, y: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const writer = (\n      last: Option.Option<A>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E | E2, void, unknown, R | R2> =>\n      core.readWithCause({\n        onInput: (input: Chunk.Chunk<A>) =>\n          pipe(\n            input,\n            Effect.reduce([last, Chunk.empty<A>()] as const, ([option, outputs], output) => {\n              if (Option.isSome(option)) {\n                return pipe(\n                  f(option.value, output),\n                  Effect.map((bool) =>\n                    bool ?\n                      [Option.some(output), outputs] as const :\n                      [Option.some(output), pipe(outputs, Chunk.append(output))] as const\n                  )\n                )\n              }\n              return Effect.succeed(\n                [\n                  Option.some(output),\n                  pipe(outputs, Chunk.append(output))\n                ] as const\n              )\n            }),\n            core.fromEffect,\n            core.flatMap(([newLast, newChunk]) =>\n              pipe(\n                core.write(newChunk),\n                core.flatMap(() => writer(newLast))\n              )\n            )\n          ),\n        onFailure: core.failCause,\n        onDone: () => core.void\n      })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer(Option.none()))))\n  }\n)\n\n/** @internal */\nexport const chunks = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n  pipe(self, mapChunks(Chunk.of))\n\n/** @internal */\nexport const chunksWith = dual<\n  <A, E, R, A2, E2, R2>(\n    f: (stream: Stream.Stream<Chunk.Chunk<A>, E, R>) => Stream.Stream<Chunk.Chunk<A2>, E2, R2>\n  ) => (self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E | E2, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (stream: Stream.Stream<Chunk.Chunk<A>, E, R>) => Stream.Stream<Chunk.Chunk<A2>, E2, R2>\n  ) => Stream.Stream<A2, E | E2, R | R2>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (stream: Stream.Stream<Chunk.Chunk<A>, E, R>) => Stream.Stream<Chunk.Chunk<A2>, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> => flattenChunks(f(chunks(self)))\n)\n\nconst unsome = <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>): Effect.Effect<Option.Option<A>, E, R> =>\n  Effect.catchAll(\n    Effect.asSome(effect),\n    (o) => o._tag === \"None\" ? Effect.succeedNone : Effect.fail(o.value)\n  )\n\n/** @internal */\nexport const combine = dual<\n  <A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>,\n  <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n  ) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>\n>(4, <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n  self: Stream.Stream<A, E, R>,\n  that: Stream.Stream<A2, E2, R2>,\n  s: S,\n  f: (\n    s: S,\n    pullLeft: Effect.Effect<A, Option.Option<E>, R3>,\n    pullRight: Effect.Effect<A2, Option.Option<E2>, R4>\n  ) => Effect.Effect<Exit.Exit<readonly [A3, S], Option.Option<E2 | E>>, never, R5>\n): Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R> => {\n  function producer<Err, Elem>(\n    handoff: Handoff.Handoff<Exit.Exit<Elem, Option.Option<Err>>>,\n    latch: Handoff.Handoff<void>\n  ): Channel.Channel<never, Elem, never, Err, unknown, unknown, R> {\n    return core.fromEffect(Handoff.take(latch)).pipe(\n      channel.zipRight(core.readWithCause({\n        onInput: (input) =>\n          core.flatMap(\n            core.fromEffect(\n              Handoff.offer<Exit.Exit<Elem, Option.Option<Err>>>(\n                handoff,\n                Exit.succeed(input)\n              )\n            ),\n            () => producer(handoff, latch)\n          ),\n        onFailure: (cause) =>\n          core.fromEffect(\n            Handoff.offer<Exit.Exit<Elem, Option.Option<Err>>>(\n              handoff,\n              Exit.failCause(pipe(cause, Cause.map(Option.some)))\n            )\n          ),\n        onDone: () =>\n          core.flatMap(\n            core.fromEffect(\n              Handoff.offer<Exit.Exit<Elem, Option.Option<Err>>>(\n                handoff,\n                Exit.fail(Option.none())\n              )\n            ),\n            () => producer(handoff, latch)\n          )\n      }))\n    )\n  }\n  return new StreamImpl(\n    channel.unwrapScopedWith((scope) =>\n      Effect.all([\n        Handoff.make<Exit.Exit<A, Option.Option<E>>>(),\n        Handoff.make<Exit.Exit<A2, Option.Option<E2>>>(),\n        Handoff.make<void>(),\n        Handoff.make<void>()\n      ]).pipe(\n        Effect.tap(([left, _, latchL]) =>\n          toChannel(self).pipe(\n            channel.concatMap(channel.writeChunk),\n            core.pipeTo(producer(left, latchL)),\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ),\n        Effect.tap(([, right, _, rightL]) =>\n          toChannel(that).pipe(\n            channel.concatMap(channel.writeChunk),\n            core.pipeTo(producer(right, rightL)),\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ),\n        Effect.map(([left, right, latchL, latchR]) => {\n          const pullLeft = Handoff.offer<void>(latchL, void 0).pipe(\n            Effect.zipRight(Handoff.take(left).pipe(Effect.flatMap(identity)))\n          )\n          const pullRight = Handoff.offer<void>(latchR, void 0).pipe(\n            Effect.zipRight(Handoff.take(right).pipe(Effect.flatMap(identity)))\n          )\n          return toChannel(unfoldEffect(s, (s) => Effect.flatMap(f(s, pullLeft, pullRight), unsome)))\n        })\n      )\n    )\n  )\n})\n\n/** @internal */\nexport const combineChunks = dual<\n  <A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>,\n  <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    s: S,\n    f: (\n      s: S,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n    ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n  ) => Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R>\n>(4, <R, A2, E2, R2, S, R3, E, A, R4, R5, A3>(\n  self: Stream.Stream<A, E, R>,\n  that: Stream.Stream<A2, E2, R2>,\n  s: S,\n  f: (\n    s: S,\n    pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R3>,\n    pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R4>\n  ) => Effect.Effect<Exit.Exit<readonly [Chunk.Chunk<A3>, S], Option.Option<E2 | E>>, never, R5>\n): Stream.Stream<A3, E2 | E, R2 | R3 | R4 | R5 | R> => {\n  const producer = <Err, Elem>(\n    handoff: Handoff.Handoff<Take.Take<Elem, Err>>,\n    latch: Handoff.Handoff<void>\n  ): Channel.Channel<never, Chunk.Chunk<Elem>, never, Err, unknown, unknown, R> =>\n    channel.zipRight(\n      core.fromEffect(Handoff.take(latch)),\n      core.readWithCause({\n        onInput: (input) =>\n          core.flatMap(\n            core.fromEffect(pipe(\n              handoff,\n              Handoff.offer<Take.Take<Elem, Err>>(InternalTake.chunk(input))\n            )),\n            () => producer(handoff, latch)\n          ),\n        onFailure: (cause) =>\n          core.fromEffect(\n            Handoff.offer<Take.Take<Elem, Err>>(\n              handoff,\n              InternalTake.failCause(cause)\n            )\n          ),\n        onDone: (): Channel.Channel<never, Chunk.Chunk<Elem>, never, Err, unknown, unknown, R> =>\n          core.fromEffect(Handoff.offer<Take.Take<Elem, Err>>(handoff, InternalTake.end))\n      })\n    )\n  return new StreamImpl(\n    channel.unwrapScopedWith((scope) =>\n      Effect.all([\n        Handoff.make<Take.Take<A, E>>(),\n        Handoff.make<Take.Take<A2, E2>>(),\n        Handoff.make<void>(),\n        Handoff.make<void>()\n      ]).pipe(\n        Effect.tap(([left, _, latchL]) =>\n          core.pipeTo(toChannel(self), producer(left, latchL)).pipe(\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ),\n        Effect.tap(([_, right, __, latchR]) =>\n          core.pipeTo(toChannel(that), producer(right, latchR)).pipe(\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ),\n        Effect.map(([left, right, latchL, latchR]) => {\n          const pullLeft = Handoff.offer<void>(latchL, void 0).pipe(\n            Effect.zipRight(Handoff.take(left).pipe(Effect.flatMap(InternalTake.done)))\n          )\n          const pullRight = Handoff.offer<void>(latchR, void 0).pipe(\n            Effect.zipRight(Handoff.take(right).pipe(Effect.flatMap(InternalTake.done)))\n          )\n          return toChannel(unfoldChunkEffect(s, (s) => Effect.flatMap(f(s, pullLeft, pullRight), unsome)))\n        })\n      )\n    )\n  )\n})\n\n/** @internal */\nexport const concat = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> =>\n    new StreamImpl<A2 | A, E2 | E, R2 | R>(pipe(toChannel(self), channel.zipRight(toChannel(that))))\n)\n\n/** @internal */\nexport const concatAll = <A, E, R>(streams: Chunk.Chunk<Stream.Stream<A, E, R>>): Stream.Stream<A, E, R> =>\n  suspend(() => pipe(streams, Chunk.reduce(empty as Stream.Stream<A, E, R>, (x, y) => concat(y)(x))))\n\n/** @internal */\nexport const cross: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<[AL, AR], EL | ER, RL | RR>\n  <AL, ER, RR, AR, EL, RL>(\n    left: Stream.Stream<AL, ER, RR>,\n    right: Stream.Stream<AR, EL, RL>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, ER, RR, AR, EL, RL>(\n    left: Stream.Stream<AL, ER, RR>,\n    right: Stream.Stream<AR, EL, RL>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR> => pipe(left, crossWith(right, (a, a2) => [a, a2]))\n)\n\n/** @internal */\nexport const crossLeft: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR> => pipe(left, crossWith(right, (a, _) => a))\n)\n\n/** @internal */\nexport const crossRight: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AR, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR> => flatMap(left, () => right)\n)\n\n/** @internal */\nexport const crossWith: {\n  <AR, ER, RR, AL, A>(\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<A, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR>\n} = dual(\n  3,\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR> => pipe(left, flatMap((a) => pipe(right, map((b) => f(a, b)))))\n)\n\n/** @internal */\nexport const debounce = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n    unwrapScopedWith((scope) =>\n      Effect.gen(function*() {\n        const handoff = yield* Handoff.make<HandoffSignal.HandoffSignal<A, E>>()\n\n        function enqueue(last: Chunk.Chunk<A>): Effect.Effect<\n          Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown>\n        > {\n          return Clock.sleep(duration).pipe(\n            Effect.as(last),\n            Effect.forkIn(scope),\n            Effect.map((fiber) => consumer(DebounceState.previous(fiber)))\n          )\n        }\n\n        const producer: Channel.Channel<never, Chunk.Chunk<A>, E, E, unknown, unknown> = core.readWithCause({\n          onInput: (input: Chunk.Chunk<A>) =>\n            Option.match(Chunk.last(input), {\n              onNone: () => producer,\n              onSome: (elem) =>\n                core.fromEffect(Handoff.offer(handoff, HandoffSignal.emit(Chunk.of(elem)))).pipe(\n                  core.flatMap(() => producer)\n                )\n            }),\n          onFailure: (cause) =>\n            core.fromEffect(\n              Handoff.offer<HandoffSignal.HandoffSignal<A, E>>(handoff, HandoffSignal.halt(cause))\n            ),\n          onDone: () =>\n            core.fromEffect(\n              Handoff.offer<HandoffSignal.HandoffSignal<A, E>>(\n                handoff,\n                HandoffSignal.end(SinkEndReason.UpstreamEnd)\n              )\n            )\n        })\n\n        function consumer(\n          state: DebounceState.DebounceState<A, E>\n        ): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown> {\n          switch (state._tag) {\n            case DebounceState.OP_NOT_STARTED: {\n              return channel.unwrap(\n                Handoff.take(handoff).pipe(\n                  Effect.map((signal) => {\n                    switch (signal._tag) {\n                      case HandoffSignal.OP_EMIT: {\n                        return channel.unwrap(enqueue(signal.elements))\n                      }\n                      case HandoffSignal.OP_HALT: {\n                        return core.failCause(signal.cause)\n                      }\n                      case HandoffSignal.OP_END: {\n                        return core.void\n                      }\n                    }\n                  })\n                )\n              )\n            }\n            case DebounceState.OP_PREVIOUS: {\n              return channel.unwrap(\n                Handoff.take(handoff).pipe(\n                  Effect.forkIn(scope),\n                  Effect.flatMap((handoffFiber) =>\n                    Effect.raceWith(Fiber.join(state.fiber), Fiber.join(handoffFiber), {\n                      onSelfDone: (leftExit, current) =>\n                        Exit.match(leftExit, {\n                          onFailure: (cause) =>\n                            Fiber.interrupt(current).pipe(\n                              Effect.as(core.failCause(cause))\n                            ),\n                          onSuccess: (chunk) =>\n                            Fiber.interrupt(current).pipe(\n                              Effect.zipRight(Effect.succeed(\n                                core.write(chunk).pipe(\n                                  core.flatMap(() => consumer(DebounceState.current(handoffFiber)))\n                                )\n                              ))\n                            )\n                        }),\n                      onOtherDone: (rightExit, previous) =>\n                        Exit.match(rightExit, {\n                          onFailure: (cause) =>\n                            Fiber.interrupt(previous).pipe(\n                              Effect.as(core.failCause(cause))\n                            ),\n                          onSuccess: (signal) => {\n                            switch (signal._tag) {\n                              case HandoffSignal.OP_EMIT: {\n                                return Fiber.interrupt(previous).pipe(\n                                  Effect.zipRight(enqueue(signal.elements))\n                                )\n                              }\n                              case HandoffSignal.OP_HALT: {\n                                return Fiber.interrupt(previous).pipe(\n                                  Effect.as(core.failCause(signal.cause))\n                                )\n                              }\n                              case HandoffSignal.OP_END: {\n                                return Fiber.join(previous).pipe(\n                                  Effect.map((chunk) =>\n                                    core.write(chunk).pipe(\n                                      channel.zipRight(core.void)\n                                    )\n                                  )\n                                )\n                              }\n                            }\n                          }\n                        })\n                    })\n                  )\n                )\n              )\n            }\n            case DebounceState.OP_CURRENT: {\n              return channel.unwrap(\n                Fiber.join(state.fiber).pipe(\n                  Effect.map((signal) => {\n                    switch (signal._tag) {\n                      case HandoffSignal.OP_EMIT: {\n                        return channel.unwrap(enqueue(signal.elements))\n                      }\n                      case HandoffSignal.OP_HALT: {\n                        return core.failCause(signal.cause)\n                      }\n                      case HandoffSignal.OP_END: {\n                        return core.void\n                      }\n                    }\n                  })\n                )\n              )\n            }\n          }\n        }\n\n        return scopedWith((scope) =>\n          core.pipeTo(toChannel(self), producer).pipe(\n            channelExecutor.runIn(scope),\n            Effect.forkIn(scope)\n          )\n        ).pipe(crossRight(new StreamImpl(consumer(DebounceState.notStarted))))\n      })\n    )\n)\n\n/** @internal */\nexport const die = (defect: unknown): Stream.Stream<never> => fromEffect(Effect.die(defect))\n\n/** @internal */\nexport const dieSync = (evaluate: LazyArg<unknown>): Stream.Stream<never> => fromEffect(Effect.dieSync(evaluate))\n\n/** @internal */\nexport const dieMessage = (message: string): Stream.Stream<never> => fromEffect(Effect.dieMessage(message))\n\n/** @internal */\nexport const distributedWith = dual<\n  <N extends number, A>(\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>,\n    never,\n    Scope.Scope | R\n  >,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => Effect.Effect<\n    TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>,\n    never,\n    Scope.Scope | R\n  >\n>(\n  2,\n  <A, E, R, N extends number>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly size: N\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ): Effect.Effect<\n    TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>,\n    never,\n    Scope.Scope | R\n  > =>\n    pipe(\n      Deferred.make<(a: A) => Effect.Effect<Predicate<number>>>(),\n      Effect.flatMap((deferred) =>\n        pipe(\n          self,\n          distributedWithDynamic({\n            maximumLag: options.maximumLag,\n            decide: (a) => Effect.flatMap(Deferred.await(deferred), (f) => f(a))\n          }),\n          Effect.flatMap((next) =>\n            pipe(\n              Effect.all(\n                Chunk.map(\n                  Chunk.range(0, options.size - 1),\n                  (id) => Effect.map(next, ([key, queue]) => [[key, id], queue] as const)\n                )\n              ),\n              Effect.map(Chunk.unsafeFromArray),\n              Effect.flatMap((entries) => {\n                const [mappings, queues] = Chunk.reduceRight(\n                  entries,\n                  [\n                    new Map<number, number>(),\n                    Chunk.empty<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>()\n                  ] as const,\n                  ([mappings, queues], [mapping, queue]) =>\n                    [\n                      mappings.set(mapping[0], mapping[1]),\n                      pipe(queues, Chunk.prepend(queue))\n                    ] as const\n                )\n                return pipe(\n                  Deferred.succeed(deferred, (a: A) =>\n                    Effect.map(options.decide(a), (f) => (key: number) => pipe(f(mappings.get(key)!)))),\n                  Effect.as(\n                    Array.from(queues) as TupleOf<N, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>>\n                  )\n                )\n              })\n            )\n          )\n        )\n      )\n    )\n)\n\n/** @internal */\nconst distributedWithDynamicId = { ref: 0 }\n\nconst newDistributedWithDynamicId = () => {\n  const current = distributedWithDynamicId.ref\n  distributedWithDynamicId.ref = current + 1\n  return current\n}\n\n/** @internal */\nexport const distributedWithDynamic = dual<\n  <A>(\n    options: {\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly maximumLag: number\n      readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n    }\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options: {\n    readonly maximumLag: number\n    readonly decide: (a: A) => Effect.Effect<Predicate<number>>\n  }\n): Effect.Effect<\n  Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n  never,\n  Scope.Scope | R\n> => distributedWithDynamicCallback(self, options.maximumLag, options.decide, () => Effect.void))\n\n/** @internal */\nexport const distributedWithDynamicCallback = dual<\n  <A, E, X>(\n    maximumLag: number,\n    decide: (a: A) => Effect.Effect<Predicate<number>>,\n    done: (exit: Exit.Exit<never, Option.Option<E>>) => Effect.Effect<X>\n  ) => <R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >,\n  <A, E, R, X>(\n    self: Stream.Stream<A, E, R>,\n    maximumLag: number,\n    decide: (a: A) => Effect.Effect<Predicate<number>>,\n    done: (exit: Exit.Exit<never, Option.Option<E>>) => Effect.Effect<X>\n  ) => Effect.Effect<\n    Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n    never,\n    Scope.Scope | R\n  >\n>(4, <A, E, R, X>(\n  self: Stream.Stream<A, E, R>,\n  maximumLag: number,\n  decide: (a: A) => Effect.Effect<Predicate<number>>,\n  done: (exit: Exit.Exit<never, Option.Option<E>>) => Effect.Effect<X>\n): Effect.Effect<\n  Effect.Effect<[number, Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>]>,\n  never,\n  Scope.Scope | R\n> =>\n  pipe(\n    Effect.acquireRelease(\n      Ref.make<Map<number, Queue.Queue<Exit.Exit<A, Option.Option<E>>>>>(new Map()),\n      (ref, _) => pipe(Ref.get(ref), Effect.flatMap((queues) => pipe(queues.values(), Effect.forEach(Queue.shutdown))))\n    ),\n    Effect.flatMap((queuesRef) =>\n      Effect.gen(function*($) {\n        const offer = (a: A): Effect.Effect<void> =>\n          pipe(\n            decide(a),\n            Effect.flatMap((shouldProcess) =>\n              pipe(\n                Ref.get(queuesRef),\n                Effect.flatMap((queues) =>\n                  pipe(\n                    queues.entries(),\n                    Effect.reduce(Chunk.empty<number>(), (acc, [id, queue]) => {\n                      if (shouldProcess(id)) {\n                        return pipe(\n                          Queue.offer(queue, Exit.succeed(a)),\n                          Effect.matchCauseEffect({\n                            onFailure: (cause) =>\n                              // Ignore all downstream queues that were shut\n                              // down and remove them later\n                              Cause.isInterrupted(cause) ?\n                                Effect.succeed(pipe(acc, Chunk.prepend(id))) :\n                                Effect.failCause(cause),\n                            onSuccess: () => Effect.succeed(acc)\n                          })\n                        )\n                      }\n                      return Effect.succeed(acc)\n                    }),\n                    Effect.flatMap((ids) => {\n                      if (Chunk.isNonEmpty(ids)) {\n                        return pipe(\n                          Ref.update(queuesRef, (map) => {\n                            for (const id of ids) {\n                              map.delete(id)\n                            }\n                            return map\n                          })\n                        )\n                      }\n                      return Effect.void\n                    })\n                  )\n                )\n              )\n            ),\n            Effect.asVoid\n          )\n        const queuesLock = yield* $(Effect.makeSemaphore(1))\n        const newQueue = yield* $(\n          Ref.make<Effect.Effect<[number, Queue.Queue<Exit.Exit<A, Option.Option<E>>>]>>(\n            pipe(\n              Queue.bounded<Exit.Exit<A, Option.Option<E>>>(maximumLag),\n              Effect.flatMap((queue) => {\n                const id = newDistributedWithDynamicId()\n                return pipe(\n                  Ref.update(queuesRef, (map) => map.set(id, queue)),\n                  Effect.as([id, queue])\n                )\n              })\n            )\n          )\n        )\n        const finalize = (endTake: Exit.Exit<never, Option.Option<E>>): Effect.Effect<void> =>\n          // Make sure that no queues are currently being added\n          queuesLock.withPermits(1)(\n            pipe(\n              Ref.set(\n                newQueue,\n                pipe(\n                  // All newly created queues should end immediately\n                  Queue.bounded<Exit.Exit<A, Option.Option<E>>>(1),\n                  Effect.tap((queue) => Queue.offer(queue, endTake)),\n                  Effect.flatMap((queue) => {\n                    const id = newDistributedWithDynamicId()\n                    return pipe(\n                      Ref.update(queuesRef, (map) => map.set(id, queue)),\n                      Effect.as(Tuple.make(id, queue))\n                    )\n                  })\n                )\n              ),\n              Effect.zipRight(\n                pipe(\n                  Ref.get(queuesRef),\n                  Effect.flatMap((map) =>\n                    pipe(\n                      Chunk.fromIterable(map.values()),\n                      Effect.forEach((queue) =>\n                        pipe(\n                          Queue.offer(queue, endTake),\n                          Effect.catchSomeCause((cause) =>\n                            Cause.isInterrupted(cause) ? Option.some(Effect.void) : Option.none()\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              ),\n              Effect.zipRight(done(endTake)),\n              Effect.asVoid\n            )\n          )\n        yield* $(\n          self,\n          runForEachScoped(offer),\n          Effect.matchCauseEffect({\n            onFailure: (cause) => finalize(Exit.failCause(pipe(cause, Cause.map(Option.some)))),\n            onSuccess: () => finalize(Exit.fail(Option.none()))\n          }),\n          Effect.forkScoped\n        )\n        return queuesLock.withPermits(1)(\n          Effect.flatten(Ref.get(newQueue))\n        )\n      })\n    )\n  ))\n\n/** @internal */\nexport const drain = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<never, E, R> =>\n  new StreamImpl(channel.drain(toChannel(self)))\n\n/** @internal */\nexport const drainFork = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> =>\n    fromEffect(Deferred.make<never, E2>()).pipe(flatMap((backgroundDied) =>\n      scopedWith((scope) =>\n        toChannel(that).pipe(\n          channel.drain,\n          channelExecutor.runIn(scope),\n          Effect.catchAllCause((cause) => Deferred.failCause(backgroundDied, cause)),\n          Effect.forkIn(scope)\n        )\n      ).pipe(crossRight(interruptWhenDeferred(self, backgroundDied)))\n    ))\n)\n\n/** @internal */\nexport const drop = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  const loop = (r: number): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const dropped = pipe(input, Chunk.drop(r))\n        const leftover = Math.max(0, r - input.length)\n        const more = Chunk.isEmpty(input) || leftover > 0\n        if (more) {\n          return loop(leftover)\n        }\n        return pipe(\n          core.write(dropped),\n          channel.zipRight(channel.identityChannel<Chunk.Chunk<A>, never, unknown>())\n        )\n      },\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop(n))))\n})\n\n/** @internal */\nexport const dropRight = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  if (n <= 0) {\n    return identityStream()\n  }\n  return suspend(() => {\n    const queue = new RingBuffer<A>(n)\n    const reader: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const outputs = pipe(\n          input,\n          Chunk.filterMap((elem) => {\n            const head = queue.head()\n            queue.put(elem)\n            return head\n          })\n        )\n        return pipe(core.write(outputs), core.flatMap(() => reader))\n      },\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(reader)))\n  })\n})\n\n/** @internal */\nexport const dropUntil = dual<\n  <A>(predicate: Predicate<NoInfer<A>>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> =>\n    drop(dropWhile(self, (a) => !predicate(a)), 1)\n)\n\n/** @internal */\nexport const dropUntilEffect = dual<\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Effect.dropUntil(input, predicate),\n          Effect.map(Chunk.unsafeFromArray),\n          Effect.map((leftover) => {\n            const more = Chunk.isEmpty(leftover)\n            if (more) {\n              return core.suspend(() => loop)\n            }\n            return pipe(\n              core.write(leftover),\n              channel.zipRight(channel.identityChannel<Chunk.Chunk<A>, E | E2, unknown>())\n            )\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n  }\n)\n\n/** @internal */\nexport const dropWhile = dual<\n  <A>(predicate: Predicate<NoInfer<A>>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) => {\n      const output = Chunk.dropWhile(input, predicate)\n      if (Chunk.isEmpty(output)) {\n        return core.suspend(() => loop)\n      }\n      return channel.zipRight(\n        core.write(output),\n        channel.identityChannel<Chunk.Chunk<A>, never, unknown>()\n      )\n    },\n    onFailure: core.fail,\n    onDone: core.succeedNow\n  })\n  return new StreamImpl(channel.pipeToOrFail(toChannel(self), loop))\n})\n\n/** @internal */\nexport const dropWhileEffect = dual<\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Effect.dropWhile(input, predicate),\n          Effect.map(Chunk.unsafeFromArray),\n          Effect.map((leftover) => {\n            const more = Chunk.isEmpty(leftover)\n            if (more) {\n              return core.suspend(() => loop)\n            }\n            return channel.zipRight(\n              core.write(leftover),\n              channel.identityChannel<Chunk.Chunk<A>, E | E2, unknown>()\n            )\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(channel.pipeToOrFail(\n      toChannel(self),\n      loop\n    ))\n  }\n)\n\n/** @internal */\nexport const either = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<Either.Either<A, E>, never, R> =>\n  pipe(self, map(Either.right), catchAll((error) => make(Either.left(error))))\n\n/** @internal */\nexport const empty: Stream.Stream<never> = new StreamImpl(core.void)\n\n/** @internal */\nexport const ensuring = dual<\n  <X, R2>(\n    finalizer: Effect.Effect<X, never, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, R2>(self: Stream.Stream<A, E, R>, finalizer: Effect.Effect<X, never, R2>) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, R2>(self: Stream.Stream<A, E, R>, finalizer: Effect.Effect<X, never, R2>): Stream.Stream<A, E, R2 | R> =>\n    new StreamImpl(pipe(toChannel(self), channel.ensuring(finalizer)))\n)\n\n/** @internal */\nexport const ensuringWith = dual<\n  <E, R2>(\n    finalizer: (exit: Exit.Exit<unknown, E>) => Effect.Effect<unknown, never, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R | R2>,\n  <A, E, R, R2>(\n    self: Stream.Stream<A, E, R>,\n    finalizer: (exit: Exit.Exit<unknown, E>) => Effect.Effect<unknown, never, R2>\n  ) => Stream.Stream<A, E, R | R2>\n>(2, (self, finalizer) => new StreamImpl(core.ensuringWith(toChannel(self), finalizer)))\n\n/** @internal */\nexport const context = <R>(): Stream.Stream<Context.Context<R>, never, R> => fromEffect(Effect.context<R>())\n\n/** @internal */\nexport const contextWith = <R, A>(f: (env: Context.Context<R>) => A): Stream.Stream<A, never, R> =>\n  pipe(context<R>(), map(f))\n\n/** @internal */\nexport const contextWithEffect = <R0, A, E, R>(\n  f: (env: Context.Context<R0>) => Effect.Effect<A, E, R>\n): Stream.Stream<A, E, R0 | R> => pipe(context<R0>(), mapEffectSequential(f))\n\n/** @internal */\nexport const contextWithStream = <R0, A, E, R>(\n  f: (env: Context.Context<R0>) => Stream.Stream<A, E, R>\n): Stream.Stream<A, E, R0 | R> => pipe(context<R0>(), flatMap(f))\n\n/** @internal */\nexport const execute = <X, E, R>(effect: Effect.Effect<X, E, R>): Stream.Stream<never, E, R> =>\n  drain(fromEffect(effect))\n\n/** @internal */\nexport const fail = <E>(error: E): Stream.Stream<never, E> => fromEffectOption(Effect.fail(Option.some(error)))\n\n/** @internal */\nexport const failSync = <E>(evaluate: LazyArg<E>): Stream.Stream<never, E> =>\n  fromEffectOption(Effect.failSync(() => Option.some(evaluate())))\n\n/** @internal */\nexport const failCause = <E>(cause: Cause.Cause<E>): Stream.Stream<never, E> => fromEffect(Effect.failCause(cause))\n\n/** @internal */\nexport const failCauseSync = <E>(evaluate: LazyArg<Cause.Cause<E>>): Stream.Stream<never, E> =>\n  fromEffect(Effect.failCauseSync(evaluate))\n\n/** @internal */\nexport const filter: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>\n  <A, B extends A>(predicate: Predicate<B>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R, B extends A>(self: Stream.Stream<A, E, R>, refinement: Refinement<A, B>): Stream.Stream<B, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>) => mapChunks(self, Chunk.filter(predicate))\n)\n\n/** @internal */\nexport const filterEffect = dual<\n  <A, E2, R2>(\n    f: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | R> => {\n    const loop = (\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (input) => loop(input[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeed\n        })\n      } else {\n        return pipe(\n          f(next.value),\n          Effect.map((bool) =>\n            bool ?\n              pipe(core.write(Chunk.of(next.value)), core.flatMap(() => loop(iterator))) :\n              loop(iterator)\n          ),\n          channel.unwrap\n        )\n      }\n    }\n    return new StreamImpl(\n      core.suspend(() => pipe(toChannel(self), core.pipeTo(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n    )\n  }\n)\n\n/** @internal */\nexport const filterMap = dual<\n  <A, B>(pf: (a: A) => Option.Option<B>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<B>) => Stream.Stream<B, E, R>\n>(\n  2,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<B>): Stream.Stream<B, E, R> =>\n    mapChunks(self, Chunk.filterMap(pf))\n)\n\n/** @internal */\nexport const filterMapEffect = dual<\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    suspend(() => {\n      const loop = (\n        iterator: Iterator<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> => {\n        const next = iterator.next()\n        if (next.done) {\n          return core.readWithCause({\n            onInput: (input) => loop(input[Symbol.iterator]()),\n            onFailure: core.failCause,\n            onDone: core.succeed\n          })\n        } else {\n          return pipe(\n            pf(next.value),\n            Option.match({\n              onNone: () => Effect.sync(() => loop(iterator)),\n              onSome: Effect.map((a2) => core.flatMap(core.write(Chunk.of(a2)), () => loop(iterator)))\n            }),\n            channel.unwrap\n          )\n        }\n      }\n      return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n    })\n)\n\n/** @internal */\nexport const filterMapWhile = dual<\n  <A, A2>(\n    pf: (a: A) => Option.Option<A2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<A2>) => Stream.Stream<A2, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, pf: (a: A) => Option.Option<A2>) => {\n    const loop: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E, E, unknown, unknown> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const mapped = Chunk.filterMapWhile(input, pf)\n        if (mapped.length === input.length) {\n          return pipe(core.write(mapped), core.flatMap(() => loop))\n        }\n        return core.write(mapped)\n      },\n      onFailure: core.fail,\n      onDone: core.succeed\n    })\n    return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n  }\n)\n\n/** @internal */\nexport const filterMapWhileEffect = dual<\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (a: A) => Option.Option<Effect.Effect<A2, E2, R2>>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    suspend(() => {\n      const loop = (\n        iterator: Iterator<A>\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> => {\n        const next = iterator.next()\n        if (next.done) {\n          return core.readWithCause({\n            onInput: (input) => loop(input[Symbol.iterator]()),\n            onFailure: core.failCause,\n            onDone: core.succeed\n          })\n        } else {\n          return channel.unwrap(\n            Option.match(pf(next.value), {\n              onNone: () => Effect.succeed(core.void),\n              onSome: Effect.map(\n                (a2) => core.flatMap(core.write(Chunk.of(a2)), () => loop(iterator))\n              )\n            })\n          )\n        }\n      }\n      return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n    })\n)\n\n/** @internal */\nexport const finalizer = <R, X>(finalizer: Effect.Effect<X, never, R>): Stream.Stream<void, never, R> =>\n  acquireRelease(Effect.void, () => finalizer)\n\n/** @internal */\nexport const find: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R, B extends A>(self: Stream.Stream<A, E, R>, refinement: Refinement<A, B>): Stream.Stream<B, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown, R> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) =>\n      Option.match(Chunk.findFirst(input, predicate), {\n        onNone: () => loop,\n        onSome: (n) => core.write(Chunk.of(n))\n      }),\n    onFailure: core.fail,\n    onDone: () => core.void\n  })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop)))\n})\n\n/** @internal */\nexport const findEffect: {\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          Effect.findFirst(input, predicate),\n          Effect.map(Option.match({\n            onNone: () => loop,\n            onSome: (n) => core.write(Chunk.of(n))\n          })),\n          channel.unwrap\n        ),\n      onFailure: core.fail,\n      onDone: () => core.void\n    })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop)))\n  }\n)\n\n/** @internal */\nexport const flatMap = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    }\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  (args) => isStream(args[0]),\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n      readonly switch?: boolean | undefined\n    }\n  ): Stream.Stream<A2, E | E2, R | R2> => {\n    const bufferSize = options?.bufferSize ?? 16\n\n    if (options?.switch) {\n      return matchConcurrency(\n        options?.concurrency,\n        () => flatMapParSwitchBuffer(self, 1, bufferSize, f),\n        (n) => flatMapParSwitchBuffer(self, n, bufferSize, f)\n      )\n    }\n\n    return matchConcurrency(\n      options?.concurrency,\n      () =>\n        new StreamImpl(\n          channel.concatMap(\n            toChannel(self),\n            (as) =>\n              pipe(\n                as,\n                Chunk.map((a) => toChannel(f(a))),\n                Chunk.reduce(\n                  core.void as Channel.Channel<Chunk.Chunk<A2>, unknown, E2, unknown, unknown, unknown, R2>,\n                  (left, right) => pipe(left, channel.zipRight(right))\n                )\n              )\n          )\n        ),\n      (_) =>\n        new StreamImpl(\n          pipe(\n            toChannel(self),\n            channel.concatMap(channel.writeChunk),\n            channel.mergeMap((out) => toChannel(f(out)), options as any)\n          )\n        )\n    )\n  }\n)\n\n/** @internal */\nexport const matchConcurrency = <A>(\n  concurrency: number | \"unbounded\" | undefined,\n  sequential: () => A,\n  bounded: (n: number) => A\n) => {\n  switch (concurrency) {\n    case undefined:\n      return sequential()\n    case \"unbounded\":\n      return bounded(Number.MAX_SAFE_INTEGER)\n    default:\n      return concurrency > 1 ? bounded(concurrency) : sequential()\n  }\n}\n\nconst flatMapParSwitchBuffer = dual<\n  <A, A2, E2, R2>(\n    n: number,\n    bufferSize: number,\n    f: (a: A) => Stream.Stream<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    bufferSize: number,\n    f: (a: A) => Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  4,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    bufferSize: number,\n    f: (a: A) => Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    new StreamImpl(\n      pipe(\n        toChannel(self),\n        channel.concatMap(channel.writeChunk),\n        channel.mergeMap((out) => toChannel(f(out)), {\n          concurrency: n,\n          mergeStrategy: MergeStrategy.BufferSliding(),\n          bufferSize\n        })\n      )\n    )\n)\n\n/** @internal */\nexport const flatten = dual<\n  (options?: {\n    readonly concurrency?: number | \"unbounded\" | undefined\n    readonly bufferSize?: number | undefined\n  }) => <A, E2, R2, E, R>(\n    self: Stream.Stream<Stream.Stream<A, E2, R2>, E, R>\n  ) => Stream.Stream<A, E | E2, R | R2>,\n  <A, E2, R2, E, R>(\n    self: Stream.Stream<Stream.Stream<A, E2, R2>, E, R>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n    }\n  ) => Stream.Stream<A, E | E2, R | R2>\n>((args) => isStream(args[0]), (self, options) => flatMap(self, identity, options))\n\n/** @internal */\nexport const flattenChunks = <A, E, R>(self: Stream.Stream<Chunk.Chunk<A>, E, R>): Stream.Stream<A, E, R> => {\n  const flatten: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<Chunk.Chunk<A>>, E, E, unknown, unknown> = core\n    .readWithCause({\n      onInput: (chunks: Chunk.Chunk<Chunk.Chunk<A>>) =>\n        core.flatMap(\n          channel.writeChunk(chunks),\n          () => flatten\n        ),\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(flatten)))\n}\n\n/** @internal */\nexport const flattenEffect = dual<\n  (\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly unordered?: boolean | undefined\n    }\n  ) => <A, E2, R2, E, R>(\n    self: Stream.Stream<Effect.Effect<A, E2, R2>, E, R>\n  ) => Stream.Stream<A, E | E2, R | R2>,\n  <A, E2, R2, E, R>(\n    self: Stream.Stream<Effect.Effect<A, E2, R2>, E, R>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly unordered?: boolean | undefined\n    }\n  ) => Stream.Stream<A, E | E2, R | R2>\n>(\n  (args) => isStream(args[0]),\n  (self, options) =>\n    options?.unordered ?\n      flatMap(self, (a) => fromEffect(a), { concurrency: options.concurrency }) :\n      matchConcurrency(\n        options?.concurrency,\n        () => mapEffectSequential(self, identity),\n        (n) =>\n          new StreamImpl(\n            pipe(\n              toChannel(self),\n              channel.concatMap(channel.writeChunk),\n              channel.mapOutEffectPar(identity, n),\n              channel.mapOut(Chunk.of)\n            )\n          )\n      )\n)\n\n/** @internal */\nexport const flattenExitOption = <A, E2, E, R>(\n  self: Stream.Stream<Exit.Exit<A, Option.Option<E2>>, E, R>\n): Stream.Stream<A, E | E2, R> => {\n  const processChunk = (\n    chunk: Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>,\n    cont: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>, E | E2, E, unknown, unknown, R>\n  ) => {\n    const [toEmit, rest] = pipe(chunk, Chunk.splitWhere((exit) => !Exit.isSuccess(exit)))\n    const next = pipe(\n      Chunk.head(rest),\n      Option.match({\n        onNone: () => cont,\n        onSome: Exit.match({\n          onFailure: (cause) =>\n            Option.match(Cause.flipCauseOption(cause), {\n              onNone: () => core.void,\n              onSome: core.failCause\n            }),\n          onSuccess: () => core.void\n        })\n      })\n    )\n    return pipe(\n      core.write(pipe(\n        toEmit,\n        Chunk.filterMap((exit) =>\n          Exit.isSuccess(exit) ?\n            Option.some(exit.value) :\n            Option.none()\n        )\n      )),\n      core.flatMap(() => next)\n    )\n  }\n  const process: Channel.Channel<\n    Chunk.Chunk<A>,\n    Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>,\n    E | E2,\n    E,\n    unknown,\n    unknown,\n    R\n  > = core.readWithCause({\n    onInput: (chunk: Chunk.Chunk<Exit.Exit<A, Option.Option<E2>>>) => processChunk(chunk, process),\n    onFailure: (cause) => core.failCause<E | E2>(cause),\n    onDone: () => core.void\n  })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(process)))\n}\n\n/** @internal */\nexport const flattenIterables = <A, E, R>(self: Stream.Stream<Iterable<A>, E, R>): Stream.Stream<A, E, R> =>\n  pipe(self, map(Chunk.fromIterable), flattenChunks)\n\n/** @internal */\nexport const flattenTake = <A, E2, E, R>(self: Stream.Stream<Take.Take<A, E2>, E, R>): Stream.Stream<A, E | E2, R> =>\n  flattenChunks(flattenExitOption(pipe(self, map((take) => take.exit))))\n\n/** @internal */\nexport const forever = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, E, R> =>\n  new StreamImpl(channel.repeated(toChannel(self)))\n\n/** @internal */\nexport const fromAsyncIterable = <A, E>(\n  iterable: AsyncIterable<A>,\n  onError: (e: unknown) => E\n) =>\n  pipe(\n    Effect.acquireRelease(\n      Effect.sync(() => iterable[Symbol.asyncIterator]()),\n      (iterator) => iterator.return ? Effect.promise(async () => iterator.return!()) : Effect.void\n    ),\n    Effect.map((iterator) =>\n      repeatEffectOption(pipe(\n        Effect.tryPromise({\n          try: async () => iterator.next(),\n          catch: (reason) => Option.some(onError(reason))\n        }),\n        Effect.flatMap((result) => result.done ? Effect.fail(Option.none()) : Effect.succeed(result.value))\n      ))\n    ),\n    unwrapScoped\n  )\n\n/** @internal */\nexport const fromChannel = <A, E, R>(\n  channel: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R>\n): Stream.Stream<A, E, R> => new StreamImpl(channel)\n\n/** @internal */\nexport const toChannel = <A, E, R>(\n  stream: Stream.Stream<A, E, R>\n): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> => {\n  if (\"channel\" in stream) {\n    return (stream as StreamImpl<A, E, R>).channel\n  } else if (Effect.isEffect(stream)) {\n    return toChannel(fromEffect(stream)) as any\n  } else {\n    throw new TypeError(`Expected a Stream.`)\n  }\n}\n\n/** @internal */\nexport const fromChunk = <A>(chunk: Chunk.Chunk<A>): Stream.Stream<A> =>\n  new StreamImpl(Chunk.isEmpty(chunk) ? core.void : core.write(chunk))\n\n/** @internal */\nexport const fromChunkPubSub: {\n  <A>(pubsub: PubSub.PubSub<Chunk.Chunk<A>>, options: {\n    readonly scoped: true\n    readonly shutdown?: boolean | undefined\n  }): Effect.Effect<Stream.Stream<A>, never, Scope.Scope>\n  <A>(pubsub: PubSub.PubSub<Chunk.Chunk<A>>, options?: {\n    readonly scoped?: false | undefined\n    readonly shutdown?: boolean | undefined\n  }): Stream.Stream<A>\n} = (pubsub, options): any => {\n  if (options?.scoped) {\n    const effect = Effect.map(PubSub.subscribe(pubsub), fromChunkQueue)\n    return options.shutdown ? Effect.map(effect, ensuring(PubSub.shutdown(pubsub))) : effect\n  }\n  const stream = flatMap(scoped(PubSub.subscribe(pubsub)), fromChunkQueue)\n  return options?.shutdown ? ensuring(stream, PubSub.shutdown(pubsub)) : stream\n}\n\n/** @internal */\nexport const fromChunkQueue = <A>(queue: Queue.Dequeue<Chunk.Chunk<A>>, options?: {\n  readonly shutdown?: boolean | undefined\n}): Stream.Stream<A> =>\n  pipe(\n    Queue.take(queue),\n    Effect.catchAllCause((cause) =>\n      pipe(\n        Queue.isShutdown(queue),\n        Effect.flatMap((isShutdown) =>\n          isShutdown && Cause.isInterrupted(cause) ?\n            pull.end() :\n            pull.failCause(cause)\n        )\n      )\n    ),\n    repeatEffectChunkOption,\n    options?.shutdown ? ensuring(Queue.shutdown(queue)) : identity\n  )\n\n/** @internal */\nexport const fromChunks = <A>(\n  ...chunks: Array<Chunk.Chunk<A>>\n): Stream.Stream<A> => pipe(fromIterable(chunks), flatMap(fromChunk))\n\n/** @internal */\nexport const fromEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Stream.Stream<A, E, R> =>\n  pipe(effect, Effect.mapError(Option.some), fromEffectOption)\n\n/** @internal */\nexport const fromEffectOption = <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>): Stream.Stream<A, E, R> =>\n  new StreamImpl(\n    channel.unwrap(\n      Effect.match(effect, {\n        onFailure: Option.match({\n          onNone: () => core.void,\n          onSome: core.fail\n        }),\n        onSuccess: (a) => core.write(Chunk.of(a))\n      })\n    )\n  )\n\n/** @internal */\nexport const fromPubSub: {\n  <A>(pubsub: PubSub.PubSub<A>, options: {\n    readonly scoped: true\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }): Effect.Effect<Stream.Stream<A>, never, Scope.Scope>\n  <A>(pubsub: PubSub.PubSub<A>, options?: {\n    readonly scoped?: false | undefined\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }): Stream.Stream<A>\n} = (pubsub, options): any => {\n  const maxChunkSize = options?.maxChunkSize ?? DefaultChunkSize\n\n  if (options?.scoped) {\n    const effect = Effect.map(\n      PubSub.subscribe(pubsub),\n      (queue) => fromQueue(queue, { maxChunkSize, shutdown: true })\n    )\n\n    return options.shutdown ? Effect.map(effect, ensuring(PubSub.shutdown(pubsub))) : effect\n  }\n  const stream = flatMap(\n    scoped(PubSub.subscribe(pubsub)),\n    (queue) => fromQueue(queue, { maxChunkSize })\n  )\n  return options?.shutdown ? ensuring(stream, PubSub.shutdown(pubsub)) : stream\n}\n\n/** @internal */\nexport const fromTPubSub = <A>(pubsub: TPubSub.TPubSub<A>): Stream.Stream<A> => {\n  return unwrapScoped(Effect.map(\n    TPubSub.subscribeScoped(pubsub),\n    (queue) => fromTQueue(queue)\n  ))\n}\n\n/** @internal */\nexport const fromIterable = <A>(iterable: Iterable<A>): Stream.Stream<A> =>\n  suspend(() =>\n    Chunk.isChunk(iterable) ?\n      fromChunk(iterable) :\n      fromIteratorSucceed(iterable[Symbol.iterator]())\n  )\n\n/** @internal */\nexport const fromIterableEffect = <A, E, R>(\n  effect: Effect.Effect<Iterable<A>, E, R>\n): Stream.Stream<A, E, R> => pipe(effect, Effect.map(fromIterable), unwrap)\n\n/** @internal */\nexport const fromIteratorSucceed = <A>(\n  iterator: Iterator<A>,\n  maxChunkSize = DefaultChunkSize\n): Stream.Stream<A> => {\n  return pipe(\n    Effect.sync(() => {\n      let builder: Array<A> = []\n      const loop = (\n        iterator: Iterator<A>\n      ): Channel.Channel<Chunk.Chunk<A>, unknown, never, unknown, unknown, unknown> =>\n        pipe(\n          Effect.sync(() => {\n            let next: IteratorResult<A, any> = iterator.next()\n            if (maxChunkSize === 1) {\n              if (next.done) {\n                return core.void\n              }\n              return pipe(\n                core.write(Chunk.of(next.value)),\n                core.flatMap(() => loop(iterator))\n              )\n            }\n            builder = []\n            let count = 0\n            while (next.done === false) {\n              builder.push(next.value)\n              count = count + 1\n              if (count >= maxChunkSize) {\n                break\n              }\n              next = iterator.next()\n            }\n            if (count > 0) {\n              return pipe(\n                core.write(Chunk.unsafeFromArray(builder)),\n                core.flatMap(() => loop(iterator))\n              )\n            }\n            return core.void\n          }),\n          channel.unwrap\n        )\n      return new StreamImpl(loop(iterator))\n    }),\n    unwrap\n  )\n}\n\n/** @internal */\nexport const fromPull = <R, R2, E, A>(\n  effect: Effect.Effect<Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R2>, never, R | Scope.Scope>\n): Stream.Stream<A, E, Exclude<R, Scope.Scope> | R2> => pipe(effect, Effect.map(repeatEffectChunkOption), unwrapScoped)\n\n/** @internal */\nexport const fromQueue = <A>(\n  queue: Queue.Dequeue<A>,\n  options?: {\n    readonly maxChunkSize?: number | undefined\n    readonly shutdown?: boolean | undefined\n  }\n): Stream.Stream<A> =>\n  pipe(\n    Queue.takeBetween(queue, 1, options?.maxChunkSize ?? DefaultChunkSize),\n    Effect.catchAllCause((cause) =>\n      pipe(\n        Queue.isShutdown(queue),\n        Effect.flatMap((isShutdown) =>\n          isShutdown && Cause.isInterrupted(cause) ?\n            pull.end() :\n            pull.failCause(cause)\n        )\n      )\n    ),\n    repeatEffectChunkOption,\n    options?.shutdown ? ensuring(Queue.shutdown(queue)) : identity\n  )\n\n/** @internal */\nexport const fromTQueue = <A>(queue: TQueue.TDequeue<A>): Stream.Stream<A> =>\n  pipe(\n    TQueue.take(queue),\n    Effect.map(Chunk.of),\n    Effect.catchAllCause((cause) =>\n      pipe(\n        TQueue.isShutdown(queue),\n        Effect.flatMap((isShutdown) =>\n          isShutdown && Cause.isInterrupted(cause) ?\n            pull.end() :\n            pull.failCause(cause)\n        )\n      )\n    ),\n    repeatEffectChunkOption\n  )\n\n/** @internal */\nexport const fromSchedule = <A, R>(schedule: Schedule.Schedule<A, unknown, R>): Stream.Stream<A, never, R> =>\n  pipe(\n    Schedule.driver(schedule),\n    Effect.map((driver) => repeatEffectOption(driver.next(void 0))),\n    unwrap\n  )\n\n/** @internal */\nexport const fromReadableStream: {\n  <A, E>(\n    options: {\n      readonly evaluate: LazyArg<ReadableStream<A>>\n      readonly onError: (error: unknown) => E\n      readonly releaseLockOnEnd?: boolean | undefined\n    }\n  ): Stream.Stream<A, E>\n  <A, E>(\n    evaluate: LazyArg<ReadableStream<A>>,\n    onError: (error: unknown) => E\n  ): Stream.Stream<A, E>\n} = <A, E>(\n  ...args: [options: {\n    readonly evaluate: LazyArg<ReadableStream<A>>\n    readonly onError: (error: unknown) => E\n    readonly releaseLockOnEnd?: boolean | undefined\n  }] | [\n    evaluate: LazyArg<ReadableStream<A>>,\n    onError: (error: unknown) => E\n  ]\n): Stream.Stream<A, E> => {\n  const evaluate = args.length === 1 ? args[0].evaluate : args[0]\n  const onError = args.length === 1 ? args[0].onError : args[1]\n  const releaseLockOnEnd = args.length === 1 ? args[0].releaseLockOnEnd === true : false\n  return unwrapScoped(Effect.map(\n    Effect.acquireRelease(\n      Effect.sync(() => evaluate().getReader()),\n      (reader) =>\n        releaseLockOnEnd\n          ? Effect.sync(() => reader.releaseLock())\n          : Effect.promise(() => reader.cancel())\n    ),\n    (reader) =>\n      repeatEffectOption(\n        Effect.flatMap(\n          Effect.tryPromise({\n            try: () => reader.read(),\n            catch: (reason) => Option.some(onError(reason))\n          }),\n          ({ done, value }) => done ? Effect.fail(Option.none()) : Effect.succeed(value)\n        )\n      )\n  ))\n}\n\n/** @internal */\nexport const fromReadableStreamByob: {\n  <E>(\n    options: {\n      readonly evaluate: LazyArg<ReadableStream<Uint8Array>>\n      readonly onError: (error: unknown) => E\n      readonly bufferSize?: number | undefined\n      readonly releaseLockOnEnd?: boolean | undefined\n    }\n  ): Stream.Stream<Uint8Array, E>\n  <E>(\n    evaluate: LazyArg<ReadableStream<Uint8Array>>,\n    onError: (error: unknown) => E,\n    allocSize?: number\n  ): Stream.Stream<Uint8Array, E>\n} = <E>(\n  ...args: [options: {\n    readonly evaluate: LazyArg<ReadableStream<Uint8Array>>\n    readonly onError: (error: unknown) => E\n    readonly bufferSize?: number | undefined\n    readonly releaseLockOnEnd?: boolean | undefined\n  }] | [\n    evaluate: LazyArg<ReadableStream<Uint8Array>>,\n    onError: (error: unknown) => E,\n    allocSize?: number | undefined\n  ]\n): Stream.Stream<Uint8Array, E> => {\n  const evaluate = args.length === 1 ? args[0].evaluate : args[0]\n  const onError = args.length === 1 ? args[0].onError : args[1]\n  const allocSize = (args.length === 1 ? args[0].bufferSize : args[2]) ?? 4096\n  const releaseLockOnEnd = args.length === 1 ? args[0].releaseLockOnEnd === true : false\n  return unwrapScoped(Effect.map(\n    Effect.acquireRelease(\n      Effect.sync(() => evaluate().getReader({ mode: \"byob\" })),\n      (reader) => releaseLockOnEnd ? Effect.sync(() => reader.releaseLock()) : Effect.promise(() => reader.cancel())\n    ),\n    (reader) =>\n      catchAll(\n        forever(readChunkStreamByobReader(reader, onError, allocSize)),\n        (error) => error === EOF ? empty : fail(error)\n      )\n  ))\n}\n\nconst EOF = Symbol.for(\"effect/Stream/EOF\")\n\nconst readChunkStreamByobReader = <E>(\n  reader: ReadableStreamBYOBReader,\n  onError: (error: unknown) => E,\n  size: number\n): Stream.Stream<Uint8Array, E | typeof EOF> => {\n  const buffer = new ArrayBuffer(size)\n  return paginateEffect(0, (offset) =>\n    Effect.flatMap(\n      Effect.tryPromise({\n        try: () => reader.read(new Uint8Array(buffer, offset, buffer.byteLength - offset)),\n        catch: (reason) => onError(reason)\n      }),\n      ({ done, value }) => {\n        if (done) {\n          return Effect.fail(EOF)\n        }\n        const newOffset = offset + value.byteLength\n        return Effect.succeed([\n          value,\n          newOffset >= buffer.byteLength\n            ? Option.none<number>()\n            : Option.some(newOffset)\n        ])\n      }\n    ))\n}\n\n/** @internal */\nexport const groupAdjacentBy = dual<\n  <A, K>(\n    f: (a: A) => K\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<[K, Chunk.NonEmptyChunk<A>], E, R>,\n  <A, E, R, K>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => K\n  ) => Stream.Stream<[K, Chunk.NonEmptyChunk<A>], E, R>\n>(\n  2,\n  <A, E, R, K>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => K\n  ): Stream.Stream<[K, Chunk.NonEmptyChunk<A>], E, R> => {\n    type Output = [K, Chunk.NonEmptyChunk<A>]\n    const groupAdjacentByChunk = (\n      state: Option.Option<Output>,\n      chunk: Chunk.Chunk<A>\n    ): [Option.Option<Output>, Chunk.Chunk<Output>] => {\n      if (Chunk.isEmpty(chunk)) {\n        return [state, Chunk.empty()]\n      }\n      const builder: Array<Output> = []\n      let from = 0\n      let until = 0\n      let key: K | undefined = undefined\n      let previousChunk = Chunk.empty<A>()\n      switch (state._tag) {\n        case \"Some\": {\n          const tuple = state.value\n          key = tuple[0]\n          let loop = true\n          while (loop && until < chunk.length) {\n            const input = Chunk.unsafeGet(chunk, until)\n            const updatedKey = f(input)\n            if (!Equal.equals(key, updatedKey)) {\n              const previousChunk = tuple[1]\n              const additionalChunk = Chunk.unsafeFromArray(Array.from(chunk).slice(from, until))\n              const group = Chunk.appendAll(previousChunk, additionalChunk)\n              builder.push([key, group])\n              key = updatedKey\n              from = until\n              loop = false\n            }\n            until = until + 1\n          }\n          if (loop) {\n            previousChunk = tuple[1]\n          }\n          break\n        }\n        case \"None\": {\n          key = f(Chunk.unsafeGet(chunk, until))\n          until = until + 1\n          break\n        }\n      }\n      while (until < chunk.length) {\n        const input = Chunk.unsafeGet(chunk, until)\n        const updatedKey = f(input)\n        if (!Equal.equals(key, updatedKey)) {\n          builder.push([key, Chunk.unsafeFromArray(Array.from(chunk).slice(from, until)) as Chunk.NonEmptyChunk<A>])\n          key = updatedKey\n          from = until\n        }\n        until = until + 1\n      }\n      const nonEmptyChunk = Chunk.appendAll(previousChunk, Chunk.unsafeFromArray(Array.from(chunk).slice(from, until)))\n      const output = Chunk.unsafeFromArray(builder)\n      return [Option.some([key, nonEmptyChunk as Chunk.NonEmptyChunk<A>]), output]\n    }\n\n    const groupAdjacent = (\n      state: Option.Option<Output>\n    ): Channel.Channel<Chunk.Chunk<Output>, Chunk.Chunk<A>, never, never, unknown, unknown> =>\n      core.readWithCause({\n        onInput: (input: Chunk.Chunk<A>) => {\n          const [updatedState, output] = groupAdjacentByChunk(state, input)\n          return Chunk.isEmpty(output)\n            ? groupAdjacent(updatedState)\n            : core.flatMap(core.write(output), () => groupAdjacent(updatedState))\n        },\n        onFailure: (cause) =>\n          Option.match(state, {\n            onNone: () => core.failCause(cause),\n            onSome: (output) => core.flatMap(core.write(Chunk.of(output)), () => core.failCause(cause))\n          }),\n        onDone: (done) =>\n          Option.match(state, {\n            onNone: () => core.succeedNow(done),\n            onSome: (output) => core.flatMap(core.write(Chunk.of(output)), () => core.succeedNow(done))\n          })\n      })\n    return new StreamImpl(channel.pipeToOrFail(toChannel(self), groupAdjacent(Option.none())))\n  }\n)\n\n/** @internal */\nexport const grouped = dual<\n  (chunkSize: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n    pipe(self, rechunk(chunkSize), chunks)\n)\n\n/** @internal */\nexport const groupedWithin = dual<\n  (\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  3,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    chunkSize: number,\n    duration: Duration.DurationInput\n  ): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n    aggregateWithin(self, _sink.collectAllN(chunkSize), Schedule.spaced(duration))\n)\n\n/** @internal */\nexport const haltWhen = dual<\n  <X, E2, R2>(\n    effect: Effect.Effect<X, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const writer = (\n      fiber: Fiber.Fiber<X, E2>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E | E2, void, unknown, R2> =>\n      pipe(\n        Fiber.poll(fiber),\n        Effect.map(Option.match({\n          onNone: () =>\n            core.readWith({\n              onInput: (input: Chunk.Chunk<A>) => core.flatMap(core.write(input), () => writer(fiber)),\n              onFailure: core.fail,\n              onDone: () => core.void\n            }),\n          onSome: Exit.match({\n            onFailure: core.failCause,\n            onSuccess: () => core.void\n          })\n        })),\n        channel.unwrap\n      )\n    return new StreamImpl(\n      channel.unwrapScopedWith((scope) =>\n        effect.pipe(\n          Effect.forkIn(scope),\n          Effect.map((fiber) => toChannel(self).pipe(core.pipeTo(writer(fiber))))\n        )\n      )\n    )\n  }\n)\n\n/** @internal */\nexport const haltAfter = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n    pipe(self, haltWhen(Clock.sleep(duration)))\n)\n\n/** @internal */\nexport const haltWhenDeferred = dual<\n  <X, E2>(deferred: Deferred.Deferred<X, E2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>) => Stream.Stream<A, E2 | E, R>\n>(\n  2,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>): Stream.Stream<A, E | E2, R> => {\n    const writer: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E | E2, void, unknown, R> = pipe(\n      Deferred.poll(deferred),\n      Effect.map(Option.match({\n        onNone: () =>\n          core.readWith({\n            onInput: (input: Chunk.Chunk<A>) => pipe(core.write(input), core.flatMap(() => writer)),\n            onFailure: core.fail,\n            onDone: () => core.void\n          }),\n        onSome: (effect) =>\n          channel.unwrap(Effect.match(effect, {\n            onFailure: core.fail,\n            onSuccess: () => core.void\n          }))\n      })),\n      channel.unwrap\n    )\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer)))\n  }\n)\n\n/** @internal */\nexport const identityStream = <A, E = never, R = never>(): Stream.Stream<A, E, R> =>\n  new StreamImpl(\n    channel.identityChannel() as Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown>\n  )\n\n/** @internal */\nexport const interleave = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> => pipe(self, interleaveWith(that, forever(make(true, false))))\n)\n\n/** @internal */\nexport const interleaveWith = dual<\n  <A2, E2, R2, E3, R3>(\n    that: Stream.Stream<A2, E2, R2>,\n    decider: Stream.Stream<boolean, E3, R3>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E3 | E, R2 | R3 | R>,\n  <A, E, R, A2, E2, R2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    decider: Stream.Stream<boolean, E3, R3>\n  ) => Stream.Stream<A2 | A, E2 | E3 | E, R2 | R3 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    decider: Stream.Stream<boolean, E3, R3>\n  ): Stream.Stream<A2 | A, E2 | E3 | E, R2 | R3 | R> => {\n    const producer = (\n      handoff: Handoff.Handoff<Take.Take<A | A2, E | E2 | E3>>\n    ): Channel.Channel<never, A | A2, never, E | E2 | E3, void, unknown, R | R2 | R3> =>\n      core.readWithCause({\n        onInput: (value: A | A2) =>\n          core.flatMap(\n            core.fromEffect(\n              Handoff.offer<Take.Take<A | A2, E | E2 | E3>>(handoff, InternalTake.of(value))\n            ),\n            () => producer(handoff)\n          ),\n        onFailure: (cause) =>\n          core.fromEffect(\n            Handoff.offer<Take.Take<A | A2, E | E2 | E3>>(\n              handoff,\n              InternalTake.failCause(cause)\n            )\n          ),\n        onDone: () =>\n          core.fromEffect(\n            Handoff.offer<Take.Take<A | A2, E | E2 | E3>>(handoff, InternalTake.end)\n          )\n      })\n    return new StreamImpl(\n      channel.unwrapScopedWith((scope) =>\n        pipe(\n          Handoff.make<Take.Take<A | A2, E | E2 | E3>>(),\n          Effect.zip(Handoff.make<Take.Take<A | A2, E | E2 | E3>>()),\n          Effect.tap(([left]) =>\n            toChannel(self).pipe(\n              channel.concatMap(channel.writeChunk),\n              core.pipeTo(producer(left)),\n              channelExecutor.runIn(scope),\n              Effect.forkIn(scope)\n            )\n          ),\n          Effect.tap(([_, right]) =>\n            toChannel(that).pipe(\n              channel.concatMap(channel.writeChunk),\n              core.pipeTo(producer(right)),\n              channelExecutor.runIn(scope),\n              Effect.forkIn(scope)\n            )\n          ),\n          Effect.map(([left, right]) => {\n            const process = (\n              leftDone: boolean,\n              rightDone: boolean\n            ): Channel.Channel<Chunk.Chunk<A | A2>, boolean, E | E2 | E3, E | E2 | E3, void, unknown, R> =>\n              core.readWithCause({\n                onInput: (bool: boolean) => {\n                  if (bool && !leftDone) {\n                    return pipe(\n                      core.fromEffect(Handoff.take(left)),\n                      core.flatMap(InternalTake.match({\n                        onEnd: () => rightDone ? core.void : process(true, rightDone),\n                        onFailure: core.failCause,\n                        onSuccess: (chunk) => pipe(core.write(chunk), core.flatMap(() => process(leftDone, rightDone)))\n                      }))\n                    )\n                  }\n                  if (!bool && !rightDone) {\n                    return pipe(\n                      core.fromEffect(Handoff.take(right)),\n                      core.flatMap(InternalTake.match({\n                        onEnd: () => leftDone ? core.void : process(leftDone, true),\n                        onFailure: core.failCause,\n                        onSuccess: (chunk) => pipe(core.write(chunk), core.flatMap(() => process(leftDone, rightDone)))\n                      }))\n                    )\n                  }\n                  return process(leftDone, rightDone)\n                },\n                onFailure: core.failCause,\n                onDone: () => core.void\n              })\n            return pipe(\n              toChannel(decider),\n              channel.concatMap(channel.writeChunk),\n              core.pipeTo(process(false, false))\n            )\n          })\n        )\n      )\n    )\n  }\n)\n\n/** @internal */\nexport const intersperse = dual<\n  <A2>(element: A2) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: A2) => Stream.Stream<A2 | A, E, R>\n>(2, <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: A2): Stream.Stream<A2 | A, E, R> =>\n  new StreamImpl(\n    pipe(\n      toChannel(self),\n      channel.pipeToOrFail(\n        core.suspend(() => {\n          const writer = (\n            isFirst: boolean\n          ): Channel.Channel<Chunk.Chunk<A | A2>, Chunk.Chunk<A>, E, E, unknown, unknown> =>\n            core.readWithCause({\n              onInput: (chunk: Chunk.Chunk<A>) => {\n                const builder: Array<A | A2> = []\n                let flagResult = isFirst\n                for (const output of chunk) {\n                  if (flagResult) {\n                    flagResult = false\n                    builder.push(output)\n                  } else {\n                    builder.push(element)\n                    builder.push(output)\n                  }\n                }\n                return pipe(\n                  core.write(Chunk.unsafeFromArray(builder)),\n                  core.flatMap(() => writer(flagResult))\n                )\n              },\n              onFailure: core.failCause,\n              onDone: () => core.void\n            })\n          return writer(true)\n        })\n      )\n    )\n  ))\n\n/** @internal */\nexport const intersperseAffixes = dual<\n  <A2, A3, A4>(\n    options: {\n      readonly start: A2\n      readonly middle: A3\n      readonly end: A4\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A3 | A4 | A, E, R>,\n  <A, E, R, A2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly start: A2\n      readonly middle: A3\n      readonly end: A4\n    }\n  ) => Stream.Stream<A2 | A3 | A4 | A, E, R>\n>(\n  2,\n  <A, E, R, A2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    { end, middle, start }: {\n      readonly start: A2\n      readonly middle: A3\n      readonly end: A4\n    }\n  ): Stream.Stream<A2 | A3 | A4 | A, E, R> =>\n    pipe(\n      make(start),\n      concat(pipe(self, intersperse(middle))),\n      concat(make(end))\n    )\n)\n\n/** @internal */\nexport const interruptAfter = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n    pipe(self, interruptWhen(Clock.sleep(duration)))\n)\n\n/** @internal */\nexport const interruptWhen = dual<\n  <X, E2, R2>(\n    effect: Effect.Effect<X, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => new StreamImpl(pipe(toChannel(self), channel.interruptWhen(effect)))\n)\n\n/** @internal */\nexport const interruptWhenDeferred = dual<\n  <X, E2>(deferred: Deferred.Deferred<X, E2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>) => Stream.Stream<A, E2 | E, R>\n>(\n  2,\n  <A, E, R, X, E2>(self: Stream.Stream<A, E, R>, deferred: Deferred.Deferred<X, E2>): Stream.Stream<A, E2 | E, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.interruptWhenDeferred(deferred)))\n)\n\n/** @internal */\nexport const iterate = <A>(value: A, next: (value: A) => A): Stream.Stream<A> =>\n  unfold(value, (a) => Option.some([a, next(a)] as const))\n\n/** @internal */\nexport const make = <As extends Array<any>>(...as: As): Stream.Stream<As[number]> => fromIterable(as)\n\n/** @internal */\nexport const map = dual<\n  <A, B>(f: (a: A) => B) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (a: A) => B) => Stream.Stream<B, E, R>\n>(\n  2,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (a: A) => B): Stream.Stream<B, E, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapOut(Chunk.map(f))))\n)\n\n/** @internal */\nexport const mapAccum = dual<\n  <S, A, A2>(\n    s: S,\n    f: (s: S, a: A) => readonly [S, A2]\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, S, A2>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => readonly [S, A2]) => Stream.Stream<A2, E, R>\n>(\n  3,\n  <A, E, R, S, A2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => readonly [S, A2]\n  ): Stream.Stream<A2, E, R> => {\n    const accumulator = (s: S): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E, E, void, unknown> =>\n      core.readWith({\n        onInput: (input: Chunk.Chunk<A>) => {\n          const [nextS, chunk] = Chunk.mapAccum(input, s, f)\n          return core.flatMap(\n            core.write(chunk),\n            () => accumulator(nextS)\n          )\n        },\n        onFailure: core.fail,\n        onDone: () => core.void\n      })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(accumulator(s))))\n  }\n)\n\n/** @internal */\nexport const mapAccumEffect = dual<\n  <S, A, A2, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, S, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, S, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<readonly [S, A2], E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    suspend(() => {\n      const accumulator = (\n        s: S\n      ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> =>\n        core.readWith({\n          onInput: (input: Chunk.Chunk<A>) =>\n            pipe(\n              Effect.suspend(() => {\n                const outputs: Array<A2> = []\n                const emit = (output: A2) =>\n                  Effect.sync(() => {\n                    outputs.push(output)\n                  })\n                return pipe(\n                  input,\n                  Effect.reduce(s, (s, a) =>\n                    pipe(\n                      f(s, a),\n                      Effect.flatMap(([s, a]) => pipe(emit(a), Effect.as(s)))\n                    )),\n                  Effect.match({\n                    onFailure: (error) => {\n                      if (outputs.length !== 0) {\n                        return channel.zipRight(core.write(Chunk.unsafeFromArray(outputs)), core.fail(error))\n                      }\n                      return core.fail(error)\n                    },\n                    onSuccess: (s) => core.flatMap(core.write(Chunk.unsafeFromArray(outputs)), () => accumulator(s))\n                  })\n                )\n              }),\n              channel.unwrap\n            ),\n          onFailure: core.fail,\n          onDone: () => core.void\n        })\n      return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(accumulator(s))))\n    })\n)\n\n/** @internal */\nexport const mapBoth = dual<\n  <E, E2, A, A2>(\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2, R>,\n  <A, E, R, E2, A2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ) => Stream.Stream<A2, E2, R>\n>(\n  2,\n  <A, E, R, E2, A2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: E) => E2\n      readonly onSuccess: (a: A) => A2\n    }\n  ): Stream.Stream<A2, E2, R> => pipe(self, mapError(options.onFailure), map(options.onSuccess))\n)\n\n/** @internal */\nexport const mapChunks = dual<\n  <A, B>(\n    f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>) => Stream.Stream<B, E, R>\n>(\n  2,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, f: (chunk: Chunk.Chunk<A>) => Chunk.Chunk<B>): Stream.Stream<B, E, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapOut(f)))\n)\n\n/** @internal */\nexport const mapChunksEffect = dual<\n  <A, B, E2, R2>(\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E2 | E, R2 | R>,\n  <A, E, R, B, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ) => Stream.Stream<B, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, B, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (chunk: Chunk.Chunk<A>) => Effect.Effect<Chunk.Chunk<B>, E2, R2>\n  ): Stream.Stream<B, E2 | E, R2 | R> => new StreamImpl(pipe(toChannel(self), channel.mapOutEffect(f)))\n)\n\n/** @internal */\nexport const mapConcat = dual<\n  <A, A2>(f: (a: A) => Iterable<A2>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Iterable<A2>) => Stream.Stream<A2, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Iterable<A2>): Stream.Stream<A2, E, R> =>\n    pipe(self, mapConcatChunk((a) => Chunk.fromIterable(f(a))))\n)\n\n/** @internal */\nexport const mapConcatChunk = dual<\n  <A, A2>(f: (a: A) => Chunk.Chunk<A2>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Chunk.Chunk<A2>) => Stream.Stream<A2, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a: A) => Chunk.Chunk<A2>): Stream.Stream<A2, E, R> =>\n    pipe(self, mapChunks(Chunk.flatMap(f)))\n)\n\n/** @internal */\nexport const mapConcatChunkEffect = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Chunk.Chunk<A2>, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> => pipe(self, mapEffectSequential(f), mapConcatChunk(identity))\n)\n\n/** @internal */\nexport const mapConcatEffect = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<Iterable<A2>, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    pipe(self, mapEffectSequential((a) => pipe(f(a), Effect.map(Chunk.fromIterable))), mapConcatChunk(identity))\n)\n\n/** @internal */\nexport const mapEffectSequential = dual<\n  <A, A2, E2, R2>(\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> => {\n    const loop = (\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (elem) => loop(elem[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeed\n        })\n      } else {\n        const value = next.value\n        return channel.unwrap(\n          Effect.map(f(value), (a2) =>\n            core.flatMap(\n              core.write(Chunk.of(a2)),\n              () => loop(iterator)\n            ))\n        )\n      }\n    }\n    return new StreamImpl(pipe(\n      toChannel(self),\n      core.pipeTo(core.suspend(() => loop(Chunk.empty<A>()[Symbol.iterator]())))\n    ))\n  }\n)\n\n/** @internal */\nexport const mapEffectPar = dual<\n  <A, A2, E2, R2>(\n    n: number,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    n: number,\n    f: (a: A) => Effect.Effect<A2, E2, R2>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    new StreamImpl(\n      pipe(\n        toChannel(self),\n        channel.concatMap(channel.writeChunk),\n        channel.mapOutEffectPar(f, n),\n        channel.mapOut(Chunk.of)\n      )\n    )\n)\n\n/** @internal */\nexport const mapError = dual<\n  <E, E2>(f: (error: E) => E2) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (error: E) => E2) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (error: E) => E2): Stream.Stream<A, E2, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapError(f)))\n)\n\n/** @internal */\nexport const mapErrorCause = dual<\n  <E, E2>(\n    f: (cause: Cause.Cause<E>) => Cause.Cause<E2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, f: (cause: Cause.Cause<E>) => Cause.Cause<E2>): Stream.Stream<A, E2, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.mapErrorCause(f)))\n)\n\n/** @internal */\nexport const merge = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  (args) => isStream(args[1]),\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    options?: {\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> =>\n    mergeWith(self, that, {\n      onSelf: identity,\n      onOther: identity,\n      haltStrategy: options?.haltStrategy\n    })\n)\n\n/** @internal */\nexport const mergeAll = dual<\n  (options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n  }) => <A, E, R>(streams: Iterable<Stream.Stream<A, E, R>>) => Stream.Stream<A, E, R>,\n  <A, E, R>(streams: Iterable<Stream.Stream<A, E, R>>, options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n  }) => Stream.Stream<A, E, R>\n>((args) => Symbol.iterator in args[0], (streams, options) => flatten(fromIterable(streams), options))\n\n/** @internal */\nexport const mergeWithTag: {\n  <S extends { [k in string]: Stream.Stream<any, any, any> }>(\n    streams: S,\n    options: {\n      readonly concurrency: number | \"unbounded\"\n      readonly bufferSize?: number | undefined\n    }\n  ): Stream.Stream<\n    { [K in keyof S]: { _tag: K; value: Stream.Stream.Success<S[K]> } }[keyof S],\n    Stream.Stream.Error<S[keyof S]>,\n    Stream.Stream.Context<S[keyof S]>\n  >\n  (options: {\n    readonly concurrency: number | \"unbounded\"\n    readonly bufferSize?: number | undefined\n  }): <S extends { [k in string]: Stream.Stream<any, any, any> }>(streams: S) => Stream.Stream<\n    { [K in keyof S]: { _tag: K; value: Stream.Stream.Success<S[K]> } }[keyof S],\n    Stream.Stream.Error<S[keyof S]>,\n    Stream.Stream.Context<S[keyof S]>\n  >\n} = dual(2, (streams, options) => {\n  const keys = Object.keys(streams)\n  const values = keys.map((key) => streams[key].pipe(map((value) => ({ _tag: key, value })))) as any\n  return mergeAll(values, options)\n})\n\n/** @internal */\nexport const mergeEither = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<A2, A>, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<Either.Either<A2, A>, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<Either.Either<A2, A>, E2 | E, R2 | R> =>\n    mergeWith(self, that, { onSelf: Either.left, onOther: Either.right })\n)\n\n/** @internal */\nexport const mergeLeft = dual<\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ) => <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL, ER | EL, RR | RL>,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ) => Stream.Stream<AL, ER | EL, RR | RL>\n>(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR> => pipe(left, merge(drain(right)))\n)\n\n/** @internal */\nexport const mergeRight = dual<\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ) => <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AR, ER | EL, RR | RL>,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ) => Stream.Stream<AR, ER | EL, RR | RL>\n>(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR> => pipe(drain(left), merge(right))\n)\n\n/** @internal */\nexport const mergeWith = dual<\n  <A2, E2, R2, A, A3, A4>(\n    other: Stream.Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3 | A4, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ) => Stream.Stream<A3 | A4, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2, A3, A4>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    options: {\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A4\n      readonly haltStrategy?: HaltStrategy.HaltStrategyInput | undefined\n    }\n  ): Stream.Stream<A3 | A4, E2 | E, R2 | R> => {\n    const strategy = options.haltStrategy ? haltStrategy.fromInput(options.haltStrategy) : HaltStrategy.Both\n    const handler =\n      (terminate: boolean) =>\n      (exit: Exit.Exit<unknown, E | E2>): MergeDecision.MergeDecision<R | R2, E | E2, unknown, E | E2, unknown> =>\n        terminate || !Exit.isSuccess(exit) ?\n          // TODO: remove\n          MergeDecision.Done(Effect.suspend(() => exit)) :\n          MergeDecision.Await((exit) => Effect.suspend(() => exit))\n\n    return new StreamImpl<A3 | A4, E | E2, R | R2>(\n      channel.mergeWith(toChannel(map(self, options.onSelf)), {\n        other: toChannel(map(other, options.onOther)),\n        onSelfDone: handler(strategy._tag === \"Either\" || strategy._tag === \"Left\"),\n        onOtherDone: handler(strategy._tag === \"Either\" || strategy._tag === \"Right\")\n      })\n    )\n  }\n)\n\n/** @internal */\nexport const mkString = <E, R>(self: Stream.Stream<string, E, R>): Effect.Effect<string, E, R> =>\n  run(self, _sink.mkString)\n\n/** @internal */\nexport const never: Stream.Stream<never> = fromEffect(Effect.never)\n\n/** @internal */\nexport const onEnd: {\n  <_, E2, R2>(\n    effect: Effect.Effect<_, E2, R2>\n  ): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => concat(self, drain(fromEffect(effect)))\n)\n\n/** @internal */\nexport const onError = dual<\n  <E, X, R2>(\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: (cause: Cause.Cause<E>) => Effect.Effect<X, never, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    pipe(self, catchAllCause((cause) => fromEffect(pipe(cleanup(cause), Effect.zipRight(Effect.failCause(cause))))))\n)\n\n/** @internal */\nexport const onDone = dual<\n  <X, R2>(\n    cleanup: () => Effect.Effect<X, never, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: () => Effect.Effect<X, never, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, R2>(\n    self: Stream.Stream<A, E, R>,\n    cleanup: () => Effect.Effect<X, never, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    new StreamImpl<A, E, R | R2>(\n      pipe(toChannel(self), core.ensuringWith((exit) => Exit.isSuccess(exit) ? cleanup() : Effect.void))\n    )\n)\n\n/** @internal */\nexport const onStart: {\n  <_, E2, R2>(\n    effect: Effect.Effect<_, E2, R2>\n  ): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, _, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<_, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => unwrap(Effect.as(effect, self))\n)\n\n/** @internal */\nexport const orDie = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<A, never, R> =>\n  pipe(self, orDieWith(identity))\n\n/** @internal */\nexport const orDieWith = dual<\n  <E>(f: (e: E) => unknown) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, never, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, f: (e: E) => unknown) => Stream.Stream<A, never, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, f: (e: E) => unknown): Stream.Stream<A, never, R> =>\n    new StreamImpl(pipe(toChannel(self), channel.orDieWith(f)))\n)\n\n/** @internal */\nexport const orElse = dual<\n  <A2, E2, R2>(\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E2, R2 | R> =>\n    new StreamImpl<A | A2, E2, R | R2>(pipe(toChannel(self), channel.orElse(() => toChannel(that()))))\n)\n\n/** @internal */\nexport const orElseEither = dual<\n  <A2, E2, R2>(\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<A2, A>, E2, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<Either.Either<A2, A>, E2, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: LazyArg<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<Either.Either<A2, A>, E2, R2 | R> =>\n    pipe(self, map(Either.left), orElse(() => pipe(that(), map(Either.right))))\n)\n\n/** @internal */\nexport const orElseFail = dual<\n  <E2>(error: LazyArg<E2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, error: LazyArg<E2>) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, error: LazyArg<E2>): Stream.Stream<A, E2, R> =>\n    pipe(self, orElse(() => failSync(error)))\n)\n\n/** @internal */\nexport const orElseIfEmpty = dual<\n  <A2>(element: LazyArg<A2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: LazyArg<A2>) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, element: LazyArg<A2>): Stream.Stream<A | A2, E, R> =>\n    pipe(self, orElseIfEmptyChunk(() => Chunk.of(element())))\n)\n\n/** @internal */\nexport const orElseIfEmptyChunk = dual<\n  <A2>(chunk: LazyArg<Chunk.Chunk<A2>>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, chunk: LazyArg<Chunk.Chunk<A2>>) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, chunk: LazyArg<Chunk.Chunk<A2>>): Stream.Stream<A | A2, E, R> =>\n    pipe(self, orElseIfEmptyStream(() => new StreamImpl(core.write(chunk()))))\n)\n\n/** @internal */\nexport const orElseIfEmptyStream = dual<\n  <A2, E2, R2>(\n    stream: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    stream: LazyArg<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    stream: LazyArg<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> => {\n    const writer: Channel.Channel<Chunk.Chunk<A | A2>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core.readWith(\n      {\n        onInput: (input: Chunk.Chunk<A>) => {\n          if (Chunk.isEmpty(input)) {\n            return core.suspend(() => writer)\n          }\n          return pipe(\n            core.write(input),\n            channel.zipRight(channel.identityChannel<Chunk.Chunk<A>, E, unknown>())\n          )\n        },\n        onFailure: core.fail,\n        onDone: () => core.suspend(() => toChannel(stream()))\n      }\n    )\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(writer)))\n  }\n)\n\n/** @internal */\nexport const orElseSucceed = dual<\n  <A2>(value: LazyArg<A2>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, never, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, value: LazyArg<A2>) => Stream.Stream<A2 | A, never, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, value: LazyArg<A2>): Stream.Stream<A2 | A, never, R> =>\n    pipe(self, orElse(() => sync(value)))\n)\n\n/** @internal */\nexport const paginate = <S, A>(s: S, f: (s: S) => readonly [A, Option.Option<S>]): Stream.Stream<A> =>\n  paginateChunk(s, (s) => {\n    const page = f(s)\n    return [Chunk.of(page[0]), page[1]] as const\n  })\n\n/** @internal */\nexport const paginateChunk = <S, A>(\n  s: S,\n  f: (s: S) => readonly [Chunk.Chunk<A>, Option.Option<S>]\n): Stream.Stream<A> => {\n  const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, never, unknown, unknown, unknown> => {\n    const page = f(s)\n    return Option.match(page[1], {\n      onNone: () => channel.zipRight(core.write(page[0]), core.void),\n      onSome: (s) => core.flatMap(core.write(page[0]), () => loop(s))\n    })\n  }\n  return new StreamImpl(core.suspend(() => loop(s)))\n}\n\n/** @internal */\nexport const paginateChunkEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<readonly [Chunk.Chunk<A>, Option.Option<S>], E, R>\n): Stream.Stream<A, E, R> => {\n  const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> =>\n    channel.unwrap(\n      Effect.map(f(s), ([chunk, option]) =>\n        Option.match(option, {\n          onNone: () => channel.zipRight(core.write(chunk), core.void),\n          onSome: (s) => core.flatMap(core.write(chunk), () => loop(s))\n        }))\n    )\n  return new StreamImpl(core.suspend(() => loop(s)))\n}\n\n/** @internal */\nexport const paginateEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<readonly [A, Option.Option<S>], E, R>\n): Stream.Stream<A, E, R> =>\n  paginateChunkEffect(s, (s) => pipe(f(s), Effect.map(([a, s]) => [Chunk.of(a), s] as const)))\n\n/** @internal */\nexport const peel = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<[A2, Stream.Stream<A, E>], E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => Effect.Effect<[A2, Stream.Stream<A, E>], E2 | E, Scope.Scope | R2 | R>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  sink: Sink.Sink<A2, A, A, E2, R2>\n): Effect.Effect<[A2, Stream.Stream<A, E>], E2 | E, Scope.Scope | R2 | R> => {\n  type Signal = Emit | Halt | End\n  const OP_EMIT = \"Emit\" as const\n  type OP_EMIT = typeof OP_EMIT\n  const OP_HALT = \"Halt\" as const\n  type OP_HALT = typeof OP_HALT\n  const OP_END = \"End\" as const\n  type OP_END = typeof OP_END\n  interface Emit {\n    readonly _tag: OP_EMIT\n    readonly elements: Chunk.Chunk<A>\n  }\n  interface Halt {\n    readonly _tag: OP_HALT\n    readonly cause: Cause.Cause<E>\n  }\n  interface End {\n    readonly _tag: OP_END\n  }\n  return pipe(\n    Deferred.make<A2, E | E2>(),\n    Effect.flatMap((deferred) =>\n      pipe(\n        Handoff.make<Signal>(),\n        Effect.map((handoff) => {\n          const consumer = _sink.foldSink(_sink.collectLeftover(sink), {\n            onFailure: (error) =>\n              _sink.zipRight(\n                _sink.fromEffect(Deferred.fail(deferred, error)),\n                _sink.fail(error)\n              ),\n            onSuccess: ([z, leftovers]) => {\n              const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, void, unknown> = core\n                .readWithCause({\n                  onInput: (elements) =>\n                    core.flatMap(\n                      core.fromEffect(\n                        Handoff.offer<Signal>(handoff, { _tag: OP_EMIT, elements })\n                      ),\n                      () => loop\n                    ),\n                  onFailure: (cause) =>\n                    channel.zipRight(\n                      core.fromEffect(Handoff.offer<Signal>(handoff, { _tag: OP_HALT, cause })),\n                      core.failCause(cause)\n                    ),\n                  onDone: (_) =>\n                    channel.zipRight(\n                      core.fromEffect(Handoff.offer<Signal>(handoff, { _tag: OP_END })),\n                      core.void\n                    )\n                })\n              return _sink.fromChannel(\n                pipe(\n                  core.fromEffect(Deferred.succeed(deferred, z)),\n                  channel.zipRight(core.fromEffect(\n                    pipe(\n                      handoff,\n                      Handoff.offer<Signal>({ _tag: OP_EMIT, elements: leftovers })\n                    )\n                  )),\n                  channel.zipRight(loop)\n                )\n              )\n            }\n          })\n\n          const producer: Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, void, unknown> = pipe(\n            Handoff.take(handoff),\n            Effect.map((signal) => {\n              switch (signal._tag) {\n                case OP_EMIT: {\n                  return pipe(core.write(signal.elements), core.flatMap(() => producer))\n                }\n                case OP_HALT: {\n                  return core.failCause(signal.cause)\n                }\n                case OP_END: {\n                  return core.void\n                }\n              }\n            }),\n            channel.unwrap\n          )\n\n          return pipe(\n            self,\n            tapErrorCause((cause) => Deferred.failCause(deferred, cause)),\n            run(consumer),\n            Effect.forkScoped,\n            Effect.zipRight(Deferred.await(deferred)),\n            Effect.map((z) => [z, new StreamImpl(producer)] as [A2, StreamImpl<A, E>])\n          )\n        })\n      )\n    ),\n    Effect.flatten\n  )\n})\n\n/** @internal */\nexport const partition: {\n  <C extends A, B extends A, A = C>(\n    refinement: Refinement<NoInfer<A>, B>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): <E, R>(\n    self: Stream.Stream<C, E, R>\n  ) => Effect.Effect<\n    [excluded: Stream.Stream<Exclude<C, B>, E>, satisfying: Stream.Stream<B, E>],\n    E,\n    Scope.Scope | R\n  >\n  <A>(\n    predicate: Predicate<A>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<[excluded: Stream.Stream<A, E>, satisfying: Stream.Stream<A, E>], E, Scope.Scope | R>\n  <C extends A, E, R, B extends A, A = C>(\n    self: Stream.Stream<C, E, R>,\n    refinement: Refinement<A, B>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): Effect.Effect<\n    [excluded: Stream.Stream<Exclude<C, B>, E>, satisfying: Stream.Stream<B, E>],\n    E,\n    Scope.Scope | R\n  >\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    predicate: Predicate<A>,\n    options?: {\n      bufferSize?: number | undefined\n    }\n  ): Effect.Effect<[excluded: Stream.Stream<A, E>, satisfying: Stream.Stream<A, E>], E, Scope.Scope | R>\n} = dual(\n  (args) => typeof args[1] === \"function\",\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    predicate: Predicate<A>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ): Effect.Effect<\n    [Stream.Stream<A, E>, Stream.Stream<A, E>],\n    E,\n    R | Scope.Scope\n  > =>\n    partitionEither(\n      self,\n      (a) => Effect.succeed(predicate(a) ? Either.right(a) : Either.left(a)),\n      options\n    )\n)\n\n/** @internal */\nexport const partitionEither = dual<\n  <A, A3, A2, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<\n    [left: Stream.Stream<A2, E2 | E>, right: Stream.Stream<A3, E2 | E>],\n    E2 | E,\n    Scope.Scope | R2 | R\n  >,\n  <A, E, R, A3, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ) => Effect.Effect<\n    [left: Stream.Stream<A2, E2 | E>, right: Stream.Stream<A3, E2 | E>],\n    E2 | E,\n    Scope.Scope | R2 | R\n  >\n>(\n  (args) => typeof args[1] === \"function\",\n  <A, E, R, A3, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<Either.Either<A3, A2>, E2, R2>,\n    options?: {\n      readonly bufferSize?: number | undefined\n    }\n  ): Effect.Effect<\n    [left: Stream.Stream<A2, E2 | E>, right: Stream.Stream<A3, E2 | E>],\n    E | E2,\n    R | R2 | Scope.Scope\n  > =>\n    pipe(\n      mapEffectSequential(self, predicate),\n      distributedWith({\n        size: 2,\n        maximumLag: options?.bufferSize ?? 16,\n        decide: Either.match({\n          onLeft: () => Effect.succeed((n) => n === 0),\n          onRight: () => Effect.succeed((n) => n === 1)\n        })\n      }),\n      Effect.flatMap(([queue1, queue2]) =>\n        Effect.succeed([\n          filterMap(\n            flattenExitOption(fromQueue(queue1, { shutdown: true })),\n            (_) =>\n              Either.match(_, {\n                onLeft: Option.some,\n                onRight: Option.none\n              })\n          ),\n          filterMap(\n            flattenExitOption(fromQueue(queue2, { shutdown: true })),\n            (_) =>\n              Either.match(_, {\n                onLeft: Option.none,\n                onRight: Option.some\n              })\n          )\n        ])\n      )\n    )\n)\n\n/** @internal */\nexport const pipeThrough = dual<\n  <A2, A, L, E2, R2>(\n    sink: Sink.Sink<A2, A, L, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<L, E2 | E, R2 | R>,\n  <A, E, R, A2, L, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, L, E2, R2>\n  ) => Stream.Stream<L, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, L, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, L, E2, R2>\n  ): Stream.Stream<L, E2 | E, R2 | R> =>\n    new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(_sink.toChannel(sink))))\n)\n\n/** @internal */\nexport const pipeThroughChannel = dual<\n  <R2, E, E2, A, A2>(\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2, R2 | R>,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => Stream.Stream<A2, E2, R2 | R>\n>(\n  2,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    channel: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): Stream.Stream<A2, E2, R2 | R> => new StreamImpl(core.pipeTo(toChannel(self), channel))\n)\n\n/** @internal */\nexport const pipeThroughChannelOrFail = dual<\n  <R2, E, E2, A, A2>(\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E | E2, R2 | R>,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ) => Stream.Stream<A2, E | E2, R2 | R>\n>(\n  2,\n  <R, R2, E, E2, A, A2>(\n    self: Stream.Stream<A, E, R>,\n    chan: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E2, E, unknown, unknown, R2>\n  ): Stream.Stream<A2, E | E2, R2 | R> => new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(chan)))\n)\n\n/** @internal */\nexport const prepend = dual<\n  <B>(values: Chunk.Chunk<B>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A | B, E, R>,\n  <A, E, R, B>(self: Stream.Stream<A, E, R>, values: Chunk.Chunk<B>) => Stream.Stream<A | B, E, R>\n>(2, (self, values) =>\n  new StreamImpl(\n    channel.zipRight(\n      core.write(values as Chunk.Chunk<any>),\n      toChannel(self)\n    )\n  ))\n\n/** @internal */\nexport const provideContext = dual<\n  <R>(context: Context.Context<R>) => <A, E>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, context: Context.Context<R>) => Stream.Stream<A, E>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, context: Context.Context<R>): Stream.Stream<A, E> =>\n    new StreamImpl(pipe(toChannel(self), core.provideContext(context)))\n)\n\n/** @internal */\nexport const provideLayer = dual<\n  <RIn, E2, ROut>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => <A, E>(self: Stream.Stream<A, E, ROut>) => Stream.Stream<A, E2 | E, RIn>,\n  <A, E, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, ROut>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => Stream.Stream<A, E2 | E, RIn>\n>(\n  2,\n  <A, E, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, ROut>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Stream.Stream<A, E2 | E, RIn> =>\n    new StreamImpl(\n      channel.unwrapScopedWith((scope) =>\n        Layer.buildWithScope(layer, scope).pipe(\n          Effect.map((env) => pipe(toChannel(self), core.provideContext(env)))\n        )\n      )\n    )\n)\n\n/** @internal */\nexport const provideService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => Stream.Stream<A, E, Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    resource: Context.Tag.Service<T>\n  ) => provideServiceEffect(self, tag, Effect.succeed(resource))\n)\n\n/** @internal */\nexport const provideServiceEffect = dual<\n  <T extends Context.Tag<any, any>, E2, R2>(\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    effect: Effect.Effect<Context.Tag.Service<T>, E2, R2>\n  ) => provideServiceStream(self, tag, fromEffect(effect))\n)\n\n/** @internal */\nexport const provideServiceStream = dual<\n  <T extends Context.Tag<any, any>, E2, R2>(\n    tag: T,\n    stream: Stream.Stream<Context.Tag.Service<T>, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    stream: Stream.Stream<Context.Tag.Service<T>, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    stream: Stream.Stream<Context.Tag.Service<T>, E2, R2>\n  ): Stream.Stream<A, E2 | E, R2 | Exclude<R, Context.Tag.Identifier<T>>> =>\n    contextWithStream((env: Context.Context<R2 | Exclude<R, Context.Tag.Identifier<T>>>) =>\n      flatMap(\n        stream,\n        (service) => pipe(self, provideContext(Context.add(env, tag, service) as Context.Context<R | R2>))\n      )\n    )\n)\n\n/** @internal */\nexport const mapInputContext = dual<\n  <R0, R>(\n    f: (env: Context.Context<R0>) => Context.Context<R>\n  ) => <A, E>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R0>,\n  <A, E, R0, R>(\n    self: Stream.Stream<A, E, R>,\n    f: (env: Context.Context<R0>) => Context.Context<R>\n  ) => Stream.Stream<A, E, R0>\n>(\n  2,\n  <A, E, R0, R>(\n    self: Stream.Stream<A, E, R>,\n    f: (env: Context.Context<R0>) => Context.Context<R>\n  ): Stream.Stream<A, E, R0> => contextWithStream((env) => pipe(self, provideContext(f(env))))\n)\n\n/** @internal */\nexport const provideSomeLayer = dual<\n  <RIn, E2, ROut>(\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, RIn | Exclude<R, ROut>>,\n  <A, E, R, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ) => Stream.Stream<A, E2 | E, RIn | Exclude<R, ROut>>\n>(\n  2,\n  <A, E, R, RIn, E2, ROut>(\n    self: Stream.Stream<A, E, R>,\n    layer: Layer.Layer<ROut, E2, RIn>\n  ): Stream.Stream<A, E2 | E, RIn | Exclude<R, ROut>> =>\n    // @ts-expect-error\n    pipe(\n      self,\n      provideLayer(pipe(Layer.context(), Layer.merge(layer)))\n    )\n)\n\n/** @internal */\nexport const range = (min: number, max: number, chunkSize = DefaultChunkSize): Stream.Stream<number> =>\n  suspend(() => {\n    if (min > max) {\n      return empty as Stream.Stream<number>\n    }\n    const go = (\n      min: number,\n      max: number,\n      chunkSize: number\n    ): Channel.Channel<Chunk.Chunk<number>, unknown, never, unknown, unknown, unknown> => {\n      const remaining = max - min + 1\n      if (remaining > chunkSize) {\n        return pipe(\n          core.write(Chunk.range(min, min + chunkSize - 1)),\n          core.flatMap(() => go(min + chunkSize, max, chunkSize))\n        )\n      }\n      return core.write(Chunk.range(min, min + remaining - 1))\n    }\n    return new StreamImpl(go(min, max, chunkSize))\n  })\n\n/** @internal */\nexport const race: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL | AR, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL | AR, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL | AR, EL | ER, RL | RR> => raceAll(left, right)\n)\n\n/** @internal */\nexport const raceAll = <S extends ReadonlyArray<Stream.Stream<any, any, any>>>(\n  ...streams: S\n): Stream.Stream<\n  Stream.Stream.Success<S[number]>,\n  Stream.Stream.Error<S[number]>,\n  Stream.Stream.Context<S[number]>\n> =>\n  Deferred.make<void>().pipe(\n    Effect.map((halt) => {\n      let winner: number | null = null\n      return mergeAll(\n        streams.map((stream, index) =>\n          stream.pipe(\n            takeWhile(() => {\n              if (winner === null) {\n                winner = index\n                Deferred.unsafeDone(halt, Exit.void)\n                return true\n              }\n              return winner === index\n            }),\n            interruptWhen(\n              Deferred.await(halt).pipe(\n                Effect.flatMap(() => winner === index ? Effect.never : Effect.void)\n              )\n            )\n          )\n        ),\n        { concurrency: streams.length }\n      )\n    }),\n    unwrap\n  )\n\n/** @internal */\nexport const rechunk = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> =>\n  suspend(() => {\n    const target = Math.max(n, 1)\n    const process = rechunkProcess(new StreamRechunker(target), target)\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(process)))\n  }))\n\n/** @internal */\nconst rechunkProcess = <A, E>(\n  rechunker: StreamRechunker<A, E>,\n  target: number\n): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> =>\n  core.readWithCause({\n    onInput: (chunk: Chunk.Chunk<A>) => {\n      if (chunk.length === target && rechunker.isEmpty()) {\n        return core.flatMap(\n          core.write(chunk),\n          () => rechunkProcess(rechunker, target)\n        )\n      }\n      if (chunk.length > 0) {\n        const chunks: Array<Chunk.Chunk<A>> = []\n        let result: Chunk.Chunk<A> | undefined = undefined\n        let index = 0\n        while (index < chunk.length) {\n          while (index < chunk.length && result === undefined) {\n            result = rechunker.write(pipe(chunk, Chunk.unsafeGet(index)))\n            index = index + 1\n          }\n          if (result !== undefined) {\n            chunks.push(result)\n            result = undefined\n          }\n        }\n        return core.flatMap(\n          channel.writeAll(...chunks),\n          () => rechunkProcess(rechunker, target)\n        )\n      }\n      return core.suspend(() => rechunkProcess(rechunker, target))\n    },\n    onFailure: (cause) => channel.zipRight(rechunker.emitIfNotEmpty(), core.failCause(cause)),\n    onDone: () => rechunker.emitIfNotEmpty()\n  })\n\nclass StreamRechunker<out A, in out E> {\n  private builder: Array<A> = []\n  private pos = 0\n\n  constructor(readonly n: number) {\n  }\n\n  isEmpty(): boolean {\n    return this.pos === 0\n  }\n\n  write(elem: A): Chunk.Chunk<A> | undefined {\n    this.builder.push(elem)\n    this.pos += 1\n\n    if (this.pos === this.n) {\n      const result = Chunk.unsafeFromArray(this.builder)\n      this.builder = []\n      this.pos = 0\n      return result\n    }\n\n    return undefined\n  }\n\n  emitIfNotEmpty(): Channel.Channel<Chunk.Chunk<A>, unknown, E, E, void, unknown> {\n    if (this.pos !== 0) {\n      return core.write(Chunk.unsafeFromArray(this.builder))\n    }\n    return core.void\n  }\n}\n\n/** @internal */\nexport const refineOrDie = dual<\n  <E, E2>(pf: (error: E) => Option.Option<E2>) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, pf: (error: E) => Option.Option<E2>) => Stream.Stream<A, E2, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<A, E, R>, pf: (error: E) => Option.Option<E2>): Stream.Stream<A, E2, R> =>\n    pipe(self, refineOrDieWith(pf, identity))\n)\n\n/** @internal */\nexport const refineOrDieWith = dual<\n  <E, E2>(\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2, R>,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ) => Stream.Stream<A, E2, R>\n>(\n  3,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    pf: (error: E) => Option.Option<E2>,\n    f: (error: E) => unknown\n  ): Stream.Stream<A, E2, R> =>\n    new StreamImpl(\n      channel.catchAll(toChannel(self), (error) =>\n        Option.match(pf(error), {\n          onNone: () => core.failCause(Cause.die(f(error))),\n          onSome: core.fail\n        }))\n    )\n)\n\n/** @internal */\nexport const repeat = dual<\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    filterMap(\n      repeatEither(self, schedule),\n      (_) =>\n        Either.match(_, {\n          onLeft: Option.none,\n          onRight: Option.some\n        })\n    )\n)\n\n/** @internal */\nexport const repeatEffect = <A, E, R>(effect: Effect.Effect<A, E, R>): Stream.Stream<A, E, R> =>\n  repeatEffectOption(pipe(effect, Effect.mapError(Option.some)))\n\n/** @internal */\nexport const repeatEffectChunk = <A, E, R>(effect: Effect.Effect<Chunk.Chunk<A>, E, R>): Stream.Stream<A, E, R> =>\n  repeatEffectChunkOption(pipe(effect, Effect.mapError(Option.some)))\n\n/** @internal */\nexport const repeatEffectChunkOption = <A, E, R>(\n  effect: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>\n): Stream.Stream<A, E, R> =>\n  unfoldChunkEffect(effect, (effect) =>\n    pipe(\n      Effect.map(effect, (chunk) => Option.some([chunk, effect] as const)),\n      Effect.catchAll(Option.match({\n        onNone: () => Effect.succeed(Option.none()),\n        onSome: Effect.fail\n      }))\n    ))\n\n/** @internal */\nexport const repeatEffectOption = <A, E, R>(effect: Effect.Effect<A, Option.Option<E>, R>): Stream.Stream<A, E, R> =>\n  repeatEffectChunkOption(pipe(effect, Effect.map(Chunk.of)))\n\n/** @internal */\nexport const repeatEither = dual<\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Either.Either<A, B>, E, R2 | R>,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => Stream.Stream<Either.Either<A, B>, E, R2 | R>\n>(\n  2,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream.Stream<Either.Either<A, B>, E, R2 | R> =>\n    repeatWith(self, schedule, {\n      onElement: (a): Either.Either<A, B> => Either.right(a),\n      onSchedule: Either.left\n    })\n)\n\n/** @internal */\nexport const repeatElements = dual<\n  <B, R2>(\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, B, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    filterMap(\n      repeatElementsWith(self, schedule, { onElement: (a) => Option.some(a), onSchedule: Option.none }),\n      identity\n    )\n)\n\n/** @internal */\nexport const repeatElementsWith = dual<\n  <B, R2, A, C>(\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<C, E, R2 | R>,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => Stream.Stream<C, E, R2 | R>\n>(\n  3,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ): Stream.Stream<C, E, R | R2> => {\n    const driver = pipe(\n      Schedule.driver(schedule),\n      Effect.map((driver) => {\n        const feed = (\n          input: Chunk.Chunk<A>\n        ): Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2> =>\n          Option.match(Chunk.head(input), {\n            onNone: () => loop,\n            onSome: (a) =>\n              channel.zipRight(\n                core.write(Chunk.of(options.onElement(a))),\n                step(pipe(input, Chunk.drop(1)), a)\n              )\n          })\n        const step = (\n          input: Chunk.Chunk<A>,\n          a: A\n        ): Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2> => {\n          const advance = pipe(\n            driver.next(a),\n            Effect.as(pipe(core.write(Chunk.of(options.onElement(a))), core.flatMap(() => step(input, a))))\n          )\n          const reset: Effect.Effect<\n            Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2>,\n            never,\n            R2\n          > = pipe(\n            driver.last,\n            Effect.orDie,\n            Effect.flatMap((b) =>\n              pipe(\n                driver.reset,\n                Effect.map(() =>\n                  pipe(\n                    core.write(Chunk.of(options.onSchedule(b))),\n                    channel.zipRight(feed(input))\n                  )\n                )\n              )\n            )\n          )\n          return pipe(advance, Effect.orElse(() => reset), channel.unwrap)\n        }\n        const loop: Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, void, unknown, R2> = core.readWith({\n          onInput: feed,\n          onFailure: core.fail,\n          onDone: () => core.void\n        })\n        return loop\n      }),\n      channel.unwrap\n    )\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(driver)))\n  }\n)\n\n/** @internal */\nexport const repeatValue = <A>(value: A): Stream.Stream<A> =>\n  new StreamImpl(\n    channel.repeated(core.write(Chunk.of(value)))\n  )\n\n/** @internal */\nexport const repeatWith = dual<\n  <B, R2, A, C>(\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<C, E, R2 | R>,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => Stream.Stream<C, E, R2 | R>\n>(\n  3,\n  <A, E, R, B, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, unknown, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ): Stream.Stream<C, E, R | R2> => {\n    return pipe(\n      Schedule.driver(schedule),\n      Effect.map((driver) => {\n        const scheduleOutput = pipe(driver.last, Effect.orDie, Effect.map(options.onSchedule))\n        const process = pipe(self, map(options.onElement), toChannel)\n        const loop: Channel.Channel<Chunk.Chunk<C>, unknown, E, unknown, void, unknown, R | R2> = channel.unwrap(\n          Effect.match(driver.next(void 0), {\n            onFailure: () => core.void,\n            onSuccess: () =>\n              pipe(\n                process,\n                channel.zipRight(\n                  pipe(\n                    scheduleOutput,\n                    Effect.map((c) => pipe(core.write(Chunk.of(c)), core.flatMap(() => loop))),\n                    channel.unwrap\n                  )\n                )\n              )\n          })\n        )\n        return new StreamImpl(pipe(process, channel.zipRight(loop)))\n      }),\n      unwrap\n    )\n  }\n)\n\nconst repeatWithSchedule = <A, R, X>(\n  value: A,\n  schedule: Schedule.Schedule<X, A, R>\n): Stream.Stream<A, never, R> => repeatEffectWithSchedule(Effect.succeed(value), schedule)\n\n/** @internal */\nexport const repeatEffectWithSchedule = <A, E, R, X, A0 extends A, R2>(\n  effect: Effect.Effect<A, E, R>,\n  schedule: Schedule.Schedule<X, A0, R2>\n): Stream.Stream<A, E, R | R2> =>\n  flatMap(\n    fromEffect(Effect.zip(effect, Schedule.driver(schedule))),\n    ([a, driver]) =>\n      concat(\n        succeed(a),\n        unfoldEffect(a, (s) =>\n          Effect.matchEffect(driver.next(s as A0), {\n            onFailure: Effect.succeed,\n            onSuccess: () => Effect.map(effect, (nextA) => Option.some([nextA, nextA] as const))\n          }))\n      )\n  )\n\n/** @internal */\nexport const retry = dual<\n  <E0 extends E, R2, E, X>(\n    schedule: Schedule.Schedule<X, E0, R2>\n  ) => <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, E0 extends E, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, E0, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, E0 extends E, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, E0, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    Schedule.driver(schedule).pipe(\n      Effect.map((driver) => {\n        const loop: Channel.Channel<\n          Chunk.Chunk<A>,\n          unknown,\n          E,\n          unknown,\n          unknown,\n          unknown,\n          R | R2\n        > = toChannel(self).pipe(\n          channel.mapOutEffect((out) => Effect.as(driver.reset, out)),\n          channel.catchAll((error) =>\n            driver.next(error as E0).pipe(\n              Effect.match({\n                onFailure: () => core.fail(error),\n                onSuccess: () => loop\n              }),\n              channel.unwrap\n            )\n          )\n        )\n        return loop\n      }),\n      channel.unwrap,\n      fromChannel\n    )\n)\n\n/** @internal */\nexport const run = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<A2, E2 | E, R | R2>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => Effect.Effect<A2, E2 | E, R | R2>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  sink: Sink.Sink<A2, A, unknown, E2, R2>\n): Effect.Effect<A2, E2 | E, R | R2> =>\n  toChannel(self).pipe(\n    channel.pipeToOrFail(_sink.toChannel(sink)),\n    channel.runDrain\n  ))\n\n/** @internal */\nexport const runCollect = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Chunk.Chunk<A>, E, R> => run(self, _sink.collectAll())\n\n/** @internal */\nexport const runCount = <A, E, R>(self: Stream.Stream<A, E, R>): Effect.Effect<number, E, R> => run(self, _sink.count)\n\n/** @internal */\nexport const runDrain = <A, E, R>(self: Stream.Stream<A, E, R>): Effect.Effect<void, E, R> => run(self, _sink.drain)\n\n/** @internal */\nexport const runFold = dual<\n  <S, A>(\n    s: S,\n    f: (s: S, a: A) => S\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<S, E, R>,\n  <A, E, R, S>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => S\n  ) => Effect.Effect<S, E, R>\n>(\n  3,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Effect.Effect<S, E, R> =>\n    runFoldWhile(self, s, constTrue, f)\n)\n\n/** @internal */\nexport const runFoldEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, R | R2>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, R | R2>\n>(3, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, R | R2> => runFoldWhileEffect(self, s, constTrue, f))\n\n/** @internal */\nexport const runFoldScoped = dual<\n  <S, A>(s: S, f: (s: S, a: A) => S) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E, Scope.Scope | R>,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S) => Effect.Effect<S, E, Scope.Scope | R>\n>(\n  3,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Effect.Effect<S, E, Scope.Scope | R> =>\n    pipe(self, runFoldWhileScoped(s, constTrue, f))\n)\n\n/** @internal */\nexport const runFoldScopedEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>\n>(3, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, Scope.Scope | R2 | R> => pipe(self, runFoldWhileScopedEffect(s, constTrue, f)))\n\n/** @internal */\nexport const runFoldWhile = dual<\n  <S, A>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<S, E, R>,\n  <A, E, R, S>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => Effect.Effect<S, E, R>\n>(4, <A, E, R, S>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => S\n): Effect.Effect<S, E, R> => run(self, _sink.fold(s, cont, f)))\n\n/** @internal */\nexport const runFoldWhileEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<S, E2 | E, R | R2>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, R | R2>\n>(4, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, R | R2> => run(self, _sink.foldEffect(s, cont, f)))\n\n/** @internal */\nexport const runFoldWhileScoped = dual<\n  <S, A>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E, Scope.Scope | R>,\n  <A, E, R, S>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => S\n  ) => Effect.Effect<S, E, Scope.Scope | R>\n>(4, <A, E, R, S>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => S\n): Effect.Effect<S, E, Scope.Scope | R> => pipe(self, runScoped(_sink.fold(s, cont, f))))\n\n/** @internal */\nexport const runFoldWhileScopedEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    cont: Predicate<S>,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Effect.Effect<S, E2 | E, Scope.Scope | R2 | R>\n>(4, <A, E, R, S, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  s: S,\n  cont: Predicate<S>,\n  f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n): Effect.Effect<S, E2 | E, Scope.Scope | R2 | R> => pipe(self, runScoped(_sink.foldEffect(s, cont, f))))\n\n/** @internal */\nexport const runForEach = dual<\n  <A, X, E2, R2>(\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<void, E2 | E, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R | R2>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, R | R2> => run(self, _sink.forEach(f)))\n\n/** @internal */\nexport const runForEachChunk = dual<\n  <A, X, E2, R2>(\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<void, E2 | E, R | R2>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R | R2>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, R | R2> => run(self, _sink.forEachChunk(f)))\n\n/** @internal */\nexport const runForEachChunkScoped = dual<\n  <A, X, E2, R2>(\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, Scope.Scope | R2 | R>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, Scope.Scope | R2 | R>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: Chunk.Chunk<A>) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, Scope.Scope | R2 | R> => pipe(self, runScoped(_sink.forEachChunk(f))))\n\n/** @internal */\nexport const runForEachScoped = dual<\n  <A, X, E2, R2>(\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<X, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>\n>(2, <A, E, R, X, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<X, E2, R2>\n): Effect.Effect<void, E2 | E, R2 | R | Scope.Scope> => pipe(self, runScoped(_sink.forEach(f))))\n\n/** @internal */\nexport const runForEachWhile = dual<\n  <A, E2, R2>(\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<void, E2 | E, R | R2>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R | R2>\n>(2, <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<boolean, E2, R2>\n): Effect.Effect<void, E2 | E, R | R2> => run(self, _sink.forEachWhile(f)))\n\n/** @internal */\nexport const runForEachWhileScoped = dual<\n  <A, E2, R2>(\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: A) => Effect.Effect<boolean, E2, R2>\n  ) => Effect.Effect<void, E2 | E, R2 | R | Scope.Scope>\n>(2, <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  f: (a: A) => Effect.Effect<boolean, E2, R2>\n): Effect.Effect<void, E2 | E, R2 | R | Scope.Scope> => pipe(self, runScoped(_sink.forEachWhile(f))))\n\n/** @internal */\nexport const runHead = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Option.Option<A>, E, R> => run(self, _sink.head<A>())\n\n/** @internal */\nexport const runIntoPubSub = dual<\n  <A, E>(\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ): Effect.Effect<void, never, Exclude<R, Scope.Scope>> => pipe(self, runIntoQueue(pubsub))\n)\n\n/** @internal */\nexport const runIntoPubSubScoped = dual<\n  <A, E>(\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    pubsub: PubSub.PubSub<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  pubsub: PubSub.PubSub<Take.Take<A, E>>\n): Effect.Effect<void, never, Scope.Scope | R> => pipe(self, runIntoQueueScoped(pubsub)))\n\n/** @internal */\nexport const runIntoQueue = dual<\n  <A, E>(\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Exclude<R, Scope.Scope>>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ): Effect.Effect<void, never, Exclude<R, Scope.Scope>> => pipe(self, runIntoQueueScoped(queue), Effect.scoped)\n)\n\n/** @internal */\nexport const runIntoQueueElementsScoped = dual<\n  <A, E>(\n    queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  queue: Queue.Enqueue<Exit.Exit<A, Option.Option<E>>>\n): Effect.Effect<void, never, Scope.Scope | R> => {\n  const writer: Channel.Channel<Exit.Exit<A, Option.Option<E>>, Chunk.Chunk<A>, never, E, unknown, unknown, R> = core\n    .readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        core.flatMap(\n          core.fromEffect(Queue.offerAll(queue, Chunk.map(input, Exit.succeed))),\n          () => writer\n        ),\n      onFailure: (cause) => core.fromEffect(Queue.offer(queue, Exit.failCause(Cause.map(cause, Option.some)))),\n      onDone: () => core.fromEffect(Queue.offer(queue, Exit.fail(Option.none())))\n    })\n  return pipe(\n    core.pipeTo(toChannel(self), writer),\n    channel.drain,\n    channel.runScoped,\n    Effect.asVoid\n  )\n})\n\n/** @internal */\nexport const runIntoQueueScoped = dual<\n  <A, E>(\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => <R>(self: Stream.Stream<A, E, R>) => Effect.Effect<void, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    queue: Queue.Enqueue<Take.Take<A, E>>\n  ) => Effect.Effect<void, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  queue: Queue.Enqueue<Take.Take<A, E>>\n): Effect.Effect<void, never, Scope.Scope | R> => {\n  const writer: Channel.Channel<Take.Take<A, E>, Chunk.Chunk<A>, never, E, unknown, unknown, R> = core\n    .readWithCause({\n      onInput: (input: Chunk.Chunk<A>) => core.flatMap(core.write(InternalTake.chunk(input)), () => writer),\n      onFailure: (cause) => core.write(InternalTake.failCause(cause)),\n      onDone: () => core.write(InternalTake.end)\n    })\n  return pipe(\n    core.pipeTo(toChannel(self), writer),\n    channel.mapOutEffect((take) => Queue.offer(queue, take)),\n    channel.drain,\n    channel.runScoped,\n    Effect.asVoid\n  )\n})\n\n/** @internal */\nexport const runLast = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Option.Option<A>, E, R> => run(self, _sink.last())\n\n/** @internal */\nexport const runScoped = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<A2, E | E2, R | R2 | Scope.Scope>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, unknown, E2, R2>\n  ) => Effect.Effect<A2, E | E2, R | R2 | Scope.Scope>\n>(2, <A, E, R, A2, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  sink: Sink.Sink<A2, A, unknown, E2, R2>\n): Effect.Effect<A2, E | E2, R | R2 | Scope.Scope> =>\n  pipe(\n    toChannel(self),\n    channel.pipeToOrFail(_sink.toChannel(sink)),\n    channel.drain,\n    channel.runScoped\n  ))\n\n/** @internal */\nexport const runSum = <E, R>(self: Stream.Stream<number, E, R>): Effect.Effect<number, E, R> => run(self, _sink.sum)\n\n/** @internal */\nexport const scan = dual<\n  <S, A>(s: S, f: (s: S, a: A) => S) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<S, E, R>,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S) => Stream.Stream<S, E, R>\n>(\n  3,\n  <A, E, R, S>(self: Stream.Stream<A, E, R>, s: S, f: (s: S, a: A) => S): Stream.Stream<S, E, R> =>\n    pipe(self, scanEffect(s, (s, a) => Effect.succeed(f(s, a))))\n)\n\n/** @internal */\nexport const scanReduce = dual<\n  <A2, A>(f: (a2: A2 | A, a: A) => A2) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a2: A2 | A, a: A) => A2) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<A, E, R>, f: (a2: A | A2, a: A) => A2): Stream.Stream<A | A2, E, R> =>\n    pipe(self, scanReduceEffect((a2, a) => Effect.succeed(f(a2, a))))\n)\n\n/** @internal */\nexport const scanReduceEffect = dual<\n  <A2, A, E2, R2>(\n    f: (a2: A2 | A, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a2: A2 | A, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a2: A | A2, a: A) => Effect.Effect<A2 | A, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> =>\n    pipe(\n      self,\n      mapAccumEffect<Option.Option<A | A2>, A, A | A2, E2, R2>(Option.none() as Option.Option<A | A2>, (option, a) => {\n        switch (option._tag) {\n          case \"None\": {\n            return Effect.succeed([Option.some<A | A2>(a), a] as const)\n          }\n          case \"Some\": {\n            return pipe(\n              f(option.value, a),\n              Effect.map((b) => [Option.some<A | A2>(b), b] as const)\n            )\n          }\n        }\n      })\n    )\n)\n\n/** @internal */\nexport const schedule = dual<\n  <X, A0 extends A, R2, A>(\n    schedule: Schedule.Schedule<X, A0, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R2 | R>,\n  <A, E, R, X, A0 extends A, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, A0, R2>\n  ) => Stream.Stream<A, E, R2 | R>\n>(\n  2,\n  <A, E, R, X, A0 extends A, R2>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<X, A0, R2>\n  ): Stream.Stream<A, E, R | R2> =>\n    filterMap(\n      scheduleWith(self, schedule, { onElement: Option.some, onSchedule: Option.none }),\n      identity\n    )\n)\n\n/** @internal */\nexport const scheduleWith = dual<\n  <B, A0 extends A, R2, A, C>(\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<C, E, R2 | R>,\n  <A, E, R, B, A0 extends A, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ) => Stream.Stream<C, E, R2 | R>\n>(\n  3,\n  <A, E, R, B, A0 extends A, R2, C>(\n    self: Stream.Stream<A, E, R>,\n    schedule: Schedule.Schedule<B, A0, R2>,\n    options: {\n      readonly onElement: (a: A) => C\n      readonly onSchedule: (b: B) => C\n    }\n  ): Stream.Stream<C, E, R | R2> => {\n    const loop = (\n      driver: Schedule.ScheduleDriver<B, A0, R2>,\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<C>, Chunk.Chunk<A>, E, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (chunk: Chunk.Chunk<A>) => loop(driver, chunk[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeedNow\n        })\n      }\n      return channel.unwrap(\n        Effect.matchEffect(driver.next(next.value as A0), {\n          onFailure: () =>\n            pipe(\n              driver.last,\n              Effect.orDie,\n              Effect.map((b) =>\n                pipe(\n                  core.write(Chunk.make(options.onElement(next.value), options.onSchedule(b))),\n                  core.flatMap(() => loop(driver, iterator))\n                )\n              ),\n              Effect.zipLeft(driver.reset)\n            ),\n          onSuccess: () =>\n            Effect.succeed(pipe(\n              core.write(Chunk.of(options.onElement(next.value))),\n              core.flatMap(() => loop(driver, iterator))\n            ))\n        })\n      )\n    }\n    return new StreamImpl(\n      pipe(\n        core.fromEffect(Schedule.driver(schedule)),\n        core.flatMap((driver) =>\n          pipe(\n            toChannel(self),\n            core.pipeTo(loop(driver, Chunk.empty<A>()[Symbol.iterator]()))\n          )\n        )\n      )\n    )\n  }\n)\n\n/** @internal */\nexport const scanEffect = dual<\n  <S, A, E2, R2>(\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<S, E2 | E, R2 | R>,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ) => Stream.Stream<S, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, S, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    s: S,\n    f: (s: S, a: A) => Effect.Effect<S, E2, R2>\n  ): Stream.Stream<S, E2 | E, R2 | R> =>\n    new StreamImpl(\n      pipe(\n        core.write(Chunk.of(s)),\n        core.flatMap(() =>\n          toChannel(pipe(\n            self,\n            mapAccumEffect(s, (s, a) => pipe(f(s, a), Effect.map((s) => [s, s])))\n          ))\n        )\n      )\n    )\n)\n\n/** @internal */\nexport const scoped = <A, E, R>(\n  effect: Effect.Effect<A, E, R>\n): Stream.Stream<A, E, Exclude<R, Scope.Scope>> =>\n  new StreamImpl(channel.ensuring(channel.scoped(pipe(effect, Effect.map(Chunk.of))), Effect.void))\n\n/** @internal */\nexport const scopedWith = <A, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<A, E, R>\n): Stream.Stream<A, E, R> =>\n  new StreamImpl(channel.scopedWith((scope) =>\n    f(scope).pipe(\n      Effect.map(Chunk.of)\n    )\n  ))\n\n/** @internal */\nexport const some = <A, E, R>(self: Stream.Stream<Option.Option<A>, E, R>): Stream.Stream<A, Option.Option<E>, R> =>\n  pipe(self, mapError(Option.some), someOrFail(() => Option.none()))\n\n/** @internal */\nexport const someOrElse = dual<\n  <A2>(fallback: LazyArg<A2>) => <A, E, R>(self: Stream.Stream<Option.Option<A>, E, R>) => Stream.Stream<A2 | A, E, R>,\n  <A, E, R, A2>(self: Stream.Stream<Option.Option<A>, E, R>, fallback: LazyArg<A2>) => Stream.Stream<A2 | A, E, R>\n>(\n  2,\n  <A, E, R, A2>(self: Stream.Stream<Option.Option<A>, E, R>, fallback: LazyArg<A2>): Stream.Stream<A | A2, E, R> =>\n    pipe(self, map(Option.getOrElse(fallback)))\n)\n\n/** @internal */\nexport const someOrFail = dual<\n  <E2>(error: LazyArg<E2>) => <A, E, R>(self: Stream.Stream<Option.Option<A>, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, E2>(self: Stream.Stream<Option.Option<A>, E, R>, error: LazyArg<E2>) => Stream.Stream<A, E2 | E, R>\n>(\n  2,\n  <A, E, R, E2>(self: Stream.Stream<Option.Option<A>, E, R>, error: LazyArg<E2>): Stream.Stream<A, E | E2, R> =>\n    mapEffectSequential(\n      self,\n      Option.match({\n        onNone: () => Effect.failSync(error),\n        onSome: Effect.succeed\n      })\n    )\n)\n\n/** @internal */\nexport const sliding = dual<\n  (\n    chunkSize: number\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number): Stream.Stream<Chunk.Chunk<A>, E, R> =>\n    slidingSize(self, chunkSize, 1)\n)\n\n/** @internal */\nexport const slidingSize = dual<\n  (\n    chunkSize: number,\n    stepSize: number\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number, stepSize: number) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(\n  3,\n  <A, E, R>(self: Stream.Stream<A, E, R>, chunkSize: number, stepSize: number): Stream.Stream<Chunk.Chunk<A>, E, R> => {\n    if (chunkSize <= 0 || stepSize <= 0) {\n      return die(\n        new Cause.IllegalArgumentException(\"Invalid bounds - `chunkSize` and `stepSize` must be greater than zero\")\n      )\n    }\n    return new StreamImpl(core.suspend(() => {\n      const queue = new RingBuffer<A>(chunkSize)\n      const emitOnStreamEnd = (\n        queueSize: number,\n        channelEnd: Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown>\n      ) => {\n        if (queueSize < chunkSize) {\n          const items = queue.toChunk()\n          const result = Chunk.isEmpty(items) ? Chunk.empty<Chunk.Chunk<A>>() : Chunk.of(items)\n          return pipe(core.write(result), core.flatMap(() => channelEnd))\n        }\n        const lastEmitIndex = queueSize - (queueSize - chunkSize) % stepSize\n        if (lastEmitIndex === queueSize) {\n          return channelEnd\n        }\n        const leftovers = queueSize - (lastEmitIndex - chunkSize + stepSize)\n        const lastItems = pipe(queue.toChunk(), Chunk.takeRight(leftovers))\n        const result = Chunk.isEmpty(lastItems) ? Chunk.empty<Chunk.Chunk<A>>() : Chunk.of(lastItems)\n        return pipe(core.write(result), core.flatMap(() => channelEnd))\n      }\n      const reader = (\n        queueSize: number\n      ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown> =>\n        core.readWithCause({\n          onInput: (input: Chunk.Chunk<A>) =>\n            core.flatMap(\n              core.write(\n                Chunk.filterMap(input, (element, index) => {\n                  queue.put(element)\n                  const currentIndex = queueSize + index + 1\n                  if (currentIndex < chunkSize || (currentIndex - chunkSize) % stepSize > 0) {\n                    return Option.none()\n                  }\n                  return Option.some(queue.toChunk())\n                })\n              ),\n              () => reader(queueSize + input.length)\n            ),\n          onFailure: (cause) => emitOnStreamEnd(queueSize, core.failCause(cause)),\n          onDone: () => emitOnStreamEnd(queueSize, core.void)\n        })\n      return pipe(toChannel(self), core.pipeTo(reader(0)))\n    }))\n  }\n)\n\n/** @internal */\nexport const split: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<Exclude<A, B>>, E, R>\n  <A>(\n    predicate: Predicate<NoInfer<A>>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>\n  <A, E, R, B extends A>(\n    self: Stream.Stream<A, E, R>,\n    refinement: Refinement<A, B>\n  ): Stream.Stream<Chunk.Chunk<Exclude<A, B>>, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<Chunk.Chunk<A>, E, R>\n} = dual(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    predicate: Predicate<A>\n  ): Stream.Stream<Chunk.Chunk<A>, E, R> => {\n    const split = (\n      leftovers: Chunk.Chunk<A>,\n      input: Chunk.Chunk<A>\n    ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown, R> => {\n      const [chunk, remaining] = pipe(leftovers, Chunk.appendAll(input), Chunk.splitWhere(predicate))\n      if (Chunk.isEmpty(chunk) || Chunk.isEmpty(remaining)) {\n        return loop(pipe(chunk, Chunk.appendAll(pipe(remaining, Chunk.drop(1)))))\n      }\n      return pipe(\n        core.write(Chunk.of(chunk)),\n        core.flatMap(() => split(Chunk.empty(), pipe(remaining, Chunk.drop(1))))\n      )\n    }\n    const loop = (\n      leftovers: Chunk.Chunk<A>\n    ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown, R> =>\n      core.readWith({\n        onInput: (input: Chunk.Chunk<A>) => split(leftovers, input),\n        onFailure: core.fail,\n        onDone: () => {\n          if (Chunk.isEmpty(leftovers)) {\n            return core.void\n          }\n          if (Option.isNone(pipe(leftovers, Chunk.findFirst(predicate)))) {\n            return channel.zipRight(core.write(Chunk.of(leftovers)), core.void)\n          }\n          return channel.zipRight(\n            split(Chunk.empty(), leftovers),\n            core.void\n          )\n        }\n      })\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop(Chunk.empty()))))\n  }\n)\n\n/** @internal */\nexport const splitOnChunk = dual<\n  <A>(delimiter: Chunk.Chunk<A>) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<Chunk.Chunk<A>, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, delimiter: Chunk.Chunk<A>) => Stream.Stream<Chunk.Chunk<A>, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, delimiter: Chunk.Chunk<A>): Stream.Stream<Chunk.Chunk<A>, E, R> => {\n  const next = (\n    leftover: Option.Option<Chunk.Chunk<A>>,\n    delimiterIndex: number\n  ): Channel.Channel<Chunk.Chunk<Chunk.Chunk<A>>, Chunk.Chunk<A>, E, E, unknown, unknown, R> =>\n    core.readWithCause({\n      onInput: (inputChunk: Chunk.Chunk<A>) => {\n        let buffer: Array<Chunk.Chunk<A>> | undefined\n        const [carry, delimiterCursor] = pipe(\n          inputChunk,\n          Chunk.reduce(\n            [pipe(leftover, Option.getOrElse(() => Chunk.empty<A>())), delimiterIndex] as const,\n            ([carry, delimiterCursor], a) => {\n              const concatenated = pipe(carry, Chunk.append(a))\n              if (\n                delimiterCursor < delimiter.length &&\n                Equal.equals(a, pipe(delimiter, Chunk.unsafeGet(delimiterCursor)))\n              ) {\n                if (delimiterCursor + 1 === delimiter.length) {\n                  if (buffer === undefined) {\n                    buffer = []\n                  }\n                  buffer.push(pipe(concatenated, Chunk.take(concatenated.length - delimiter.length)))\n                  return [Chunk.empty<A>(), 0] as const\n                }\n                return [concatenated, delimiterCursor + 1] as const\n              }\n              return [concatenated, Equal.equals(a, pipe(delimiter, Chunk.unsafeGet(0))) ? 1 : 0] as const\n            }\n          )\n        )\n        const output = buffer === undefined ? Chunk.empty<Chunk.Chunk<A>>() : Chunk.unsafeFromArray(buffer)\n        return core.flatMap(\n          core.write(output),\n          () => next(Chunk.isNonEmpty(carry) ? Option.some(carry) : Option.none(), delimiterCursor)\n        )\n      },\n      onFailure: (cause) =>\n        Option.match(leftover, {\n          onNone: () => core.failCause(cause),\n          onSome: (chunk) =>\n            channel.zipRight(\n              core.write(Chunk.of(chunk)),\n              core.failCause(cause)\n            )\n        }),\n      onDone: (done) =>\n        Option.match(leftover, {\n          onNone: () => core.succeed(done),\n          onSome: (chunk) => channel.zipRight(core.write(Chunk.of(chunk)), core.succeed(done))\n        })\n    })\n  return new StreamImpl(pipe(toChannel(self), core.pipeTo(next(Option.none(), 0))))\n})\n\n/** @internal */\nexport const splitLines = <E, R>(self: Stream.Stream<string, E, R>): Stream.Stream<string, E, R> =>\n  pipeThroughChannel(self, channel.splitLines())\n\n/** @internal */\nexport const succeed = <A>(value: A): Stream.Stream<A> => fromChunk(Chunk.of(value))\n\n/** @internal */\nexport const sync = <A>(evaluate: LazyArg<A>): Stream.Stream<A> => suspend(() => fromChunk(Chunk.of(evaluate())))\n\n/** @internal */\nexport const suspend = <A, E, R>(stream: LazyArg<Stream.Stream<A, E, R>>): Stream.Stream<A, E, R> =>\n  new StreamImpl(core.suspend(() => toChannel(stream())))\n\n/** @internal */\nexport const take = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  if (!Number.isInteger(n)) {\n    return die(new Cause.IllegalArgumentException(`${n} must be an integer`))\n  }\n  const loop = (n: number): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> =>\n    core.readWith({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const taken = pipe(input, Chunk.take(Math.min(n, Number.POSITIVE_INFINITY)))\n        const leftover = Math.max(0, n - taken.length)\n        const more = leftover > 0\n        if (more) {\n          return pipe(core.write(taken), core.flatMap(() => loop(leftover)))\n        }\n        return core.write(taken)\n      },\n      onFailure: core.fail,\n      onDone: core.succeed\n    })\n  return new StreamImpl(\n    pipe(\n      toChannel(self),\n      channel.pipeToOrFail(0 < n ? loop(n) : core.void)\n    )\n  )\n})\n\n/** @internal */\nexport const takeRight = dual<\n  (n: number) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, n: number) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, n: number): Stream.Stream<A, E, R> => {\n  if (n <= 0) {\n    return empty\n  }\n  return new StreamImpl(\n    pipe(\n      Effect.succeed(new RingBuffer<A>(n)),\n      Effect.map((queue) => {\n        const reader: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, void, unknown> = core.readWith({\n          onInput: (input: Chunk.Chunk<A>) => {\n            for (const element of input) {\n              queue.put(element)\n            }\n            return reader\n          },\n          onFailure: core.fail,\n          onDone: () => pipe(core.write(queue.toChunk()), channel.zipRight(core.void))\n        })\n        return pipe(toChannel(self), core.pipeTo(reader))\n      }),\n      channel.unwrap\n    )\n  )\n})\n\n/** @internal */\nexport const takeUntil: {\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) => {\n      const taken = pipe(input, Chunk.takeWhile((a) => !predicate(a)))\n      const last = pipe(input, Chunk.drop(taken.length), Chunk.take(1))\n      if (Chunk.isEmpty(last)) {\n        return pipe(core.write(taken), core.flatMap(() => loop))\n      }\n      return core.write(pipe(taken, Chunk.appendAll(last)))\n    },\n    onFailure: core.fail,\n    onDone: core.succeed\n  })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n})\n\n/** @internal */\nexport const takeUntilEffect: {\n  <A, E2, R2>(\n    predicate: (a: NoInfer<A>) => Effect.Effect<boolean, E2, R2>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    predicate: (a: A) => Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const loop = (\n      iterator: Iterator<A>\n    ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> => {\n      const next = iterator.next()\n      if (next.done) {\n        return core.readWithCause({\n          onInput: (elem) => loop(elem[Symbol.iterator]()),\n          onFailure: core.failCause,\n          onDone: core.succeed\n        })\n      }\n      return pipe(\n        predicate(next.value),\n        Effect.map((bool) =>\n          bool ?\n            core.write(Chunk.of(next.value)) :\n            pipe(\n              core.write(Chunk.of(next.value)),\n              core.flatMap(() => loop(iterator))\n            )\n        ),\n        channel.unwrap\n      )\n    }\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop(Chunk.empty<A>()[Symbol.iterator]()))))\n  }\n)\n\n/** @internal */\nexport const takeWhile: {\n  <A, B extends A>(\n    refinement: Refinement<NoInfer<A>, B>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<B, E, R>\n  <A>(predicate: Predicate<NoInfer<A>>): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>\n  <A, E, R, B extends A>(self: Stream.Stream<A, E, R>, refinement: Refinement<A, B>): Stream.Stream<B, E, R>\n  <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R>\n} = dual(2, <A, E, R>(self: Stream.Stream<A, E, R>, predicate: Predicate<A>): Stream.Stream<A, E, R> => {\n  const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, never, never, unknown, unknown> = core.readWith({\n    onInput: (input: Chunk.Chunk<A>) => {\n      const taken = pipe(input, Chunk.takeWhile(predicate))\n      const more = taken.length === input.length\n      if (more) {\n        return pipe(core.write(taken), core.flatMap(() => loop))\n      }\n      return core.write(taken)\n    },\n    onFailure: core.fail,\n    onDone: core.succeed\n  })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(loop)))\n})\n\n/** @internal */\nexport const tap: {\n  <A, X, E2, R2>(\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (a: NoInfer<A>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => mapEffectSequential(self, (a) => Effect.as(f(a), a))\n)\n\n/** @internal */\nexport const tapBoth: {\n  <E, X1, E2, R2, A, X2, E3, R3>(\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): <R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E | E2 | E3, R | R2 | R3>\n  <A, E, R, X1, E2, R2, X2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): Stream.Stream<A, E | E2 | E3, R | R2 | R3>\n} = dual(\n  2,\n  <A, E, R, X1, E2, R2, X2, E3, R3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly onFailure: (e: NoInfer<E>) => Effect.Effect<X1, E2, R2>\n      readonly onSuccess: (a: NoInfer<A>) => Effect.Effect<X2, E3, R3>\n    }\n  ): Stream.Stream<A, E | E2 | E3, R | R2 | R3> => pipe(self, tapError(options.onFailure), tap(options.onSuccess))\n)\n\n/** @internal */\nexport const tapError: {\n  <E, X, E2, R2>(\n    f: (error: NoInfer<E>) => Effect.Effect<X, E2, R2>\n  ): <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (error: E) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (error: E) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> =>\n    catchAll(self, (error) => fromEffect(Effect.zipRight(f(error), Effect.fail(error))))\n)\n\n/** @internal */\nexport const tapErrorCause: {\n  <E, X, E2, R2>(\n    f: (cause: Cause.Cause<NoInfer<E>>) => Effect.Effect<X, E2, R2>\n  ): <A, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E | E2, R2 | R>\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2>\n} = dual(\n  2,\n  <A, E, R, X, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    f: (cause: Cause.Cause<E>) => Effect.Effect<X, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R | R2> = core\n      .readWithCause({\n        onInput: (chunk) => core.flatMap(core.write(chunk), () => loop),\n        onFailure: (cause) => core.fromEffect(Effect.zipRight(f(cause), Effect.failCause(cause))),\n        onDone: core.succeedNow\n      })\n\n    return new StreamImpl(pipe(toChannel(self), core.pipeTo(loop)))\n  }\n)\n\n/** @internal */\nexport const tapSink = dual<\n  <A, E2, R2>(\n    sink: Sink.Sink<unknown, A, unknown, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<unknown, A, unknown, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<unknown, A, unknown, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> =>\n    pipe(\n      fromEffect(Effect.all([Queue.bounded<Take.Take<A, E | E2>>(1), Deferred.make<void>()])),\n      flatMap(([queue, deferred]) => {\n        const right = flattenTake(fromQueue(queue, { maxChunkSize: 1 }))\n        const loop: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2> = core\n          .readWithCause({\n            onInput: (chunk: Chunk.Chunk<A>) =>\n              pipe(\n                core.fromEffect(Queue.offer(queue, InternalTake.chunk(chunk))),\n                core.foldCauseChannel({\n                  onFailure: () => core.flatMap(core.write(chunk), () => channel.identityChannel()),\n                  onSuccess: () => core.flatMap(core.write(chunk), () => loop)\n                })\n              ) as Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, unknown, unknown, R2>,\n            onFailure: (cause: Cause.Cause<E | E2>) =>\n              pipe(\n                core.fromEffect(Queue.offer(queue, InternalTake.failCause(cause))),\n                core.foldCauseChannel({\n                  onFailure: () => core.failCause(cause),\n                  onSuccess: () => core.failCause(cause)\n                })\n              ),\n            onDone: () =>\n              pipe(\n                core.fromEffect(Queue.offer(queue, InternalTake.end)),\n                core.foldCauseChannel({\n                  onFailure: () => core.void,\n                  onSuccess: () => core.void\n                })\n              )\n          })\n        return pipe(\n          new StreamImpl(pipe(\n            core.pipeTo(toChannel(self), loop),\n            channel.ensuring(Effect.zipRight(\n              Effect.forkDaemon(Queue.offer(queue, InternalTake.end)),\n              Deferred.await(deferred)\n            ))\n          )),\n          merge(\n            execute(pipe(\n              run(right, sink),\n              Effect.ensuring(Effect.zipRight(\n                Queue.shutdown(queue),\n                Deferred.succeed(deferred, void 0)\n              ))\n            ))\n          )\n        )\n      })\n    )\n)\n\n/** @internal */\nexport const throttle = dual<\n  <A>(\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => number\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): Stream.Stream<A, E, R> =>\n    throttleEffect(self, {\n      ...options,\n      cost: (chunk) => Effect.succeed(options.cost(chunk))\n    })\n)\n\n/** @internal */\nexport const throttleEffect = dual<\n  <A, E2, R2>(\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>\n      readonly units: number\n      readonly duration: Duration.DurationInput\n      readonly burst?: number | undefined\n      readonly strategy?: \"enforce\" | \"shape\" | undefined\n    }\n  ): Stream.Stream<A, E | E2, R | R2> => {\n    if (options.strategy === \"enforce\") {\n      return throttleEnforceEffect(self, options.cost, options.units, options.duration, options.burst ?? 0)\n    }\n    return throttleShapeEffect(self, options.cost, options.units, options.duration, options.burst ?? 0)\n  }\n)\n\nconst throttleEnforceEffect = <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  cost: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>,\n  units: number,\n  duration: Duration.DurationInput,\n  burst: number\n): Stream.Stream<A, E | E2, R | R2> => {\n  const loop = (\n    tokens: number,\n    timestampMillis: number\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, void, unknown, R2> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          cost(input),\n          Effect.zip(Clock.currentTimeMillis),\n          Effect.map(([weight, currentTimeMillis]) => {\n            const elapsed = currentTimeMillis - timestampMillis\n            const cycles = elapsed / Duration.toMillis(duration)\n            const sum = tokens + (cycles * units)\n            const max = units + burst < 0 ? Number.POSITIVE_INFINITY : units + burst\n            const available = sum < 0 ? max : Math.min(sum, max)\n            if (weight <= available) {\n              return pipe(\n                core.write(input),\n                core.flatMap(() => loop(available - weight, currentTimeMillis))\n              )\n            }\n            return loop(tokens, timestampMillis)\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  const throttled = pipe(\n    Clock.currentTimeMillis,\n    Effect.map((currentTimeMillis) => loop(units, currentTimeMillis)),\n    channel.unwrap\n  )\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(throttled)))\n}\n\nconst throttleShapeEffect = <A, E, R, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  costFn: (chunk: Chunk.Chunk<A>) => Effect.Effect<number, E2, R2>,\n  units: number,\n  duration: Duration.DurationInput,\n  burst: number\n): Stream.Stream<A, E | E2, R | R2> => {\n  const loop = (\n    tokens: number,\n    timestampMillis: number\n  ): Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E | E2, E, void, unknown, R2> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) =>\n        pipe(\n          costFn(input),\n          Effect.zip(Clock.currentTimeMillis),\n          Effect.map(([weight, currentTimeMillis]) => {\n            const elapsed = currentTimeMillis - timestampMillis\n            const cycles = elapsed / Duration.toMillis(duration)\n            const sum = tokens + (cycles * units)\n            const max = units + burst < 0 ? Number.POSITIVE_INFINITY : units + burst\n            const available = sum < 0 ? max : Math.min(sum, max)\n            const remaining = available - weight\n            const waitCycles = remaining >= 0 ? 0 : -remaining / units\n            const delay = Duration.millis(Math.max(0, waitCycles * Duration.toMillis(duration)))\n            if (Duration.greaterThan(delay, Duration.zero)) {\n              return pipe(\n                core.fromEffect(Clock.sleep(delay)),\n                channel.zipRight(core.write(input)),\n                core.flatMap(() => loop(remaining, currentTimeMillis))\n              )\n            }\n            return core.flatMap(\n              core.write(input),\n              () => loop(remaining, currentTimeMillis)\n            )\n          }),\n          channel.unwrap\n        ),\n      onFailure: core.failCause,\n      onDone: () => core.void\n    })\n  const throttled = pipe(\n    Clock.currentTimeMillis,\n    Effect.map((currentTimeMillis) => loop(units, currentTimeMillis)),\n    channel.unwrap\n  )\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(throttled)))\n}\n\n/** @internal */\nexport const tick = (interval: Duration.DurationInput): Stream.Stream<void> =>\n  repeatWithSchedule(void 0, Schedule.spaced(interval))\n\n/** @internal */\nexport const timeout = dual<\n  (duration: Duration.DurationInput) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput) => Stream.Stream<A, E, R>\n>(2, <A, E, R>(self: Stream.Stream<A, E, R>, duration: Duration.DurationInput): Stream.Stream<A, E, R> =>\n  pipe(\n    toPull(self),\n    Effect.map(Effect.timeoutFail<Option.Option<E>>({\n      onTimeout: () => Option.none(),\n      duration\n    })),\n    fromPull\n  ))\n\n/** @internal */\nexport const timeoutFail = dual<\n  <E2>(\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ) => Stream.Stream<A, E2 | E, R>\n>(\n  3,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    error: LazyArg<E2>,\n    duration: Duration.DurationInput\n  ): Stream.Stream<A, E | E2, R> => pipe(self, timeoutTo(duration, failSync(error)))\n)\n\n/** @internal */\nexport const timeoutFailCause = dual<\n  <E2>(\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R>,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ) => Stream.Stream<A, E2 | E, R>\n>(\n  3,\n  <A, E, R, E2>(\n    self: Stream.Stream<A, E, R>,\n    cause: LazyArg<Cause.Cause<E2>>,\n    duration: Duration.DurationInput\n  ): Stream.Stream<A, E | E2, R> =>\n    pipe(\n      toPull(self),\n      Effect.map(\n        Effect.timeoutFailCause<Option.Option<E | E2>>({\n          onTimeout: () => Cause.map(cause(), Option.some),\n          duration\n        })\n      ),\n      fromPull\n    )\n)\n\n/** @internal */\nexport const timeoutTo = dual<\n  <A2, E2, R2>(\n    duration: Duration.DurationInput,\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2 | A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    duration: Duration.DurationInput,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<A2 | A, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    duration: Duration.DurationInput,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<A2 | A, E2 | E, R2 | R> => {\n    const StreamTimeout = new Cause.RuntimeException(\"Stream Timeout\")\n    return pipe(\n      self,\n      timeoutFailCause<E | E2>(() => Cause.die(StreamTimeout), duration),\n      catchSomeCause((cause) =>\n        Cause.isDieType(cause) &&\n          Cause.isRuntimeException(cause.defect) &&\n          cause.defect.message !== undefined &&\n          cause.defect.message === \"Stream Timeout\" ?\n          Option.some(that) :\n          Option.none()\n      )\n    )\n  }\n)\n\nconst pubsubFromOptions = <A, E>(\n  options: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<PubSub.PubSub<Take.Take<A, E>>> => {\n  if (typeof options === \"number\") {\n    return PubSub.bounded(options)\n  } else if (options.capacity === \"unbounded\") {\n    return PubSub.unbounded({ replay: options.replay })\n  }\n  switch (options.strategy) {\n    case \"dropping\":\n      return PubSub.dropping(options)\n    case \"sliding\":\n      return PubSub.sliding(options)\n    default:\n      return PubSub.bounded(options)\n  }\n}\n\n/** @internal */\nexport const toPubSub = dual<\n  (\n    capacity: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    capacity: number | {\n      readonly capacity: \"unbounded\"\n      readonly replay?: number | undefined\n    } | {\n      readonly capacity: number\n      readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n      readonly replay?: number | undefined\n    }\n  ) => Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R>\n>(2, <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  capacity: number | {\n    readonly capacity: \"unbounded\"\n    readonly replay?: number | undefined\n  } | {\n    readonly capacity: number\n    readonly strategy?: \"sliding\" | \"dropping\" | \"suspend\" | undefined\n    readonly replay?: number | undefined\n  }\n): Effect.Effect<PubSub.PubSub<Take.Take<A, E>>, never, Scope.Scope | R> =>\n  pipe(\n    Effect.acquireRelease(pubsubFromOptions<A, E>(capacity), (pubsub) => PubSub.shutdown(pubsub)),\n    Effect.tap((pubsub) => pipe(self, runIntoPubSubScoped(pubsub), Effect.forkScoped))\n  ))\n\n/** @internal */\nexport const toPull = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Effect.Effect<Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>, never, R | Scope.Scope> =>\n  Effect.map(channel.toPull(toChannel(self)), (pull) =>\n    pipe(\n      pull,\n      Effect.mapError(Option.some),\n      Effect.flatMap(Either.match({\n        onLeft: () => Effect.fail(Option.none()),\n        onRight: Effect.succeed\n      }))\n    ))\n\n/** @internal */\nexport const toQueue = dual<\n  (\n    options?: {\n      readonly strategy?: \"suspend\" | \"sliding\" | \"dropping\" | undefined\n      readonly capacity?: number | undefined\n    } | {\n      readonly strategy: \"unbounded\"\n    }\n  ) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, R | Scope.Scope>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: {\n      readonly strategy?: \"suspend\" | \"sliding\" | \"dropping\" | undefined\n      readonly capacity?: number | undefined\n    } | {\n      readonly strategy: \"unbounded\"\n    }\n  ) => Effect.Effect<Queue.Dequeue<Take.Take<A, E>>, never, R | Scope.Scope>\n>((args) => isStream(args[0]), <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options?: {\n    readonly strategy?: \"suspend\" | \"sliding\" | \"dropping\" | undefined\n    readonly capacity?: number | undefined\n  } | {\n    readonly strategy: \"unbounded\"\n  }\n) =>\n  Effect.tap(\n    Effect.acquireRelease(\n      options?.strategy === \"unbounded\" ?\n        Queue.unbounded<Take.Take<A, E>>() :\n        options?.strategy === \"dropping\" ?\n        Queue.dropping<Take.Take<A, E>>(options.capacity ?? 2) :\n        options?.strategy === \"sliding\" ?\n        Queue.sliding<Take.Take<A, E>>(options.capacity ?? 2) :\n        Queue.bounded<Take.Take<A, E>>(options?.capacity ?? 2),\n      (queue) => Queue.shutdown(queue)\n    ),\n    (queue) => Effect.forkScoped(runIntoQueueScoped(self, queue))\n  ))\n\n/** @internal */\nexport const toQueueOfElements = dual<\n  (options?: {\n    readonly capacity?: number | undefined\n  }) => <A, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Effect.Effect<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>, never, R | Scope.Scope>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: {\n      readonly capacity?: number | undefined\n    }\n  ) => Effect.Effect<Queue.Dequeue<Exit.Exit<A, Option.Option<E>>>, never, R | Scope.Scope>\n>((args) => isStream(args[0]), <A, E, R>(\n  self: Stream.Stream<A, E, R>,\n  options?: {\n    readonly capacity?: number | undefined\n  }\n) =>\n  Effect.tap(\n    Effect.acquireRelease(\n      Queue.bounded<Exit.Exit<A, Option.Option<E>>>(options?.capacity ?? 2),\n      (queue) => Queue.shutdown(queue)\n    ),\n    (queue) => Effect.forkScoped(runIntoQueueElementsScoped(self, queue))\n  ))\n\n/** @internal */\nexport const toReadableStream = dual<\n  <A>(\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => <E>(self: Stream.Stream<A, E>) => ReadableStream<A>,\n  <A, E>(\n    self: Stream.Stream<A, E>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => ReadableStream<A>\n>(\n  (args) => isStream(args[0]),\n  <A, E>(\n    self: Stream.Stream<A, E>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => toReadableStreamRuntime(self, Runtime.defaultRuntime, options)\n)\n\n/** @internal */\nexport const toReadableStreamEffect = dual<\n  <A>(\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Effect.Effect<ReadableStream<A>, never, R>,\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => Effect.Effect<ReadableStream<A>, never, R>\n>(\n  (args) => isStream(args[0]),\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => Effect.map(Effect.runtime<R>(), (runtime) => toReadableStreamRuntime(self, runtime, options))\n)\n\n/** @internal */\nexport const toReadableStreamRuntime = dual<\n  <A, XR>(\n    runtime: Runtime.Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => <E, R extends XR>(self: Stream.Stream<A, E, R>) => ReadableStream<A>,\n  <A, E, XR, R extends XR>(\n    self: Stream.Stream<A, E, R>,\n    runtime: Runtime.Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ) => ReadableStream<A>\n>(\n  (args) => isStream(args[0]),\n  <A, E, XR, R extends XR>(\n    self: Stream.Stream<A, E, R>,\n    runtime: Runtime.Runtime<XR>,\n    options?: { readonly strategy?: QueuingStrategy<A> | undefined }\n  ): ReadableStream<A> => {\n    const runSync = Runtime.runSync(runtime)\n    const runFork = Runtime.runFork(runtime)\n\n    let pull: Effect.Effect<void, never, R>\n    let scope: Scope.CloseableScope\n    return new ReadableStream<A>({\n      start(controller) {\n        scope = runSync(Scope.make())\n        const pullChunk: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R> = pipe(\n          toPull(self),\n          Scope.extend(scope),\n          runSync,\n          Effect.flatMap((chunk) => Chunk.isEmpty(chunk) ? pullChunk : Effect.succeed(chunk))\n        )\n        pull = pipe(\n          pullChunk,\n          Effect.tap((chunk) =>\n            Effect.sync(() => {\n              Chunk.map(chunk, (a) => {\n                controller.enqueue(a)\n              })\n            })\n          ),\n          Effect.tapErrorCause(() => Scope.close(scope, Exit.void)),\n          Effect.catchTags({\n            \"None\": () =>\n              Effect.sync(() => {\n                controller.close()\n              }),\n            \"Some\": (error) =>\n              Effect.sync(() => {\n                controller.error(error.value)\n              })\n          }),\n          Effect.asVoid\n        )\n      },\n      pull() {\n        return new Promise<void>((resolve) => {\n          runFork(pull, { scope }).addObserver((_) => resolve())\n        })\n      },\n      cancel() {\n        return new Promise<void>((resolve) => {\n          runFork(Scope.close(scope, Exit.void)).addObserver((_) => resolve())\n        })\n      }\n    }, options?.strategy)\n  }\n)\n\n/** @internal */\nexport const transduce = dual<\n  <A2, A, E2, R2>(\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    sink: Sink.Sink<A2, A, A, E2, R2>\n  ): Stream.Stream<A2, E2 | E, R2 | R> => {\n    const newChannel = core.suspend(() => {\n      const leftovers = { ref: Chunk.empty<Chunk.Chunk<A>>() }\n      const upstreamDone = { ref: false }\n      const buffer: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> = core.suspend(\n        () => {\n          const leftover = leftovers.ref\n          if (Chunk.isEmpty(leftover)) {\n            return core.readWith({\n              onInput: (input) => pipe(core.write(input), core.flatMap(() => buffer)),\n              onFailure: core.fail,\n              onDone: core.succeedNow\n            })\n          }\n          leftovers.ref = Chunk.empty<Chunk.Chunk<A>>()\n          return pipe(channel.writeChunk(leftover), core.flatMap(() => buffer))\n        }\n      )\n      const concatAndGet = (chunk: Chunk.Chunk<Chunk.Chunk<A>>): Chunk.Chunk<Chunk.Chunk<A>> => {\n        const leftover = leftovers.ref\n        const concatenated = Chunk.appendAll(leftover, Chunk.filter(chunk, (chunk) => chunk.length !== 0))\n        leftovers.ref = concatenated\n        return concatenated\n      }\n      const upstreamMarker: Channel.Channel<Chunk.Chunk<A>, Chunk.Chunk<A>, E, E, unknown, unknown> = core\n        .readWith({\n          onInput: (input: Chunk.Chunk<A>) => core.flatMap(core.write(input), () => upstreamMarker),\n          onFailure: core.fail,\n          onDone: (done) =>\n            channel.zipRight(\n              core.sync(() => {\n                upstreamDone.ref = true\n              }),\n              core.succeedNow(done)\n            )\n        })\n      const transducer: Channel.Channel<Chunk.Chunk<A2>, Chunk.Chunk<A>, E | E2, never, void, unknown, R | R2> = pipe(\n        sink,\n        _sink.toChannel,\n        core.collectElements,\n        core.flatMap(([leftover, z]) =>\n          pipe(\n            core.succeed([upstreamDone.ref, concatAndGet(leftover)] as const),\n            core.flatMap(([done, newLeftovers]) => {\n              const nextChannel = done && Chunk.isEmpty(newLeftovers) ?\n                core.void :\n                transducer\n              return pipe(core.write(Chunk.of(z)), core.flatMap(() => nextChannel))\n            })\n          )\n        )\n      )\n      return pipe(\n        toChannel(self),\n        core.pipeTo(upstreamMarker),\n        core.pipeTo(buffer),\n        channel.pipeToOrFail(transducer)\n      )\n    })\n    return new StreamImpl(newChannel)\n  }\n)\n\n/** @internal */\nexport const unfold = <S, A>(s: S, f: (s: S) => Option.Option<readonly [A, S]>): Stream.Stream<A> =>\n  unfoldChunk(s, (s) => pipe(f(s), Option.map(([a, s]) => [Chunk.of(a), s])))\n\n/** @internal */\nexport const unfoldChunk = <S, A>(\n  s: S,\n  f: (s: S) => Option.Option<readonly [Chunk.Chunk<A>, S]>\n): Stream.Stream<A> => {\n  const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, never, unknown, unknown, unknown> =>\n    Option.match(f(s), {\n      onNone: () => core.void,\n      onSome: ([chunk, s]) => core.flatMap(core.write(chunk), () => loop(s))\n    })\n  return new StreamImpl(core.suspend(() => loop(s)))\n}\n\n/** @internal */\nexport const unfoldChunkEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<Option.Option<readonly [Chunk.Chunk<A>, S]>, E, R>\n): Stream.Stream<A, E, R> =>\n  suspend(() => {\n    const loop = (s: S): Channel.Channel<Chunk.Chunk<A>, unknown, E, unknown, unknown, unknown, R> =>\n      channel.unwrap(\n        Effect.map(\n          f(s),\n          Option.match({\n            onNone: () => core.void,\n            onSome: ([chunk, s]) => core.flatMap(core.write(chunk), () => loop(s))\n          })\n        )\n      )\n    return new StreamImpl(loop(s))\n  })\n\n/** @internal */\nexport const unfoldEffect = <S, A, E, R>(\n  s: S,\n  f: (s: S) => Effect.Effect<Option.Option<readonly [A, S]>, E, R>\n): Stream.Stream<A, E, R> =>\n  unfoldChunkEffect(s, (s) => pipe(f(s), Effect.map(Option.map(([a, s]) => [Chunk.of(a), s]))))\n\nconst void_: Stream.Stream<void> = succeed(void 0)\nexport {\n  /** @internal */\n  void_ as void\n}\n\n/** @internal */\nexport const unwrap = <A, E2, R2, E, R>(\n  effect: Effect.Effect<Stream.Stream<A, E2, R2>, E, R>\n): Stream.Stream<A, E | E2, R | R2> => flatten(fromEffect(effect))\n\n/** @internal */\nexport const unwrapScoped = <A, E2, R2, E, R>(\n  effect: Effect.Effect<Stream.Stream<A, E2, R2>, E, R>\n): Stream.Stream<A, E | E2, Exclude<R, Scope.Scope> | R2> => flatten(scoped(effect))\n\n/** @internal */\nexport const unwrapScopedWith = <A, E2, R2, E, R>(\n  f: (scope: Scope.Scope) => Effect.Effect<Stream.Stream<A, E2, R2>, E, R>\n): Stream.Stream<A, E | E2, R | R2> => flatten(scopedWith((scope) => f(scope)))\n\n/** @internal */\nexport const updateService = dual<\n  <T extends Context.Tag<any, any>>(\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, T | R>,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ) => Stream.Stream<A, E, T | R>\n>(\n  3,\n  <A, E, R, T extends Context.Tag<any, any>>(\n    self: Stream.Stream<A, E, R>,\n    tag: T,\n    f: (service: Context.Tag.Service<T>) => Context.Tag.Service<T>\n  ): Stream.Stream<A, E, T | R> =>\n    pipe(\n      self,\n      mapInputContext((context) =>\n        pipe(\n          context,\n          Context.add(tag, f(pipe(context, Context.unsafeGet(tag))))\n        )\n      )\n    )\n)\n\n/** @internal */\nexport const when = dual<\n  (test: LazyArg<boolean>) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, R>,\n  <A, E, R>(self: Stream.Stream<A, E, R>, test: LazyArg<boolean>) => Stream.Stream<A, E, R>\n>(\n  2,\n  <A, E, R>(self: Stream.Stream<A, E, R>, test: LazyArg<boolean>): Stream.Stream<A, E, R> =>\n    pipe(self, whenEffect(Effect.sync(test)))\n)\n\n/** @internal */\nexport const whenCase = <A, A2, E, R>(\n  evaluate: LazyArg<A>,\n  pf: (a: A) => Option.Option<Stream.Stream<A2, E, R>>\n) => whenCaseEffect(pf)(Effect.sync(evaluate))\n\n/** @internal */\nexport const whenCaseEffect = dual<\n  <A, A2, E2, R2>(\n    pf: (a: A) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => <E, R>(self: Effect.Effect<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (a: A) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Effect.Effect<A, E, R>,\n    pf: (a: A) => Option.Option<Stream.Stream<A2, E2, R2>>\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    pipe(\n      fromEffect(self),\n      flatMap((a) => pipe(pf(a), Option.getOrElse(() => empty)))\n    )\n)\n\n/** @internal */\nexport const whenEffect = dual<\n  <E2, R2>(\n    effect: Effect.Effect<boolean, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<boolean, E2, R2>\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    effect: Effect.Effect<boolean, E2, R2>\n  ): Stream.Stream<A, E | E2, R | R2> => pipe(fromEffect(effect), flatMap((bool) => bool ? self : empty))\n)\n\n/** @internal */\nexport const withSpan: {\n  (\n    name: string,\n    options?: Tracer.SpanOptions\n  ): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E, Exclude<R, Tracer.ParentSpan>>\n  <A, E, R>(\n    self: Stream.Stream<A, E, R>,\n    name: string,\n    options?: Tracer.SpanOptions\n  ): Stream.Stream<A, E, Exclude<R, Tracer.ParentSpan>>\n} = function() {\n  const dataFirst = typeof arguments[0] !== \"string\"\n  const name = dataFirst ? arguments[1] : arguments[0]\n  const options = InternalTracer.addSpanStackTrace(dataFirst ? arguments[2] : arguments[1])\n  if (dataFirst) {\n    const self = arguments[0]\n    return new StreamImpl(channel.withSpan(toChannel(self), name, options))\n  }\n  return (self: Stream.Stream<any, any, any>) => new StreamImpl(channel.withSpan(toChannel(self), name, options))\n} as any\n\n/** @internal */\nexport const zip = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<[A, A2], E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<[A, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<[A, A2], E2 | E, R2 | R> => pipe(self, zipWith(that, (a, a2) => [a, a2]))\n)\n\n/** @internal */\nexport const zipFlatten = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>\n  ) => <A extends ReadonlyArray<any>, E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Stream.Stream<[...A, A2], E2 | E, R2 | R>,\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ) => Stream.Stream<[...A, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A extends ReadonlyArray<any>, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>\n  ): Stream.Stream<[...A, A2], E2 | E, R2 | R> => pipe(self, zipWith(that, (a, a2) => [...a, a2]))\n)\n\n/** @internal */\nexport const zipAll = dual<\n  <A2, E2, R2, A>(\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<[A, A2], E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n    }\n  ) => Stream.Stream<[A, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n    }\n  ): Stream.Stream<[A, A2], E2 | E, R2 | R> =>\n    zipAllWith(self, {\n      other: options.other,\n      onSelf: (a) => [a, options.defaultOther],\n      onOther: (a2) => [options.defaultSelf, a2],\n      onBoth: (a, a2) => [a, a2]\n    })\n)\n\n/** @internal */\nexport const zipAllLeft = dual<\n  <A2, E2, R2, A>(\n    that: Stream.Stream<A2, E2, R2>,\n    defaultLeft: A\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    defaultLeft: A\n  ) => Stream.Stream<A, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    defaultSelf: A\n  ): Stream.Stream<A, E | E2, R | R2> =>\n    zipAllWith(self, {\n      other,\n      onSelf: identity,\n      onOther: () => defaultSelf,\n      onBoth: (a) => a\n    })\n)\n\n/** @internal */\nexport const zipAllRight = dual<\n  <A2, E2, R2>(\n    that: Stream.Stream<A2, E2, R2>,\n    defaultRight: A2\n  ) => <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A2, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    defaultRight: A2\n  ) => Stream.Stream<A2, E2 | E, R2 | R>\n>(\n  3,\n  <A, E, R, A2, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    other: Stream.Stream<A2, E2, R2>,\n    defaultRight: A2\n  ): Stream.Stream<A2, E | E2, R | R2> =>\n    zipAllWith(self, {\n      other,\n      onSelf: () => defaultRight,\n      onOther: identity,\n      onBoth: (_, a2) => a2\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKey = dual<\n  <A2, E2, R2, A, K>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => <E, R>(\n    self: Stream.Stream<readonly [K, A], E, R>\n  ) => Stream.Stream<[K, [A, A2]], E2 | E, R2 | R>,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, [A, A2]], E2 | E, R2 | R>\n>(\n  2,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, [A, A2]], E2 | E, R2 | R> =>\n    zipAllSortedByKeyWith(self, {\n      other: options.other,\n      onSelf: (a) => [a, options.defaultOther],\n      onOther: (a2) => [options.defaultSelf, a2],\n      onBoth: (a, a2) => [a, a2],\n      order: options.order\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKeyLeft = dual<\n  <A2, E2, R2, A, K>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ) => <E, R>(self: Stream.Stream<readonly [K, A], E, R>) => Stream.Stream<[K, A], E2 | E, R2 | R>,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, A], E2 | E, R2 | R>\n>(\n  2,\n  <K, A, E, R, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultSelf: A\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, A], E2 | E, R2 | R> =>\n    zipAllSortedByKeyWith(self, {\n      other: options.other,\n      onSelf: identity,\n      onOther: () => options.defaultSelf,\n      onBoth: (a) => a,\n      order: options.order\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKeyRight = dual<\n  <K, A2, E2, R2>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => <A, E, R>(self: Stream.Stream<readonly [K, A], E, R>) => Stream.Stream<[K, A2], E2 | E, R2 | R>,\n  <A, E, R, K, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, A2], E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, K, A2, E2, R2>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly defaultOther: A2\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, A2], E2 | E, R2 | R> =>\n    zipAllSortedByKeyWith(self, {\n      other: options.other,\n      onSelf: () => options.defaultOther,\n      onOther: identity,\n      onBoth: (_, a2) => a2,\n      order: options.order\n    })\n)\n\n/** @internal */\nexport const zipAllSortedByKeyWith = dual<\n  <K, A2, E2, R2, A, A3>(\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ) => <E, R>(self: Stream.Stream<readonly [K, A], E, R>) => Stream.Stream<[K, A3], E2 | E, R2 | R>,\n  <K, A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ) => Stream.Stream<[K, A3], E2 | E, R2 | R>\n>(\n  2,\n  <K, A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<readonly [K, A], E, R>,\n    options: {\n      readonly other: Stream.Stream<readonly [K, A2], E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n      readonly order: Order.Order<K>\n    }\n  ): Stream.Stream<[K, A3], E2 | E, R2 | R> => {\n    const pull = (\n      state: ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>,\n      pullLeft: Effect.Effect<Chunk.Chunk<readonly [K, A]>, Option.Option<E>, R>,\n      pullRight: Effect.Effect<Chunk.Chunk<readonly [K, A2]>, Option.Option<E2>, R2>\n    ): Effect.Effect<\n      Exit.Exit<\n        readonly [\n          Chunk.Chunk<[K, A3]>,\n          ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n        ],\n        Option.Option<E | E2>\n      >,\n      never,\n      R | R2\n    > => {\n      switch (state._tag) {\n        case ZipAllState.OP_DRAIN_LEFT: {\n          return pipe(\n            pullLeft,\n            Effect.match({\n              onFailure: Exit.fail,\n              onSuccess: (leftChunk) =>\n                Exit.succeed(\n                  [\n                    Chunk.map(leftChunk, ([k, a]) => [k, options.onSelf(a)]),\n                    ZipAllState.DrainLeft\n                  ] as const\n                )\n            })\n          )\n        }\n        case ZipAllState.OP_DRAIN_RIGHT: {\n          return pipe(\n            pullRight,\n            Effect.match({\n              onFailure: Exit.fail,\n              onSuccess: (rightChunk) =>\n                Exit.succeed(\n                  [\n                    Chunk.map(rightChunk, ([k, a2]) => [k, options.onOther(a2)]),\n                    ZipAllState.DrainRight\n                  ] as const\n                )\n            })\n          )\n        }\n        case ZipAllState.OP_PULL_BOTH: {\n          return pipe(\n            unsome(pullLeft),\n            Effect.zip(unsome(pullRight), { concurrent: true }),\n            Effect.matchEffect({\n              onFailure: (error) => Effect.succeed(Exit.fail(Option.some(error))),\n              onSuccess: ([leftOption, rightOption]) => {\n                if (Option.isSome(leftOption) && Option.isSome(rightOption)) {\n                  if (Chunk.isEmpty(leftOption.value) && Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullBoth, pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(leftOption.value)) {\n                    return pull(ZipAllState.PullLeft(rightOption.value), pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullRight(leftOption.value), pullLeft, pullRight)\n                  }\n                  return Effect.succeed(Exit.succeed(merge(leftOption.value, rightOption.value)))\n                }\n                if (Option.isSome(leftOption) && Option.isNone(rightOption)) {\n                  if (Chunk.isEmpty(leftOption.value)) {\n                    return pull(ZipAllState.DrainLeft, pullLeft, pullRight)\n                  }\n                  return Effect.succeed(\n                    Exit.succeed(\n                      [\n                        pipe(leftOption.value, Chunk.map(([k, a]) => [k, options.onSelf(a)])),\n                        ZipAllState.DrainLeft\n                      ] as const\n                    )\n                  )\n                }\n                if (Option.isNone(leftOption) && Option.isSome(rightOption)) {\n                  if (Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.DrainRight, pullLeft, pullRight)\n                  }\n                  return Effect.succeed(\n                    Exit.succeed(\n                      [\n                        pipe(rightOption.value, Chunk.map(([k, a2]) => [k, options.onOther(a2)])),\n                        ZipAllState.DrainRight\n                      ] as const\n                    )\n                  )\n                }\n                return Effect.succeed(Exit.fail<Option.Option<E | E2>>(Option.none()))\n              }\n            })\n          )\n        }\n        case ZipAllState.OP_PULL_LEFT: {\n          return Effect.matchEffect(pullLeft, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(\n                  Exit.succeed([\n                    pipe(state.rightChunk, Chunk.map(([k, a2]) => [k, options.onOther(a2)])),\n                    ZipAllState.DrainRight\n                  ])\n                ),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<\n                    readonly [\n                      Chunk.Chunk<[K, A3]>,\n                      ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n                    ],\n                    Option.Option<E | E2>\n                  >\n                >(Exit.fail(Option.some(error)))\n            }),\n            onSuccess: (leftChunk) =>\n              Chunk.isEmpty(leftChunk) ?\n                pull(ZipAllState.PullLeft(state.rightChunk), pullLeft, pullRight) :\n                Effect.succeed(Exit.succeed(merge(leftChunk, state.rightChunk)))\n          })\n        }\n        case ZipAllState.OP_PULL_RIGHT: {\n          return Effect.matchEffect(pullRight, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(\n                  Exit.succeed(\n                    [\n                      Chunk.map(state.leftChunk, ([k, a]) => [k, options.onSelf(a)]),\n                      ZipAllState.DrainLeft\n                    ] as const\n                  )\n                ),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<\n                    readonly [\n                      Chunk.Chunk<[K, A3]>,\n                      ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n                    ],\n                    Option.Option<E | E2>\n                  >\n                >(Exit.fail(Option.some(error)))\n            }),\n            onSuccess: (rightChunk) =>\n              Chunk.isEmpty(rightChunk) ?\n                pull(ZipAllState.PullRight(state.leftChunk), pullLeft, pullRight) :\n                Effect.succeed(Exit.succeed(merge(state.leftChunk, rightChunk)))\n          })\n        }\n      }\n    }\n    const merge = (\n      leftChunk: Chunk.Chunk<readonly [K, A]>,\n      rightChunk: Chunk.Chunk<readonly [K, A2]>\n    ): readonly [\n      Chunk.Chunk<[K, A3]>,\n      ZipAllState.ZipAllState<readonly [K, A], readonly [K, A2]>\n    ] => {\n      const hasNext = <T>(chunk: Chunk.Chunk<T>, index: number) => index < chunk.length - 1\n      const builder: Array<[K, A3]> = []\n      let state:\n        | ZipAllState.ZipAllState<\n          readonly [K, A],\n          readonly [K, A2]\n        >\n        | undefined = undefined\n      let leftIndex = 0\n      let rightIndex = 0\n      let leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n      let rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n      let k1 = leftTuple[0]\n      let a = leftTuple[1]\n      let k2 = rightTuple[0]\n      let a2 = rightTuple[1]\n      let loop = true\n      while (loop) {\n        const compare = options.order(k1, k2)\n        if (compare === 0) {\n          builder.push([k1, options.onBoth(a, a2)])\n          if (hasNext(leftChunk, leftIndex) && hasNext(rightChunk, rightIndex)) {\n            leftIndex = leftIndex + 1\n            rightIndex = rightIndex + 1\n            leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n            rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n            k1 = leftTuple[0]\n            a = leftTuple[1]\n            k2 = rightTuple[0]\n            a2 = rightTuple[1]\n          } else if (hasNext(leftChunk, leftIndex)) {\n            state = ZipAllState.PullRight(pipe(leftChunk, Chunk.drop(leftIndex + 1)))\n            loop = false\n          } else if (hasNext(rightChunk, rightIndex)) {\n            state = ZipAllState.PullLeft(pipe(rightChunk, Chunk.drop(rightIndex + 1)))\n            loop = false\n          } else {\n            state = ZipAllState.PullBoth\n            loop = false\n          }\n        } else if (compare < 0) {\n          builder.push([k1, options.onSelf(a)])\n          if (hasNext(leftChunk, leftIndex)) {\n            leftIndex = leftIndex + 1\n            leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n            k1 = leftTuple[0]\n            a = leftTuple[1]\n          } else {\n            const rightBuilder: Array<readonly [K, A2]> = []\n            rightBuilder.push(rightTuple)\n            while (hasNext(rightChunk, rightIndex)) {\n              rightIndex = rightIndex + 1\n              rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n              rightBuilder.push(rightTuple)\n            }\n            state = ZipAllState.PullLeft(Chunk.unsafeFromArray(rightBuilder))\n            loop = false\n          }\n        } else {\n          builder.push([k2, options.onOther(a2)])\n          if (hasNext(rightChunk, rightIndex)) {\n            rightIndex = rightIndex + 1\n            rightTuple = pipe(rightChunk, Chunk.unsafeGet(rightIndex))\n            k2 = rightTuple[0]\n            a2 = rightTuple[1]\n          } else {\n            const leftBuilder: Array<readonly [K, A]> = []\n            leftBuilder.push(leftTuple)\n            while (hasNext(leftChunk, leftIndex)) {\n              leftIndex = leftIndex + 1\n              leftTuple = pipe(leftChunk, Chunk.unsafeGet(leftIndex))\n              leftBuilder.push(leftTuple)\n            }\n            state = ZipAllState.PullRight(Chunk.unsafeFromArray(leftBuilder))\n            loop = false\n          }\n        }\n      }\n      return [Chunk.unsafeFromArray(builder), state!]\n    }\n    return combineChunks(self, options.other, ZipAllState.PullBoth, pull)\n  }\n)\n\n/** @internal */\nexport const zipAllWith = dual<\n  <A2, E2, R2, A, A3>(\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ) => Stream.Stream<A3, E2 | E, R2 | R>\n>(\n  2,\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<A, E, R>,\n    options: {\n      readonly other: Stream.Stream<A2, E2, R2>\n      readonly onSelf: (a: A) => A3\n      readonly onOther: (a2: A2) => A3\n      readonly onBoth: (a: A, a2: A2) => A3\n    }\n  ): Stream.Stream<A3, E2 | E, R2 | R> => {\n    const pull = (\n      state: ZipAllState.ZipAllState<A, A2>,\n      pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>,\n      pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R2>\n    ): Effect.Effect<\n      Exit.Exit<readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>], Option.Option<E | E2>>,\n      never,\n      R | R2\n    > => {\n      switch (state._tag) {\n        case ZipAllState.OP_DRAIN_LEFT: {\n          return Effect.matchEffect(pullLeft, {\n            onFailure: (error) => Effect.succeed(Exit.fail(error)),\n            onSuccess: (leftChunk) =>\n              Effect.succeed(Exit.succeed(\n                [\n                  Chunk.map(leftChunk, options.onSelf),\n                  ZipAllState.DrainLeft\n                ] as const\n              ))\n          })\n        }\n        case ZipAllState.OP_DRAIN_RIGHT: {\n          return Effect.matchEffect(pullRight, {\n            onFailure: (error) => Effect.succeed(Exit.fail(error)),\n            onSuccess: (rightChunk) =>\n              Effect.succeed(Exit.succeed(\n                [\n                  Chunk.map(rightChunk, options.onOther),\n                  ZipAllState.DrainRight\n                ] as const\n              ))\n          })\n        }\n        case ZipAllState.OP_PULL_BOTH: {\n          return pipe(\n            unsome(pullLeft),\n            Effect.zip(unsome(pullRight), { concurrent: true }),\n            Effect.matchEffect({\n              onFailure: (error) => Effect.succeed(Exit.fail(Option.some(error))),\n              onSuccess: ([leftOption, rightOption]) => {\n                if (Option.isSome(leftOption) && Option.isSome(rightOption)) {\n                  if (Chunk.isEmpty(leftOption.value) && Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullBoth, pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(leftOption.value)) {\n                    return pull(ZipAllState.PullLeft(rightOption.value), pullLeft, pullRight)\n                  }\n                  if (Chunk.isEmpty(rightOption.value)) {\n                    return pull(ZipAllState.PullRight(leftOption.value), pullLeft, pullRight)\n                  }\n                  return Effect.succeed(Exit.succeed(zip(leftOption.value, rightOption.value, options.onBoth)))\n                }\n                if (Option.isSome(leftOption) && Option.isNone(rightOption)) {\n                  return Effect.succeed(Exit.succeed(\n                    [\n                      Chunk.map(leftOption.value, options.onSelf),\n                      ZipAllState.DrainLeft\n                    ] as const\n                  ))\n                }\n                if (Option.isNone(leftOption) && Option.isSome(rightOption)) {\n                  return Effect.succeed(Exit.succeed(\n                    [\n                      Chunk.map(rightOption.value, options.onOther),\n                      ZipAllState.DrainRight\n                    ] as const\n                  ))\n                }\n                return Effect.succeed(Exit.fail<Option.Option<E | E2>>(Option.none()))\n              }\n            })\n          )\n        }\n        case ZipAllState.OP_PULL_LEFT: {\n          return Effect.matchEffect(pullLeft, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(Exit.succeed(\n                  [\n                    Chunk.map(state.rightChunk, options.onOther),\n                    ZipAllState.DrainRight\n                  ] as const\n                )),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>], Option.Option<E | E2>>\n                >(\n                  Exit.fail(Option.some(error))\n                )\n            }),\n            onSuccess: (leftChunk) => {\n              if (Chunk.isEmpty(leftChunk)) {\n                return pull(ZipAllState.PullLeft(state.rightChunk), pullLeft, pullRight)\n              }\n              if (Chunk.isEmpty(state.rightChunk)) {\n                return pull(ZipAllState.PullRight(leftChunk), pullLeft, pullRight)\n              }\n              return Effect.succeed(Exit.succeed(zip(leftChunk, state.rightChunk, options.onBoth)))\n            }\n          })\n        }\n        case ZipAllState.OP_PULL_RIGHT: {\n          return Effect.matchEffect(pullRight, {\n            onFailure: Option.match({\n              onNone: () =>\n                Effect.succeed(\n                  Exit.succeed(\n                    [\n                      Chunk.map(state.leftChunk, options.onSelf),\n                      ZipAllState.DrainLeft\n                    ] as const\n                  )\n                ),\n              onSome: (error) =>\n                Effect.succeed<\n                  Exit.Exit<readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>], Option.Option<E | E2>>\n                >(\n                  Exit.fail(Option.some(error))\n                )\n            }),\n            onSuccess: (rightChunk) => {\n              if (Chunk.isEmpty(rightChunk)) {\n                return pull(\n                  ZipAllState.PullRight(state.leftChunk),\n                  pullLeft,\n                  pullRight\n                )\n              }\n              if (Chunk.isEmpty(state.leftChunk)) {\n                return pull(\n                  ZipAllState.PullLeft(rightChunk),\n                  pullLeft,\n                  pullRight\n                )\n              }\n              return Effect.succeed(Exit.succeed(zip(state.leftChunk, rightChunk, options.onBoth)))\n            }\n          })\n        }\n      }\n    }\n    const zip = (\n      leftChunk: Chunk.Chunk<A>,\n      rightChunk: Chunk.Chunk<A2>,\n      f: (a: A, a2: A2) => A3\n    ): readonly [Chunk.Chunk<A3>, ZipAllState.ZipAllState<A, A2>] => {\n      const [output, either] = zipChunks(leftChunk, rightChunk, f)\n      switch (either._tag) {\n        case \"Left\": {\n          if (Chunk.isEmpty(either.left)) {\n            return [output, ZipAllState.PullBoth] as const\n          }\n          return [output, ZipAllState.PullRight(either.left)] as const\n        }\n        case \"Right\": {\n          if (Chunk.isEmpty(either.right)) {\n            return [output, ZipAllState.PullBoth] as const\n          }\n          return [output, ZipAllState.PullLeft(either.right)] as const\n        }\n      }\n    }\n    return combineChunks(self, options.other, ZipAllState.PullBoth, pull)\n  }\n)\n\n/** @internal */\nexport const zipLatest: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<[AL, AR], EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<[AL, AR], EL | ER, RL | RR> => pipe(left, zipLatestWith(right, (a, a2) => [a, a2]))\n)\n\nexport const zipLatestAll = <T extends ReadonlyArray<Stream.Stream<any, any, any>>>(\n  ...streams: T\n): Stream.Stream<\n  [T[number]] extends [never] ? never\n    : { [K in keyof T]: T[K] extends Stream.Stream<infer A, infer _E, infer _R> ? A : never },\n  [T[number]] extends [never] ? never : T[number] extends Stream.Stream<infer _A, infer _E, infer _R> ? _E : never,\n  [T[number]] extends [never] ? never : T[number] extends Stream.Stream<infer _A, infer _E, infer _R> ? _R : never\n> => {\n  if (streams.length === 0) {\n    return empty\n  } else if (streams.length === 1) {\n    return map(streams[0]!, (x) => [x]) as any\n  }\n  const [head, ...tail] = streams\n  return zipLatestWith(\n    head,\n    zipLatestAll(...tail),\n    (first, second) => [first, ...second]\n  ) as any\n}\n\n/** @internal */\nexport const zipLatestWith: {\n  <AR, ER, RR, AL, A>(\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<A, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR>\n} = dual(\n  3,\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR> => {\n    const pullNonEmpty = <_R, _E, _A>(\n      pull: Effect.Effect<Chunk.Chunk<_A>, Option.Option<_E>, _R>\n    ): Effect.Effect<Chunk.Chunk<_A>, Option.Option<_E>, _R> =>\n      pipe(pull, Effect.flatMap((chunk) => Chunk.isEmpty(chunk) ? pullNonEmpty(pull) : Effect.succeed(chunk)))\n    return pipe(\n      toPull(left),\n      Effect.map(pullNonEmpty),\n      Effect.zip(pipe(toPull(right), Effect.map(pullNonEmpty))),\n      Effect.flatMap(([left, right]) =>\n        pipe(\n          fromEffectOption<readonly [Chunk.Chunk<AL>, Chunk.Chunk<AR>, boolean], EL | ER, RL | RR>(\n            Effect.raceWith(left, right, {\n              onSelfDone: (leftDone, rightFiber) =>\n                pipe(\n                  Effect.suspend(() => leftDone),\n                  Effect.zipWith(Fiber.join(rightFiber), (l, r) => [l, r, true] as const)\n                ),\n              onOtherDone: (rightDone, leftFiber) =>\n                pipe(\n                  Effect.suspend(() => rightDone),\n                  Effect.zipWith(Fiber.join(leftFiber), (l, r) => [r, l, false] as const)\n                )\n            })\n          ),\n          flatMap(([l, r, leftFirst]) =>\n            pipe(\n              fromEffect(\n                Ref.make([Chunk.unsafeLast(l), Chunk.unsafeLast(r)] as const)\n              ),\n              flatMap((latest) =>\n                pipe(\n                  fromChunk(\n                    leftFirst ?\n                      pipe(r, Chunk.map((a2) => f(Chunk.unsafeLast(l), a2))) :\n                      pipe(l, Chunk.map((a) => f(a, Chunk.unsafeLast(r))))\n                  ),\n                  concat(\n                    pipe(\n                      repeatEffectOption(left),\n                      mergeEither(repeatEffectOption(right)),\n                      mapEffectSequential(Either.match({\n                        onLeft: (leftChunk) =>\n                          pipe(\n                            Ref.modify(latest, ([_, rightLatest]) =>\n                              [\n                                pipe(leftChunk, Chunk.map((a) => f(a, rightLatest))),\n                                [Chunk.unsafeLast(leftChunk), rightLatest] as const\n                              ] as const)\n                          ),\n                        onRight: (rightChunk) =>\n                          pipe(\n                            Ref.modify(latest, ([leftLatest, _]) =>\n                              [\n                                pipe(rightChunk, Chunk.map((a2) => f(leftLatest, a2))),\n                                [leftLatest, Chunk.unsafeLast(rightChunk)] as const\n                              ] as const)\n                          )\n                      })),\n                      flatMap(fromChunk)\n                    )\n                  )\n                )\n              )\n            )\n          ),\n          toPull\n        )\n      ),\n      fromPull\n    )\n  }\n)\n\n/** @internal */\nexport const zipLeft: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AL, ER | EL, RR | RL>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AL, EL | ER, RL | RR> =>\n    pipe(\n      left,\n      zipWithChunks(right, (left, right) => {\n        if (left.length > right.length) {\n          return [\n            pipe(left, Chunk.take(right.length)),\n            Either.left(pipe(left, Chunk.take(right.length)))\n          ] as const\n        }\n        return [\n          left,\n          Either.right(pipe(right, Chunk.drop(left.length)))\n        ]\n      })\n    )\n)\n\n/** @internal */\nexport const zipRight: {\n  <AR, ER, RR>(\n    right: Stream.Stream<AR, ER, RR>\n  ): <AL, EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<AR, ER | EL, RR | RL>\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR>\n} = dual(\n  2,\n  <AL, EL, RL, AR, ER, RR>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>\n  ): Stream.Stream<AR, EL | ER, RL | RR> =>\n    pipe(\n      left,\n      zipWithChunks(right, (left, right) => {\n        if (left.length > right.length) {\n          return [\n            right,\n            Either.left(pipe(left, Chunk.take(right.length)))\n          ] as const\n        }\n        return [\n          pipe(right, Chunk.take(left.length)),\n          Either.right(pipe(right, Chunk.drop(left.length)))\n        ]\n      })\n    )\n)\n\n/** @internal */\nexport const zipWith: {\n  <AR, ER, RR, AL, A>(\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): <EL, RL>(left: Stream.Stream<AL, EL, RL>) => Stream.Stream<A, EL | ER, RL | RR>\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR>\n} = dual(\n  3,\n  <AL, EL, RL, AR, ER, RR, A>(\n    left: Stream.Stream<AL, EL, RL>,\n    right: Stream.Stream<AR, ER, RR>,\n    f: (left: AL, right: AR) => A\n  ): Stream.Stream<A, EL | ER, RL | RR> =>\n    pipe(left, zipWithChunks(right, (leftChunk, rightChunk) => zipChunks(leftChunk, rightChunk, f)))\n)\n\n/** @internal */\nexport const zipWithChunks = dual<\n  <A2, E2, R2, A, A3>(\n    that: Stream.Stream<A2, E2, R2>,\n    f: (\n      left: Chunk.Chunk<A>,\n      right: Chunk.Chunk<A2>\n    ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<A3, E2 | E, R2 | R>,\n  <A, E, R, A2, E2, R2, A3>(\n    self: Stream.Stream<A, E, R>,\n    that: Stream.Stream<A2, E2, R2>,\n    f: (\n      left: Chunk.Chunk<A>,\n      right: Chunk.Chunk<A2>\n    ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n  ) => Stream.Stream<A3, E2 | E, R2 | R>\n>(3, <A, E, R, A2, E2, R2, A3>(\n  self: Stream.Stream<A, E, R>,\n  that: Stream.Stream<A2, E2, R2>,\n  f: (\n    left: Chunk.Chunk<A>,\n    right: Chunk.Chunk<A2>\n  ) => readonly [Chunk.Chunk<A3>, Either.Either<Chunk.Chunk<A2>, Chunk.Chunk<A>>]\n): Stream.Stream<A3, E2 | E, R2 | R> => {\n  const pull = (\n    state: ZipChunksState.ZipChunksState<A, A2>,\n    pullLeft: Effect.Effect<Chunk.Chunk<A>, Option.Option<E>, R>,\n    pullRight: Effect.Effect<Chunk.Chunk<A2>, Option.Option<E2>, R2>\n  ): Effect.Effect<\n    Exit.Exit<readonly [Chunk.Chunk<A3>, ZipChunksState.ZipChunksState<A, A2>], Option.Option<E | E2>>,\n    never,\n    R | R2\n  > => {\n    switch (state._tag) {\n      case ZipChunksState.OP_PULL_BOTH: {\n        return pipe(\n          unsome(pullLeft),\n          Effect.zip(unsome(pullRight), { concurrent: true }),\n          Effect.matchEffect({\n            onFailure: (error) => Effect.succeed(Exit.fail(Option.some(error))),\n            onSuccess: ([leftOption, rightOption]) => {\n              if (Option.isSome(leftOption) && Option.isSome(rightOption)) {\n                if (Chunk.isEmpty(leftOption.value) && Chunk.isEmpty(rightOption.value)) {\n                  return pull(ZipChunksState.PullBoth, pullLeft, pullRight)\n                }\n                if (Chunk.isEmpty(leftOption.value)) {\n                  return pull(ZipChunksState.PullLeft(rightOption.value), pullLeft, pullRight)\n                }\n                if (Chunk.isEmpty(rightOption.value)) {\n                  return pull(ZipChunksState.PullRight(leftOption.value), pullLeft, pullRight)\n                }\n                return Effect.succeed(Exit.succeed(zip(leftOption.value, rightOption.value)))\n              }\n              return Effect.succeed(Exit.fail(Option.none()))\n            }\n          })\n        )\n      }\n      case ZipChunksState.OP_PULL_LEFT: {\n        return Effect.matchEffect(pullLeft, {\n          onFailure: (error) => Effect.succeed(Exit.fail(error)),\n          onSuccess: (leftChunk) => {\n            if (Chunk.isEmpty(leftChunk)) {\n              return pull(ZipChunksState.PullLeft(state.rightChunk), pullLeft, pullRight)\n            }\n            if (Chunk.isEmpty(state.rightChunk)) {\n              return pull(ZipChunksState.PullRight(leftChunk), pullLeft, pullRight)\n            }\n            return Effect.succeed(Exit.succeed(zip(leftChunk, state.rightChunk)))\n          }\n        })\n      }\n      case ZipChunksState.OP_PULL_RIGHT: {\n        return Effect.matchEffect(pullRight, {\n          onFailure: (error) => Effect.succeed(Exit.fail(error)),\n          onSuccess: (rightChunk) => {\n            if (Chunk.isEmpty(rightChunk)) {\n              return pull(ZipChunksState.PullRight(state.leftChunk), pullLeft, pullRight)\n            }\n            if (Chunk.isEmpty(state.leftChunk)) {\n              return pull(ZipChunksState.PullLeft(rightChunk), pullLeft, pullRight)\n            }\n            return Effect.succeed(Exit.succeed(zip(state.leftChunk, rightChunk)))\n          }\n        })\n      }\n    }\n  }\n  const zip = (\n    leftChunk: Chunk.Chunk<A>,\n    rightChunk: Chunk.Chunk<A2>\n  ): readonly [Chunk.Chunk<A3>, ZipChunksState.ZipChunksState<A, A2>] => {\n    const [output, either] = f(leftChunk, rightChunk)\n    switch (either._tag) {\n      case \"Left\": {\n        if (Chunk.isEmpty(either.left)) {\n          return [output, ZipChunksState.PullBoth] as const\n        }\n        return [output, ZipChunksState.PullRight(either.left)] as const\n      }\n      case \"Right\": {\n        if (Chunk.isEmpty(either.right)) {\n          return [output, ZipChunksState.PullBoth] as const\n        }\n        return [output, ZipChunksState.PullLeft(either.right)] as const\n      }\n    }\n  }\n  return pipe(\n    self,\n    combineChunks(that, ZipChunksState.PullBoth, pull)\n  )\n})\n\n/** @internal */\nexport const zipWithIndex = <A, E, R>(self: Stream.Stream<A, E, R>): Stream.Stream<[A, number], E, R> =>\n  pipe(self, mapAccum(0, (index, a) => [index + 1, [a, index]]))\n\n/** @internal */\nexport const zipWithNext = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Stream.Stream<[A, Option.Option<A>], E, R> => {\n  const process = (\n    last: Option.Option<A>\n  ): Channel.Channel<Chunk.Chunk<readonly [A, Option.Option<A>]>, Chunk.Chunk<A>, never, never, void, unknown> =>\n    core.readWithCause({\n      onInput: (input: Chunk.Chunk<A>) => {\n        const [newLast, chunk] = Chunk.mapAccum(\n          input,\n          last,\n          (prev, curr) => [Option.some(curr), pipe(prev, Option.map((a) => [a, curr] as const))] as const\n        )\n        const output = Chunk.filterMap(\n          chunk,\n          (option) =>\n            Option.isSome(option) ?\n              Option.some([option.value[0], Option.some(option.value[1])] as const) :\n              Option.none()\n        )\n        return core.flatMap(\n          core.write(output),\n          () => process(newLast)\n        )\n      },\n      onFailure: core.failCause,\n      onDone: () =>\n        Option.match(last, {\n          onNone: () => core.void,\n          onSome: (value) =>\n            channel.zipRight(\n              core.write(Chunk.of<readonly [A, Option.Option<A>]>([value, Option.none()])),\n              core.void\n            )\n        })\n    })\n  return new StreamImpl(pipe(toChannel(self), channel.pipeToOrFail(process(Option.none()))))\n}\n\n/** @internal */\nexport const zipWithPrevious = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Stream.Stream<[Option.Option<A>, A], E, R> =>\n  pipe(\n    self,\n    mapAccum<Option.Option<A>, A, [Option.Option<A>, A]>(\n      Option.none(),\n      (prev, curr) => [Option.some(curr), [prev, curr]]\n    )\n  )\n\n/** @internal */\nexport const zipWithPreviousAndNext = <A, E, R>(\n  self: Stream.Stream<A, E, R>\n): Stream.Stream<[Option.Option<A>, A, Option.Option<A>], E, R> =>\n  pipe(\n    zipWithNext(zipWithPrevious(self)),\n    map(([[prev, curr], next]) => [prev, curr, pipe(next, Option.map((tuple) => tuple[1]))])\n  )\n\n/** @internal */\nconst zipChunks = <A, B, C>(\n  left: Chunk.Chunk<A>,\n  right: Chunk.Chunk<B>,\n  f: (a: A, b: B) => C\n): [Chunk.Chunk<C>, Either.Either<Chunk.Chunk<B>, Chunk.Chunk<A>>] => {\n  if (left.length > right.length) {\n    return [\n      pipe(left, Chunk.take(right.length), Chunk.zipWith(right, f)),\n      Either.left(pipe(left, Chunk.drop(right.length)))\n    ]\n  }\n  return [\n    pipe(left, Chunk.zipWith(pipe(right, Chunk.take(left.length)), f)),\n    Either.right(pipe(right, Chunk.drop(left.length)))\n  ]\n}\n\n// Do notation\n\n/** @internal */\nexport const Do: Stream.Stream<{}> = succeed({})\n\n/** @internal */\nexport const bind = dual<\n  <N extends string, A, B, E2, R2>(\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Stream.Stream<B, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n    }\n  ) => <E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<\n    { [K in keyof A | N]: K extends keyof A ? A[K] : B },\n    E | E2,\n    R | R2\n  >,\n  <A, E, R, N extends string, B, E2, R2>(\n    self: Stream.Stream<A, E, R>,\n    tag: Exclude<N, keyof A>,\n    f: (_: NoInfer<A>) => Stream.Stream<B, E2, R2>,\n    options?: {\n      readonly concurrency?: number | \"unbounded\" | undefined\n      readonly bufferSize?: number | undefined\n    }\n  ) => Stream.Stream<\n    { [K in keyof A | N]: K extends keyof A ? A[K] : B },\n    E | E2,\n    R | R2\n  >\n>((args) => typeof args[0] !== \"string\", <A, E, R, N extends string, B, E2, R2>(\n  self: Stream.Stream<A, E, R>,\n  tag: Exclude<N, keyof A>,\n  f: (_: A) => Stream.Stream<B, E2, R2>,\n  options?: {\n    readonly concurrency?: number | \"unbounded\" | undefined\n    readonly bufferSize?: number | undefined\n  }\n) =>\n  flatMap(self, (k) =>\n    map(\n      f(k),\n      (a) => ({ ...k, [tag]: a } as { [K in keyof A | N]: K extends keyof A ? A[K] : B })\n    ), options))\n\n/* @internal */\nexport const bindTo: {\n  <N extends string>(name: N): <A, E, R>(self: Stream.Stream<A, E, R>) => Stream.Stream<{ [K in N]: A }, E, R>\n  <A, E, R, N extends string>(self: Stream.Stream<A, E, R>, name: N): Stream.Stream<{ [K in N]: A }, E, R>\n} = doNotation.bindTo<Stream.StreamTypeLambda>(map)\n\n/* @internal */\nexport const let_: {\n  <N extends string, A extends object, B>(\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): <E, R>(\n    self: Stream.Stream<A, E, R>\n  ) => Stream.Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n  <A extends object, E, R, N extends string, B>(\n    self: Stream.Stream<A, E, R>,\n    name: Exclude<N, keyof A>,\n    f: (a: NoInfer<A>) => B\n  ): Stream.Stream<{ [K in N | keyof A]: K extends keyof A ? A[K] : B }, E, R>\n} = doNotation.let_<Stream.StreamTypeLambda>(map)\n\n// Circular with Channel\n\n/** @internal */\nexport const channelToStream = <OutElem, OutErr, OutDone, Env>(\n  self: Channel.Channel<Chunk.Chunk<OutElem>, unknown, OutErr, unknown, OutDone, unknown, Env>\n): Stream.Stream<OutElem, OutErr, Env> => {\n  return new StreamImpl(self)\n}\n\n// =============================================================================\n// encoding\n// =============================================================================\n\n/** @internal */\nexport const decodeText = dual<\n  (encoding?: string) => <E, R>(self: Stream.Stream<Uint8Array, E, R>) => Stream.Stream<string, E, R>,\n  <E, R>(self: Stream.Stream<Uint8Array, E, R>, encoding?: string) => Stream.Stream<string, E, R>\n>((args) => isStream(args[0]), (self, encoding = \"utf-8\") =>\n  suspend(() => {\n    const decoder = new TextDecoder(encoding)\n    return map(self, (s) => decoder.decode(s))\n  }))\n\n/** @internal */\nexport const encodeText = <E, R>(self: Stream.Stream<string, E, R>): Stream.Stream<Uint8Array, E, R> =>\n  suspend(() => {\n    const encoder = new TextEncoder()\n    return map(self, (s) => encoder.encode(s))\n  })\n\n/** @internal */\nexport const fromEventListener = <A = unknown>(\n  target: Stream.EventListener<A>,\n  type: string,\n  options?: boolean | {\n    readonly capture?: boolean\n    readonly passive?: boolean\n    readonly once?: boolean\n    readonly bufferSize?: number | \"unbounded\" | undefined\n  } | undefined\n): Stream.Stream<A> =>\n  asyncPush<A>((emit) =>\n    Effect.acquireRelease(\n      Effect.sync(() => target.addEventListener(type, emit.single as any, options)),\n      () => Effect.sync(() => target.removeEventListener(type, emit.single, options))\n    ), { bufferSize: typeof options === \"object\" ? options.bufferSize : undefined })\n"],"names":["Cause","Chunk","Clock","Context","Deferred","Duration","Effect","Either","Equal","Exit","Fiber","FiberRef","constTrue","dual","identity","pipe","Layer","MergeDecision","Option","pipeArguments","hasProperty","PubSub","Queue","RcRef","Ref","Runtime","Schedule","Scope","HaltStrategy","TPubSub","TQueue","Tuple","channel","channelExecutor","MergeStrategy","core","doNotation","RingBuffer","_sink","DebounceState","emit","haltStrategy","Handoff","HandoffSignal","pull","SinkEndReason","ZipAllState","ZipChunksState","InternalTake","InternalTracer","StreamSymbolKey","StreamTypeId","Symbol","for","streamVariance","_R","_","_E","_A","StreamImpl","constructor","arguments","isStream","u","isEffect","DefaultChunkSize","accumulate","self","chunks","accumulateChunks","accumulator","s","readWith","onInput","input","next","appendAll","flatMap","write","onFailure","fail","onDone","void","pipeTo","toChannel","empty","acquireRelease","acquire","release","scoped","aggregate","sink","aggregateWithin","forever","schedule","filterMap","aggregateWithinEither","match","onLeft","none","onRight","some","layer","all","make","ScheduleEnd","driver","fromEffect","handoff","sinkEndReason","sinkLeftovers","scheduleDriver","consumed","endAfterEmit","handoffProducer","readWithCause","offer","when","isNonEmpty","cause","halt","end","UpstreamEnd","handoffConsumer","getAndSet","leftovers","set","zipRight","succeed","take","map","signal","_tag","OP_EMIT","elements","get","bool","OP_HALT","failCause","OP_END","reason","OP_SCHEDULE_END","unwrap","timeout","lastB","scheduledAggregator","sinkFiber","scheduleFiber","scope","forkSink","pipeToOrFail","collectElements","run","forkIn","handleSide","b","c","flatten","wasConsumed","toWrite","onNone","of","right","onSome","left","OP_UPSTREAM_END","raceWith","join","onSelfDone","sinkExit","interrupt","suspend","onOtherDone","scheduleExit","matchCauseEffect","failureOrCause","forkDaemon","onSuccess","unwrapScopedWith","as","value","queueFromBufferOptions","bufferSize","unbounded","undefined","bounded","strategy","dropping","sliding","_async","register","queue","shutdown","output","runtime","sync","runPromiseExit","canceler","resume","fromPull","asVoid","then","exit","isFailure","isInterrupted","squash","loop","done","maybeError","error","chunk","fromChannel","ensuring","unwrapScoped","asyncEffect","k","queueFromBufferOptionsPush","options","asyncPush","tap","getWith","currentScheduler","scheduler","makePush","item","isExit","isSuccess","unsafeFromArray","asyncScoped","ref","isDone","onError","repeatEffectChunkOption","branchAfter","n","f","buffering","acc","nextSize","length","b1","b2","splitAt","running","prefix","leftover","identityChannel","broadcast","maximumLag","broadcastedQueues","tuple","flattenTake","fromQueue","broadcastDynamic","toPubSub","pubsub","fromPubSub","share","idleTimeToLive","rcRef","pubsubFromOptions","Array","from","subscribe","forkScoped","runIntoPubSubScoped","broadcastedQueuesDynamic","buffer","capacity","bufferUnbounded","bufferDropping","bufferSliding","toQueueOfElements","process","flipCauseOption","bufferChunks","bufferChunksDropping","bufferChunksSliding","toQueue","onEnd","bufferSignal","rechunk","bufferChannel","producer","terminate","await","deferred","added","consumer","start","runScoped","catchAll","catchAllCause","catchSome","pf","getOrElse","catchSomeCause","catchTag","e","catchTags","cases","keys","Object","includes","changes","changesWith","x","y","equals","writer","last","newLast","newChunk","reduce","option","outputs","isSome","append","changesWithEffect","mapChunks","chunksWith","flattenChunks","unsome","effect","asSome","o","succeedNone","combine","that","latch","latchL","concatMap","writeChunk","runIn","rightL","latchR","pullLeft","pullRight","unfoldEffect","combineChunks","__","unfoldChunkEffect","concat","concatAll","streams","cross","crossWith","a","a2","crossLeft","crossRight","debounce","duration","gen","enqueue","sleep","fiber","previous","elem","state","OP_NOT_STARTED","OP_PREVIOUS","handoffFiber","leftExit","current","rightExit","OP_CURRENT","scopedWith","notStarted","die","defect","dieSync","evaluate","dieMessage","message","distributedWith","distributedWithDynamic","decide","range","size","id","key","entries","mappings","queues","reduceRight","Map","mapping","prepend","distributedWithDynamicId","newDistributedWithDynamicId","distributedWithDynamicCallback","values","forEach","queuesRef","$","shouldProcess","ids","update","delete","queuesLock","makeSemaphore","newQueue","finalize","endTake","withPermits","fromIterable","runForEachScoped","drain","drainFork","backgroundDied","interruptWhenDeferred","drop","r","dropped","Math","max","more","isEmpty","dropRight","identityStream","reader","head","put","dropUntil","predicate","dropWhile","dropUntilEffect","succeedNow","dropWhileEffect","either","finalizer","ensuringWith","context","contextWith","contextWithEffect","mapEffectSequential","contextWithStream","execute","fromEffectOption","failSync","failCauseSync","filter","filterEffect","iterator","filterMapEffect","filterMapWhile","mapped","filterMapWhileEffect","find","findFirst","findEffect","args","switch","matchConcurrency","concurrency","flatMapParSwitchBuffer","mergeMap","out","sequential","Number","MAX_SAFE_INTEGER","mergeStrategy","BufferSliding","flattenEffect","unordered","mapOutEffectPar","mapOut","flattenExitOption","processChunk","cont","toEmit","rest","splitWhere","flattenIterables","repeated","fromAsyncIterable","iterable","asyncIterator","return","promise","repeatEffectOption","tryPromise","try","catch","result","stream","TypeError","fromChunk","fromChunkPubSub","fromChunkQueue","isShutdown","fromChunks","mapError","maxChunkSize","fromTPubSub","subscribeScoped","fromTQueue","isChunk","fromIteratorSucceed","fromIterableEffect","builder","count","push","takeBetween","fromSchedule","fromReadableStream","releaseLockOnEnd","getReader","releaseLock","cancel","read","fromReadableStreamByob","allocSize","mode","readChunkStreamByobReader","EOF","ArrayBuffer","paginateEffect","offset","Uint8Array","byteLength","newOffset","groupAdjacentBy","groupAdjacentByChunk","until","previousChunk","unsafeGet","updatedKey","additionalChunk","slice","group","nonEmptyChunk","groupAdjacent","updatedState","grouped","chunkSize","groupedWithin","collectAllN","spaced","haltWhen","poll","haltAfter","haltWhenDeferred","interleave","interleaveWith","decider","zip","leftDone","rightDone","intersperse","element","isFirst","flagResult","intersperseAffixes","middle","interruptAfter","interruptWhen","iterate","unfold","mapAccum","nextS","mapAccumEffect","mapBoth","mapChunksEffect","mapOutEffect","mapConcat","mapConcatChunk","mapConcatChunkEffect","mapConcatEffect","mapEffectPar","mapErrorCause","merge","mergeWith","onSelf","onOther","mergeAll","mergeWithTag","mergeEither","mergeLeft","mergeRight","other","fromInput","Both","handler","Done","Await","mkString","never","cleanup","onStart","orDie","orDieWith","orElse","orElseEither","orElseFail","orElseIfEmpty","orElseIfEmptyChunk","orElseIfEmptyStream","orElseSucceed","paginate","paginateChunk","page","paginateChunkEffect","peel","foldSink","collectLeftover","z","tapErrorCause","partition","partitionEither","queue1","queue2","pipeThrough","pipeThroughChannel","pipeThroughChannelOrFail","chan","provideContext","provideLayer","buildWithScope","env","provideService","tag","resource","provideServiceEffect","provideServiceStream","service","add","mapInputContext","provideSomeLayer","min","go","remaining","race","raceAll","winner","index","takeWhile","unsafeDone","target","rechunkProcess","StreamRechunker","rechunker","writeAll","emitIfNotEmpty","pos","refineOrDie","refineOrDieWith","repeat","repeatEither","repeatEffect","repeatEffectChunk","repeatWith","onElement","onSchedule","repeatElements","repeatElementsWith","feed","step","advance","reset","repeatValue","scheduleOutput","repeatWithSchedule","repeatEffectWithSchedule","matchEffect","nextA","retry","runDrain","runCollect","collectAll","runCount","runFold","runFoldWhile","runFoldEffect","runFoldWhileEffect","runFoldScoped","runFoldWhileScoped","runFoldScopedEffect","runFoldWhileScopedEffect","fold","foldEffect","runForEach","runForEachChunk","forEachChunk","runForEachChunkScoped","runForEachWhile","forEachWhile","runForEachWhileScoped","runHead","runIntoPubSub","runIntoQueue","runIntoQueueScoped","runIntoQueueElementsScoped","offerAll","runLast","runSum","sum","scan","scanEffect","scanReduce","scanReduceEffect","scheduleWith","zipLeft","someOrFail","someOrElse","fallback","slidingSize","stepSize","IllegalArgumentException","emitOnStreamEnd","queueSize","channelEnd","items","toChunk","lastEmitIndex","lastItems","takeRight","currentIndex","split","isNone","splitOnChunk","delimiter","delimiterIndex","inputChunk","carry","delimiterCursor","concatenated","splitLines","isInteger","taken","POSITIVE_INFINITY","takeUntil","takeUntilEffect","tapBoth","tapError","tapSink","foldCauseChannel","throttle","throttleEffect","cost","throttleEnforceEffect","units","burst","throttleShapeEffect","tokens","timestampMillis","currentTimeMillis","weight","elapsed","cycles","toMillis","available","throttled","costFn","waitCycles","delay","millis","greaterThan","zero","tick","interval","toPull","timeoutFail","onTimeout","timeoutTo","timeoutFailCause","StreamTimeout","RuntimeException","isDieType","isRuntimeException","replay","toReadableStream","toReadableStreamRuntime","defaultRuntime","toReadableStreamEffect","runSync","runFork","ReadableStream","controller","pullChunk","extend","close","None","Promise","resolve","addObserver","transduce","newChannel","upstreamDone","concatAndGet","upstreamMarker","transducer","newLeftovers","nextChannel","unfoldChunk","void_","updateService","test","whenEffect","whenCase","whenCaseEffect","withSpan","dataFirst","name","addSpanStackTrace","zipWith","zipFlatten","zipAll","zipAllWith","defaultOther","defaultSelf","onBoth","zipAllLeft","zipAllRight","defaultRight","zipAllSortedByKey","zipAllSortedByKeyWith","order","zipAllSortedByKeyLeft","zipAllSortedByKeyRight","OP_DRAIN_LEFT","leftChunk","DrainLeft","OP_DRAIN_RIGHT","rightChunk","DrainRight","OP_PULL_BOTH","concurrent","leftOption","rightOption","PullBoth","PullLeft","PullRight","OP_PULL_LEFT","OP_PULL_RIGHT","hasNext","leftIndex","rightIndex","leftTuple","rightTuple","k1","k2","compare","rightBuilder","leftBuilder","zipChunks","zipLatest","zipLatestWith","zipLatestAll","tail","first","second","pullNonEmpty","rightFiber","l","leftFiber","leftFirst","unsafeLast","latest","modify","rightLatest","leftLatest","zipWithChunks","zipWithIndex","zipWithNext","prev","curr","zipWithPrevious","zipWithPreviousAndNext","Do","bind","bindTo","let_","channelToStream","decodeText","encoding","decoder","TextDecoder","decode","encodeText","encoder","TextEncoder","encode","fromEventListener","type","addEventListener","single","removeEventListener"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}