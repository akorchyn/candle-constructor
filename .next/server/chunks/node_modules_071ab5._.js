module.exports = {

"[project]/node_modules/pure-rand/lib/esm/generator/RandomGenerator.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "generateN": (()=>generateN),
    "skipN": (()=>skipN),
    "unsafeGenerateN": (()=>unsafeGenerateN),
    "unsafeSkipN": (()=>unsafeSkipN)
});
function unsafeGenerateN(rng, num) {
    var out = [];
    for(var idx = 0; idx != num; ++idx){
        out.push(rng.unsafeNext());
    }
    return out;
}
function generateN(rng, num) {
    var nextRng = rng.clone();
    var out = unsafeGenerateN(nextRng, num);
    return [
        out,
        nextRng
    ];
}
function unsafeSkipN(rng, num) {
    for(var idx = 0; idx != num; ++idx){
        rng.unsafeNext();
    }
}
function skipN(rng, num) {
    var nextRng = rng.clone();
    unsafeSkipN(nextRng, num);
    return nextRng;
}
}}),
"[project]/node_modules/pure-rand/lib/esm/generator/LinearCongruential.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "congruential32": (()=>congruential32)
});
var MULTIPLIER = 0x000343fd;
var INCREMENT = 0x00269ec3;
var MASK = 0xffffffff;
var MASK_2 = (1 << 31) - 1;
var computeNextSeed = function(seed) {
    return seed * MULTIPLIER + INCREMENT & MASK;
};
var computeValueFromNextSeed = function(nextseed) {
    return (nextseed & MASK_2) >> 16;
};
var LinearCongruential32 = function() {
    function LinearCongruential32(seed) {
        this.seed = seed;
    }
    LinearCongruential32.prototype.clone = function() {
        return new LinearCongruential32(this.seed);
    };
    LinearCongruential32.prototype.next = function() {
        var nextRng = new LinearCongruential32(this.seed);
        var out = nextRng.unsafeNext();
        return [
            out,
            nextRng
        ];
    };
    LinearCongruential32.prototype.unsafeNext = function() {
        var s1 = computeNextSeed(this.seed);
        var v1 = computeValueFromNextSeed(s1);
        var s2 = computeNextSeed(s1);
        var v2 = computeValueFromNextSeed(s2);
        this.seed = computeNextSeed(s2);
        var v3 = computeValueFromNextSeed(this.seed);
        var vnext = v3 + (v2 + (v1 << 15) << 15);
        return vnext | 0;
    };
    LinearCongruential32.prototype.getState = function() {
        return [
            this.seed
        ];
    };
    return LinearCongruential32;
}();
function fromState(state) {
    var valid = state.length === 1;
    if (!valid) {
        throw new Error('The state must have been produced by a congruential32 RandomGenerator');
    }
    return new LinearCongruential32(state[0]);
}
var congruential32 = Object.assign(function(seed) {
    return new LinearCongruential32(seed);
}, {
    fromState: fromState
});
}}),
"[project]/node_modules/pure-rand/lib/esm/generator/MersenneTwister.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var MersenneTwister = function() {
    function MersenneTwister(states, index) {
        this.states = states;
        this.index = index;
    }
    MersenneTwister.twist = function(prev) {
        var mt = prev.slice();
        for(var idx = 0; idx !== MersenneTwister.N - MersenneTwister.M; ++idx){
            var y_1 = (mt[idx] & MersenneTwister.MASK_UPPER) + (mt[idx + 1] & MersenneTwister.MASK_LOWER);
            mt[idx] = mt[idx + MersenneTwister.M] ^ y_1 >>> 1 ^ -(y_1 & 1) & MersenneTwister.A;
        }
        for(var idx = MersenneTwister.N - MersenneTwister.M; idx !== MersenneTwister.N - 1; ++idx){
            var y_2 = (mt[idx] & MersenneTwister.MASK_UPPER) + (mt[idx + 1] & MersenneTwister.MASK_LOWER);
            mt[idx] = mt[idx + MersenneTwister.M - MersenneTwister.N] ^ y_2 >>> 1 ^ -(y_2 & 1) & MersenneTwister.A;
        }
        var y = (mt[MersenneTwister.N - 1] & MersenneTwister.MASK_UPPER) + (mt[0] & MersenneTwister.MASK_LOWER);
        mt[MersenneTwister.N - 1] = mt[MersenneTwister.M - 1] ^ y >>> 1 ^ -(y & 1) & MersenneTwister.A;
        return mt;
    };
    MersenneTwister.seeded = function(seed) {
        var out = Array(MersenneTwister.N);
        out[0] = seed;
        for(var idx = 1; idx !== MersenneTwister.N; ++idx){
            var xored = out[idx - 1] ^ out[idx - 1] >>> 30;
            out[idx] = Math.imul(MersenneTwister.F, xored) + idx | 0;
        }
        return out;
    };
    MersenneTwister.from = function(seed) {
        return new MersenneTwister(MersenneTwister.twist(MersenneTwister.seeded(seed)), 0);
    };
    MersenneTwister.prototype.clone = function() {
        return new MersenneTwister(this.states, this.index);
    };
    MersenneTwister.prototype.next = function() {
        var nextRng = new MersenneTwister(this.states, this.index);
        var out = nextRng.unsafeNext();
        return [
            out,
            nextRng
        ];
    };
    MersenneTwister.prototype.unsafeNext = function() {
        var y = this.states[this.index];
        y ^= this.states[this.index] >>> MersenneTwister.U;
        y ^= y << MersenneTwister.S & MersenneTwister.B;
        y ^= y << MersenneTwister.T & MersenneTwister.C;
        y ^= y >>> MersenneTwister.L;
        if (++this.index >= MersenneTwister.N) {
            this.states = MersenneTwister.twist(this.states);
            this.index = 0;
        }
        return y;
    };
    MersenneTwister.prototype.getState = function() {
        return __spreadArray([
            this.index
        ], __read(this.states), false);
    };
    MersenneTwister.fromState = function(state) {
        var valid = state.length === MersenneTwister.N + 1 && state[0] >= 0 && state[0] < MersenneTwister.N;
        if (!valid) {
            throw new Error('The state must have been produced by a mersenne RandomGenerator');
        }
        return new MersenneTwister(state.slice(1), state[0]);
    };
    MersenneTwister.N = 624;
    MersenneTwister.M = 397;
    MersenneTwister.R = 31;
    MersenneTwister.A = 0x9908b0df;
    MersenneTwister.F = 1812433253;
    MersenneTwister.U = 11;
    MersenneTwister.S = 7;
    MersenneTwister.B = 0x9d2c5680;
    MersenneTwister.T = 15;
    MersenneTwister.C = 0xefc60000;
    MersenneTwister.L = 18;
    MersenneTwister.MASK_LOWER = Math.pow(2, MersenneTwister.R) - 1;
    MersenneTwister.MASK_UPPER = Math.pow(2, MersenneTwister.R);
    return MersenneTwister;
}();
function fromState(state) {
    return MersenneTwister.fromState(state);
}
const __TURBOPACK__default__export__ = Object.assign(function(seed) {
    return MersenneTwister.from(seed);
}, {
    fromState: fromState
});
}}),
"[project]/node_modules/pure-rand/lib/esm/generator/XorShift.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "xorshift128plus": (()=>xorshift128plus)
});
var XorShift128Plus = function() {
    function XorShift128Plus(s01, s00, s11, s10) {
        this.s01 = s01;
        this.s00 = s00;
        this.s11 = s11;
        this.s10 = s10;
    }
    XorShift128Plus.prototype.clone = function() {
        return new XorShift128Plus(this.s01, this.s00, this.s11, this.s10);
    };
    XorShift128Plus.prototype.next = function() {
        var nextRng = new XorShift128Plus(this.s01, this.s00, this.s11, this.s10);
        var out = nextRng.unsafeNext();
        return [
            out,
            nextRng
        ];
    };
    XorShift128Plus.prototype.unsafeNext = function() {
        var a0 = this.s00 ^ this.s00 << 23;
        var a1 = this.s01 ^ (this.s01 << 23 | this.s00 >>> 9);
        var b0 = a0 ^ this.s10 ^ (a0 >>> 18 | a1 << 14) ^ (this.s10 >>> 5 | this.s11 << 27);
        var b1 = a1 ^ this.s11 ^ a1 >>> 18 ^ this.s11 >>> 5;
        var out = this.s00 + this.s10 | 0;
        this.s01 = this.s11;
        this.s00 = this.s10;
        this.s11 = b1;
        this.s10 = b0;
        return out;
    };
    XorShift128Plus.prototype.jump = function() {
        var nextRng = new XorShift128Plus(this.s01, this.s00, this.s11, this.s10);
        nextRng.unsafeJump();
        return nextRng;
    };
    XorShift128Plus.prototype.unsafeJump = function() {
        var ns01 = 0;
        var ns00 = 0;
        var ns11 = 0;
        var ns10 = 0;
        var jump = [
            0x635d2dff,
            0x8a5cd789,
            0x5c472f96,
            0x121fd215
        ];
        for(var i = 0; i !== 4; ++i){
            for(var mask = 1; mask; mask <<= 1){
                if (jump[i] & mask) {
                    ns01 ^= this.s01;
                    ns00 ^= this.s00;
                    ns11 ^= this.s11;
                    ns10 ^= this.s10;
                }
                this.unsafeNext();
            }
        }
        this.s01 = ns01;
        this.s00 = ns00;
        this.s11 = ns11;
        this.s10 = ns10;
    };
    XorShift128Plus.prototype.getState = function() {
        return [
            this.s01,
            this.s00,
            this.s11,
            this.s10
        ];
    };
    return XorShift128Plus;
}();
function fromState(state) {
    var valid = state.length === 4;
    if (!valid) {
        throw new Error('The state must have been produced by a xorshift128plus RandomGenerator');
    }
    return new XorShift128Plus(state[0], state[1], state[2], state[3]);
}
var xorshift128plus = Object.assign(function(seed) {
    return new XorShift128Plus(-1, ~seed, seed | 0, 0);
}, {
    fromState: fromState
});
}}),
"[project]/node_modules/pure-rand/lib/esm/generator/XoroShiro.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "xoroshiro128plus": (()=>xoroshiro128plus)
});
var XoroShiro128Plus = function() {
    function XoroShiro128Plus(s01, s00, s11, s10) {
        this.s01 = s01;
        this.s00 = s00;
        this.s11 = s11;
        this.s10 = s10;
    }
    XoroShiro128Plus.prototype.clone = function() {
        return new XoroShiro128Plus(this.s01, this.s00, this.s11, this.s10);
    };
    XoroShiro128Plus.prototype.next = function() {
        var nextRng = new XoroShiro128Plus(this.s01, this.s00, this.s11, this.s10);
        var out = nextRng.unsafeNext();
        return [
            out,
            nextRng
        ];
    };
    XoroShiro128Plus.prototype.unsafeNext = function() {
        var out = this.s00 + this.s10 | 0;
        var a0 = this.s10 ^ this.s00;
        var a1 = this.s11 ^ this.s01;
        var s00 = this.s00;
        var s01 = this.s01;
        this.s00 = s00 << 24 ^ s01 >>> 8 ^ a0 ^ a0 << 16;
        this.s01 = s01 << 24 ^ s00 >>> 8 ^ a1 ^ (a1 << 16 | a0 >>> 16);
        this.s10 = a1 << 5 ^ a0 >>> 27;
        this.s11 = a0 << 5 ^ a1 >>> 27;
        return out;
    };
    XoroShiro128Plus.prototype.jump = function() {
        var nextRng = new XoroShiro128Plus(this.s01, this.s00, this.s11, this.s10);
        nextRng.unsafeJump();
        return nextRng;
    };
    XoroShiro128Plus.prototype.unsafeJump = function() {
        var ns01 = 0;
        var ns00 = 0;
        var ns11 = 0;
        var ns10 = 0;
        var jump = [
            0xd8f554a5,
            0xdf900294,
            0x4b3201fc,
            0x170865df
        ];
        for(var i = 0; i !== 4; ++i){
            for(var mask = 1; mask; mask <<= 1){
                if (jump[i] & mask) {
                    ns01 ^= this.s01;
                    ns00 ^= this.s00;
                    ns11 ^= this.s11;
                    ns10 ^= this.s10;
                }
                this.unsafeNext();
            }
        }
        this.s01 = ns01;
        this.s00 = ns00;
        this.s11 = ns11;
        this.s10 = ns10;
    };
    XoroShiro128Plus.prototype.getState = function() {
        return [
            this.s01,
            this.s00,
            this.s11,
            this.s10
        ];
    };
    return XoroShiro128Plus;
}();
function fromState(state) {
    var valid = state.length === 4;
    if (!valid) {
        throw new Error('The state must have been produced by a xoroshiro128plus RandomGenerator');
    }
    return new XoroShiro128Plus(state[0], state[1], state[2], state[3]);
}
var xoroshiro128plus = Object.assign(function(seed) {
    return new XoroShiro128Plus(-1, ~seed, seed | 0, 0);
}, {
    fromState: fromState
});
}}),
"[project]/node_modules/pure-rand/lib/esm/distribution/internals/ArrayInt.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "addArrayIntToNew": (()=>addArrayIntToNew),
    "addOneToPositiveArrayInt": (()=>addOneToPositiveArrayInt),
    "fromNumberToArrayInt64": (()=>fromNumberToArrayInt64),
    "substractArrayInt64": (()=>substractArrayInt64),
    "substractArrayIntToNew": (()=>substractArrayIntToNew),
    "trimArrayIntInplace": (()=>trimArrayIntInplace)
});
function addArrayIntToNew(arrayIntA, arrayIntB) {
    if (arrayIntA.sign !== arrayIntB.sign) {
        return substractArrayIntToNew(arrayIntA, {
            sign: -arrayIntB.sign,
            data: arrayIntB.data
        });
    }
    var data = [];
    var reminder = 0;
    var dataA = arrayIntA.data;
    var dataB = arrayIntB.data;
    for(var indexA = dataA.length - 1, indexB = dataB.length - 1; indexA >= 0 || indexB >= 0; --indexA, --indexB){
        var vA = indexA >= 0 ? dataA[indexA] : 0;
        var vB = indexB >= 0 ? dataB[indexB] : 0;
        var current = vA + vB + reminder;
        data.push(current >>> 0);
        reminder = ~~(current / 0x100000000);
    }
    if (reminder !== 0) {
        data.push(reminder);
    }
    return {
        sign: arrayIntA.sign,
        data: data.reverse()
    };
}
function addOneToPositiveArrayInt(arrayInt) {
    arrayInt.sign = 1;
    var data = arrayInt.data;
    for(var index = data.length - 1; index >= 0; --index){
        if (data[index] === 0xffffffff) {
            data[index] = 0;
        } else {
            data[index] += 1;
            return arrayInt;
        }
    }
    data.unshift(1);
    return arrayInt;
}
function isStrictlySmaller(dataA, dataB) {
    var maxLength = Math.max(dataA.length, dataB.length);
    for(var index = 0; index < maxLength; ++index){
        var indexA = index + dataA.length - maxLength;
        var indexB = index + dataB.length - maxLength;
        var vA = indexA >= 0 ? dataA[indexA] : 0;
        var vB = indexB >= 0 ? dataB[indexB] : 0;
        if (vA < vB) return true;
        if (vA > vB) return false;
    }
    return false;
}
function substractArrayIntToNew(arrayIntA, arrayIntB) {
    if (arrayIntA.sign !== arrayIntB.sign) {
        return addArrayIntToNew(arrayIntA, {
            sign: -arrayIntB.sign,
            data: arrayIntB.data
        });
    }
    var dataA = arrayIntA.data;
    var dataB = arrayIntB.data;
    if (isStrictlySmaller(dataA, dataB)) {
        var out = substractArrayIntToNew(arrayIntB, arrayIntA);
        out.sign = -out.sign;
        return out;
    }
    var data = [];
    var reminder = 0;
    for(var indexA = dataA.length - 1, indexB = dataB.length - 1; indexA >= 0 || indexB >= 0; --indexA, --indexB){
        var vA = indexA >= 0 ? dataA[indexA] : 0;
        var vB = indexB >= 0 ? dataB[indexB] : 0;
        var current = vA - vB - reminder;
        data.push(current >>> 0);
        reminder = current < 0 ? 1 : 0;
    }
    return {
        sign: arrayIntA.sign,
        data: data.reverse()
    };
}
function trimArrayIntInplace(arrayInt) {
    var data = arrayInt.data;
    var firstNonZero = 0;
    for(; firstNonZero !== data.length && data[firstNonZero] === 0; ++firstNonZero){}
    if (firstNonZero === data.length) {
        arrayInt.sign = 1;
        arrayInt.data = [
            0
        ];
        return arrayInt;
    }
    data.splice(0, firstNonZero);
    return arrayInt;
}
function fromNumberToArrayInt64(out, n) {
    if (n < 0) {
        var posN = -n;
        out.sign = -1;
        out.data[0] = ~~(posN / 0x100000000);
        out.data[1] = posN >>> 0;
    } else {
        out.sign = 1;
        out.data[0] = ~~(n / 0x100000000);
        out.data[1] = n >>> 0;
    }
    return out;
}
function substractArrayInt64(out, arrayIntA, arrayIntB) {
    var lowA = arrayIntA.data[1];
    var highA = arrayIntA.data[0];
    var signA = arrayIntA.sign;
    var lowB = arrayIntB.data[1];
    var highB = arrayIntB.data[0];
    var signB = arrayIntB.sign;
    out.sign = 1;
    if (signA === 1 && signB === -1) {
        var low_1 = lowA + lowB;
        var high = highA + highB + (low_1 > 0xffffffff ? 1 : 0);
        out.data[0] = high >>> 0;
        out.data[1] = low_1 >>> 0;
        return out;
    }
    var lowFirst = lowA;
    var highFirst = highA;
    var lowSecond = lowB;
    var highSecond = highB;
    if (signA === -1) {
        lowFirst = lowB;
        highFirst = highB;
        lowSecond = lowA;
        highSecond = highA;
    }
    var reminderLow = 0;
    var low = lowFirst - lowSecond;
    if (low < 0) {
        reminderLow = 1;
        low = low >>> 0;
    }
    out.data[0] = highFirst - highSecond - reminderLow;
    out.data[1] = low;
    return out;
}
}}),
"[project]/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformIntDistributionInternal.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "unsafeUniformIntDistributionInternal": (()=>unsafeUniformIntDistributionInternal)
});
function unsafeUniformIntDistributionInternal(rangeSize, rng) {
    var MaxAllowed = rangeSize > 2 ? ~~(0x100000000 / rangeSize) * rangeSize : 0x100000000;
    var deltaV = rng.unsafeNext() + 0x80000000;
    while(deltaV >= MaxAllowed){
        deltaV = rng.unsafeNext() + 0x80000000;
    }
    return deltaV % rangeSize;
}
}}),
"[project]/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformArrayIntDistributionInternal.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "unsafeUniformArrayIntDistributionInternal": (()=>unsafeUniformArrayIntDistributionInternal)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$UnsafeUniformIntDistributionInternal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformIntDistributionInternal.js [app-route] (ecmascript)");
;
function unsafeUniformArrayIntDistributionInternal(out, rangeSize, rng) {
    var rangeLength = rangeSize.length;
    while(true){
        for(var index = 0; index !== rangeLength; ++index){
            var indexRangeSize = index === 0 ? rangeSize[0] + 1 : 0x100000000;
            var g = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$UnsafeUniformIntDistributionInternal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformIntDistributionInternal"])(indexRangeSize, rng);
            out[index] = g;
        }
        for(var index = 0; index !== rangeLength; ++index){
            var current = out[index];
            var currentInRange = rangeSize[index];
            if (current < currentInRange) {
                return out;
            } else if (current > currentInRange) {
                break;
            }
        }
    }
}
}}),
"[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformArrayIntDistribution.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "unsafeUniformArrayIntDistribution": (()=>unsafeUniformArrayIntDistribution)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/internals/ArrayInt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$UnsafeUniformArrayIntDistributionInternal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformArrayIntDistributionInternal.js [app-route] (ecmascript)");
;
;
function unsafeUniformArrayIntDistribution(from, to, rng) {
    var rangeSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["trimArrayIntInplace"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["addOneToPositiveArrayInt"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["substractArrayIntToNew"])(to, from)));
    var emptyArrayIntData = rangeSize.data.slice(0);
    var g = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$UnsafeUniformArrayIntDistributionInternal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformArrayIntDistributionInternal"])(emptyArrayIntData, rangeSize.data, rng);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["trimArrayIntInplace"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["addArrayIntToNew"])({
        sign: 1,
        data: g
    }, from));
}
}}),
"[project]/node_modules/pure-rand/lib/esm/distribution/UniformArrayIntDistribution.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "uniformArrayIntDistribution": (()=>uniformArrayIntDistribution)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformArrayIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformArrayIntDistribution.js [app-route] (ecmascript)");
;
function uniformArrayIntDistribution(from, to, rng) {
    if (rng != null) {
        var nextRng = rng.clone();
        return [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformArrayIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformArrayIntDistribution"])(from, to, nextRng),
            nextRng
        ];
    }
    return function(rng) {
        var nextRng = rng.clone();
        return [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformArrayIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformArrayIntDistribution"])(from, to, nextRng),
            nextRng
        ];
    };
}
;
}}),
"[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformBigIntDistribution.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "unsafeUniformBigIntDistribution": (()=>unsafeUniformBigIntDistribution)
});
var SBigInt = typeof BigInt !== 'undefined' ? BigInt : undefined;
function unsafeUniformBigIntDistribution(from, to, rng) {
    var diff = to - from + SBigInt(1);
    var MinRng = SBigInt(-0x80000000);
    var NumValues = SBigInt(0x100000000);
    var FinalNumValues = NumValues;
    var NumIterations = 1;
    while(FinalNumValues < diff){
        FinalNumValues *= NumValues;
        ++NumIterations;
    }
    var MaxAcceptedRandom = FinalNumValues - FinalNumValues % diff;
    while(true){
        var value = SBigInt(0);
        for(var num = 0; num !== NumIterations; ++num){
            var out = rng.unsafeNext();
            value = NumValues * value + (SBigInt(out) - MinRng);
        }
        if (value < MaxAcceptedRandom) {
            var inDiff = value % diff;
            return inDiff + from;
        }
    }
}
}}),
"[project]/node_modules/pure-rand/lib/esm/distribution/UniformBigIntDistribution.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "uniformBigIntDistribution": (()=>uniformBigIntDistribution)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformBigIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformBigIntDistribution.js [app-route] (ecmascript)");
;
function uniformBigIntDistribution(from, to, rng) {
    if (rng != null) {
        var nextRng = rng.clone();
        return [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformBigIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformBigIntDistribution"])(from, to, nextRng),
            nextRng
        ];
    }
    return function(rng) {
        var nextRng = rng.clone();
        return [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformBigIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformBigIntDistribution"])(from, to, nextRng),
            nextRng
        ];
    };
}
;
}}),
"[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformIntDistribution.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "unsafeUniformIntDistribution": (()=>unsafeUniformIntDistribution)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$UnsafeUniformIntDistributionInternal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformIntDistributionInternal.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/internals/ArrayInt.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$UnsafeUniformArrayIntDistributionInternal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformArrayIntDistributionInternal.js [app-route] (ecmascript)");
;
;
;
var safeNumberMaxSafeInteger = Number.MAX_SAFE_INTEGER;
var sharedA = {
    sign: 1,
    data: [
        0,
        0
    ]
};
var sharedB = {
    sign: 1,
    data: [
        0,
        0
    ]
};
var sharedC = {
    sign: 1,
    data: [
        0,
        0
    ]
};
var sharedData = [
    0,
    0
];
function uniformLargeIntInternal(from, to, rangeSize, rng) {
    var rangeSizeArrayIntValue = rangeSize <= safeNumberMaxSafeInteger ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fromNumberToArrayInt64"])(sharedC, rangeSize) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["substractArrayInt64"])(sharedC, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fromNumberToArrayInt64"])(sharedA, to), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$ArrayInt$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fromNumberToArrayInt64"])(sharedB, from));
    if (rangeSizeArrayIntValue.data[1] === 0xffffffff) {
        rangeSizeArrayIntValue.data[0] += 1;
        rangeSizeArrayIntValue.data[1] = 0;
    } else {
        rangeSizeArrayIntValue.data[1] += 1;
    }
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$UnsafeUniformArrayIntDistributionInternal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformArrayIntDistributionInternal"])(sharedData, rangeSizeArrayIntValue.data, rng);
    return sharedData[0] * 0x100000000 + sharedData[1] + from;
}
function unsafeUniformIntDistribution(from, to, rng) {
    var rangeSize = to - from;
    if (rangeSize <= 0xffffffff) {
        var g = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$internals$2f$UnsafeUniformIntDistributionInternal$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformIntDistributionInternal"])(rangeSize + 1, rng);
        return g + from;
    }
    return uniformLargeIntInternal(from, to, rangeSize, rng);
}
}}),
"[project]/node_modules/pure-rand/lib/esm/distribution/UniformIntDistribution.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "uniformIntDistribution": (()=>uniformIntDistribution)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformIntDistribution.js [app-route] (ecmascript)");
;
function uniformIntDistribution(from, to, rng) {
    if (rng != null) {
        var nextRng = rng.clone();
        return [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformIntDistribution"])(from, to, nextRng),
            nextRng
        ];
    }
    return function(rng) {
        var nextRng = rng.clone();
        return [
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformIntDistribution"])(from, to, nextRng),
            nextRng
        ];
    };
}
;
}}),
"[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "__commitHash": (()=>__commitHash),
    "__type": (()=>__type),
    "__version": (()=>__version)
});
;
;
;
;
;
;
;
;
;
;
;
var __type = 'module';
var __version = '6.1.0';
var __commitHash = 'a413dd2b721516be2ef29adffb515c5ae67bfbad';
;
}}),
"[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$RandomGenerator$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/RandomGenerator.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$LinearCongruential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/LinearCongruential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$MersenneTwister$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/MersenneTwister.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$XorShift$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/XorShift.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$XoroShiro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/XoroShiro.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UniformArrayIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UniformArrayIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UniformBigIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UniformBigIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UniformIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UniformIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformArrayIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformArrayIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformBigIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformBigIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "__commitHash": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["__commitHash"]),
    "__type": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["__type"]),
    "__version": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["__version"]),
    "congruential32": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$LinearCongruential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["congruential32"]),
    "generateN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$RandomGenerator$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["generateN"]),
    "mersenne": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$MersenneTwister$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]),
    "skipN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$RandomGenerator$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["skipN"]),
    "uniformArrayIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UniformArrayIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["uniformArrayIntDistribution"]),
    "uniformBigIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UniformBigIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["uniformBigIntDistribution"]),
    "uniformIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UniformIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["uniformIntDistribution"]),
    "unsafeGenerateN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$RandomGenerator$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeGenerateN"]),
    "unsafeSkipN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$RandomGenerator$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeSkipN"]),
    "unsafeUniformArrayIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformArrayIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformArrayIntDistribution"]),
    "unsafeUniformBigIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformBigIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformBigIntDistribution"]),
    "unsafeUniformIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["unsafeUniformIntDistribution"]),
    "xoroshiro128plus": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$XoroShiro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["xoroshiro128plus"]),
    "xorshift128plus": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$XorShift$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["xorshift128plus"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$LinearCongruential$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/LinearCongruential.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$RandomGenerator$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/RandomGenerator.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$MersenneTwister$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/MersenneTwister.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UniformArrayIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UniformArrayIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UniformBigIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UniformBigIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UniformIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UniformIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformArrayIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformArrayIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformBigIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformBigIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$distribution$2f$UnsafeUniformIntDistribution$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/distribution/UnsafeUniformIntDistribution.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$XoroShiro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/XoroShiro.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$generator$2f$XorShift$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/generator/XorShift.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "__commitHash": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["__commitHash"]),
    "__type": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["__type"]),
    "__version": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["__version"]),
    "congruential32": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["congruential32"]),
    "generateN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["generateN"]),
    "mersenne": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["mersenne"]),
    "skipN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["skipN"]),
    "uniformArrayIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["uniformArrayIntDistribution"]),
    "uniformBigIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["uniformBigIntDistribution"]),
    "uniformIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["uniformIntDistribution"]),
    "unsafeGenerateN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["unsafeGenerateN"]),
    "unsafeSkipN": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["unsafeSkipN"]),
    "unsafeUniformArrayIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["unsafeUniformArrayIntDistribution"]),
    "unsafeUniformBigIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["unsafeUniformBigIntDistribution"]),
    "unsafeUniformIntDistribution": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["unsafeUniformIntDistribution"]),
    "xoroshiro128plus": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["xoroshiro128plus"]),
    "xorshift128plus": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["xorshift128plus"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript) <exports>");
}}),
"[project]/node_modules/pure-rand/lib/esm/pure-rand.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript)");
;
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__;
;
}}),
"[project]/node_modules/pure-rand/lib/esm/pure-rand.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2d$default$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/pure-rand-default.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$pure$2d$rand$2f$lib$2f$esm$2f$pure$2d$rand$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/pure-rand/lib/esm/pure-rand.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/sqids/esm/sqids.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>Sqids),
    "defaultOptions": (()=>defaultOptions)
});
const defaultOptions = {
    alphabet: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',
    minLength: 0,
    blocklist: new Set([
        '0rgasm',
        '1d10t',
        '1d1ot',
        '1di0t',
        '1diot',
        '1eccacu10',
        '1eccacu1o',
        '1eccacul0',
        '1eccaculo',
        '1mbec11e',
        '1mbec1le',
        '1mbeci1e',
        '1mbecile',
        'a11upat0',
        'a11upato',
        'a1lupat0',
        'a1lupato',
        'aand',
        'ah01e',
        'ah0le',
        'aho1e',
        'ahole',
        'al1upat0',
        'al1upato',
        'allupat0',
        'allupato',
        'ana1',
        'ana1e',
        'anal',
        'anale',
        'anus',
        'arrapat0',
        'arrapato',
        'arsch',
        'arse',
        'ass',
        'b00b',
        'b00be',
        'b01ata',
        'b0ceta',
        'b0iata',
        'b0ob',
        'b0obe',
        'b0sta',
        'b1tch',
        'b1te',
        'b1tte',
        'ba1atkar',
        'balatkar',
        'bastard0',
        'bastardo',
        'batt0na',
        'battona',
        'bitch',
        'bite',
        'bitte',
        'bo0b',
        'bo0be',
        'bo1ata',
        'boceta',
        'boiata',
        'boob',
        'boobe',
        'bosta',
        'bran1age',
        'bran1er',
        'bran1ette',
        'bran1eur',
        'bran1euse',
        'branlage',
        'branler',
        'branlette',
        'branleur',
        'branleuse',
        'c0ck',
        'c0g110ne',
        'c0g11one',
        'c0g1i0ne',
        'c0g1ione',
        'c0gl10ne',
        'c0gl1one',
        'c0gli0ne',
        'c0glione',
        'c0na',
        'c0nnard',
        'c0nnasse',
        'c0nne',
        'c0u111es',
        'c0u11les',
        'c0u1l1es',
        'c0u1lles',
        'c0ui11es',
        'c0ui1les',
        'c0uil1es',
        'c0uilles',
        'c11t',
        'c11t0',
        'c11to',
        'c1it',
        'c1it0',
        'c1ito',
        'cabr0n',
        'cabra0',
        'cabrao',
        'cabron',
        'caca',
        'cacca',
        'cacete',
        'cagante',
        'cagar',
        'cagare',
        'cagna',
        'cara1h0',
        'cara1ho',
        'caracu10',
        'caracu1o',
        'caracul0',
        'caraculo',
        'caralh0',
        'caralho',
        'cazz0',
        'cazz1mma',
        'cazzata',
        'cazzimma',
        'cazzo',
        'ch00t1a',
        'ch00t1ya',
        'ch00tia',
        'ch00tiya',
        'ch0d',
        'ch0ot1a',
        'ch0ot1ya',
        'ch0otia',
        'ch0otiya',
        'ch1asse',
        'ch1avata',
        'ch1er',
        'ch1ng0',
        'ch1ngadaz0s',
        'ch1ngadazos',
        'ch1ngader1ta',
        'ch1ngaderita',
        'ch1ngar',
        'ch1ngo',
        'ch1ngues',
        'ch1nk',
        'chatte',
        'chiasse',
        'chiavata',
        'chier',
        'ching0',
        'chingadaz0s',
        'chingadazos',
        'chingader1ta',
        'chingaderita',
        'chingar',
        'chingo',
        'chingues',
        'chink',
        'cho0t1a',
        'cho0t1ya',
        'cho0tia',
        'cho0tiya',
        'chod',
        'choot1a',
        'choot1ya',
        'chootia',
        'chootiya',
        'cl1t',
        'cl1t0',
        'cl1to',
        'clit',
        'clit0',
        'clito',
        'cock',
        'cog110ne',
        'cog11one',
        'cog1i0ne',
        'cog1ione',
        'cogl10ne',
        'cogl1one',
        'cogli0ne',
        'coglione',
        'cona',
        'connard',
        'connasse',
        'conne',
        'cou111es',
        'cou11les',
        'cou1l1es',
        'cou1lles',
        'coui11es',
        'coui1les',
        'couil1es',
        'couilles',
        'cracker',
        'crap',
        'cu10',
        'cu1att0ne',
        'cu1attone',
        'cu1er0',
        'cu1ero',
        'cu1o',
        'cul0',
        'culatt0ne',
        'culattone',
        'culer0',
        'culero',
        'culo',
        'cum',
        'cunt',
        'd11d0',
        'd11do',
        'd1ck',
        'd1ld0',
        'd1ldo',
        'damn',
        'de1ch',
        'deich',
        'depp',
        'di1d0',
        'di1do',
        'dick',
        'dild0',
        'dildo',
        'dyke',
        'encu1e',
        'encule',
        'enema',
        'enf01re',
        'enf0ire',
        'enfo1re',
        'enfoire',
        'estup1d0',
        'estup1do',
        'estupid0',
        'estupido',
        'etr0n',
        'etron',
        'f0da',
        'f0der',
        'f0ttere',
        'f0tters1',
        'f0ttersi',
        'f0tze',
        'f0utre',
        'f1ca',
        'f1cker',
        'f1ga',
        'fag',
        'fica',
        'ficker',
        'figa',
        'foda',
        'foder',
        'fottere',
        'fotters1',
        'fottersi',
        'fotze',
        'foutre',
        'fr0c10',
        'fr0c1o',
        'fr0ci0',
        'fr0cio',
        'fr0sc10',
        'fr0sc1o',
        'fr0sci0',
        'fr0scio',
        'froc10',
        'froc1o',
        'froci0',
        'frocio',
        'frosc10',
        'frosc1o',
        'frosci0',
        'froscio',
        'fuck',
        'g00',
        'g0o',
        'g0u1ne',
        'g0uine',
        'gandu',
        'go0',
        'goo',
        'gou1ne',
        'gouine',
        'gr0gnasse',
        'grognasse',
        'haram1',
        'harami',
        'haramzade',
        'hund1n',
        'hundin',
        'id10t',
        'id1ot',
        'idi0t',
        'idiot',
        'imbec11e',
        'imbec1le',
        'imbeci1e',
        'imbecile',
        'j1zz',
        'jerk',
        'jizz',
        'k1ke',
        'kam1ne',
        'kamine',
        'kike',
        'leccacu10',
        'leccacu1o',
        'leccacul0',
        'leccaculo',
        'm1erda',
        'm1gn0tta',
        'm1gnotta',
        'm1nch1a',
        'm1nchia',
        'm1st',
        'mam0n',
        'mamahuev0',
        'mamahuevo',
        'mamon',
        'masturbat10n',
        'masturbat1on',
        'masturbate',
        'masturbati0n',
        'masturbation',
        'merd0s0',
        'merd0so',
        'merda',
        'merde',
        'merdos0',
        'merdoso',
        'mierda',
        'mign0tta',
        'mignotta',
        'minch1a',
        'minchia',
        'mist',
        'musch1',
        'muschi',
        'n1gger',
        'neger',
        'negr0',
        'negre',
        'negro',
        'nerch1a',
        'nerchia',
        'nigger',
        'orgasm',
        'p00p',
        'p011a',
        'p01la',
        'p0l1a',
        'p0lla',
        'p0mp1n0',
        'p0mp1no',
        'p0mpin0',
        'p0mpino',
        'p0op',
        'p0rca',
        'p0rn',
        'p0rra',
        'p0uff1asse',
        'p0uffiasse',
        'p1p1',
        'p1pi',
        'p1r1a',
        'p1rla',
        'p1sc10',
        'p1sc1o',
        'p1sci0',
        'p1scio',
        'p1sser',
        'pa11e',
        'pa1le',
        'pal1e',
        'palle',
        'pane1e1r0',
        'pane1e1ro',
        'pane1eir0',
        'pane1eiro',
        'panele1r0',
        'panele1ro',
        'paneleir0',
        'paneleiro',
        'patakha',
        'pec0r1na',
        'pec0rina',
        'pecor1na',
        'pecorina',
        'pen1s',
        'pendej0',
        'pendejo',
        'penis',
        'pip1',
        'pipi',
        'pir1a',
        'pirla',
        'pisc10',
        'pisc1o',
        'pisci0',
        'piscio',
        'pisser',
        'po0p',
        'po11a',
        'po1la',
        'pol1a',
        'polla',
        'pomp1n0',
        'pomp1no',
        'pompin0',
        'pompino',
        'poop',
        'porca',
        'porn',
        'porra',
        'pouff1asse',
        'pouffiasse',
        'pr1ck',
        'prick',
        'pussy',
        'put1za',
        'puta',
        'puta1n',
        'putain',
        'pute',
        'putiza',
        'puttana',
        'queca',
        'r0mp1ba11e',
        'r0mp1ba1le',
        'r0mp1bal1e',
        'r0mp1balle',
        'r0mpiba11e',
        'r0mpiba1le',
        'r0mpibal1e',
        'r0mpiballe',
        'rand1',
        'randi',
        'rape',
        'recch10ne',
        'recch1one',
        'recchi0ne',
        'recchione',
        'retard',
        'romp1ba11e',
        'romp1ba1le',
        'romp1bal1e',
        'romp1balle',
        'rompiba11e',
        'rompiba1le',
        'rompibal1e',
        'rompiballe',
        'ruff1an0',
        'ruff1ano',
        'ruffian0',
        'ruffiano',
        's1ut',
        'sa10pe',
        'sa1aud',
        'sa1ope',
        'sacanagem',
        'sal0pe',
        'salaud',
        'salope',
        'saugnapf',
        'sb0rr0ne',
        'sb0rra',
        'sb0rrone',
        'sbattere',
        'sbatters1',
        'sbattersi',
        'sborr0ne',
        'sborra',
        'sborrone',
        'sc0pare',
        'sc0pata',
        'sch1ampe',
        'sche1se',
        'sche1sse',
        'scheise',
        'scheisse',
        'schlampe',
        'schwachs1nn1g',
        'schwachs1nnig',
        'schwachsinn1g',
        'schwachsinnig',
        'schwanz',
        'scopare',
        'scopata',
        'sexy',
        'sh1t',
        'shit',
        'slut',
        'sp0mp1nare',
        'sp0mpinare',
        'spomp1nare',
        'spompinare',
        'str0nz0',
        'str0nza',
        'str0nzo',
        'stronz0',
        'stronza',
        'stronzo',
        'stup1d',
        'stupid',
        'succh1am1',
        'succh1ami',
        'succhiam1',
        'succhiami',
        'sucker',
        't0pa',
        'tapette',
        'test1c1e',
        'test1cle',
        'testic1e',
        'testicle',
        'tette',
        'topa',
        'tr01a',
        'tr0ia',
        'tr0mbare',
        'tr1ng1er',
        'tr1ngler',
        'tring1er',
        'tringler',
        'tro1a',
        'troia',
        'trombare',
        'turd',
        'twat',
        'vaffancu10',
        'vaffancu1o',
        'vaffancul0',
        'vaffanculo',
        'vag1na',
        'vagina',
        'verdammt',
        'verga',
        'w1chsen',
        'wank',
        'wichsen',
        'x0ch0ta',
        'x0chota',
        'xana',
        'xoch0ta',
        'xochota',
        'z0cc01a',
        'z0cc0la',
        'z0cco1a',
        'z0ccola',
        'z1z1',
        'z1zi',
        'ziz1',
        'zizi',
        'zocc01a',
        'zocc0la',
        'zocco1a',
        'zoccola'
    ])
};
class Sqids {
    constructor(options){
        var _a, _b, _c;
        const alphabet = (_a = options === null || options === void 0 ? void 0 : options.alphabet) !== null && _a !== void 0 ? _a : defaultOptions.alphabet;
        const minLength = (_b = options === null || options === void 0 ? void 0 : options.minLength) !== null && _b !== void 0 ? _b : defaultOptions.minLength;
        const blocklist = (_c = options === null || options === void 0 ? void 0 : options.blocklist) !== null && _c !== void 0 ? _c : defaultOptions.blocklist;
        if (new Blob([
            alphabet
        ]).size !== alphabet.length) {
            throw new Error('Alphabet cannot contain multibyte characters');
        }
        const minAlphabetLength = 3;
        if (alphabet.length < minAlphabetLength) {
            throw new Error(`Alphabet length must be at least ${minAlphabetLength}`);
        }
        if (new Set(alphabet).size !== alphabet.length) {
            throw new Error('Alphabet must contain unique characters');
        }
        const minLengthLimit = 255;
        if (typeof minLength !== 'number' || minLength < 0 || minLength > minLengthLimit) {
            throw new Error(`Minimum length has to be between 0 and ${minLengthLimit}`);
        }
        const filteredBlocklist = new Set();
        const alphabetChars = alphabet.toLowerCase().split('');
        for (const word of blocklist){
            if (word.length >= 3) {
                const wordLowercased = word.toLowerCase();
                const wordChars = wordLowercased.split('');
                const intersection = wordChars.filter((c)=>alphabetChars.includes(c));
                if (intersection.length === wordChars.length) {
                    filteredBlocklist.add(wordLowercased);
                }
            }
        }
        this.alphabet = this.shuffle(alphabet);
        this.minLength = minLength;
        this.blocklist = filteredBlocklist;
    }
    encode(numbers) {
        if (numbers.length === 0) {
            return '';
        }
        const inRangeNumbers = numbers.filter((n)=>n >= 0 && n <= this.maxValue());
        if (inRangeNumbers.length !== numbers.length) {
            throw new Error(`Encoding supports numbers between 0 and ${this.maxValue()}`);
        }
        return this.encodeNumbers(numbers);
    }
    decode(id) {
        const ret = [];
        if (id === '') {
            return ret;
        }
        const alphabetChars = this.alphabet.split('');
        for (const c of id.split('')){
            if (!alphabetChars.includes(c)) {
                return ret;
            }
        }
        const prefix = id.charAt(0);
        const offset = this.alphabet.indexOf(prefix);
        let alphabet = this.alphabet.slice(offset) + this.alphabet.slice(0, offset);
        alphabet = alphabet.split('').reverse().join('');
        let slicedId = id.slice(1);
        while(slicedId.length > 0){
            const separator = alphabet.slice(0, 1);
            const chunks = slicedId.split(separator);
            if (chunks.length > 0) {
                if (chunks[0] === '') {
                    return ret;
                }
                ret.push(this.toNumber(chunks[0], alphabet.slice(1)));
                if (chunks.length > 1) {
                    alphabet = this.shuffle(alphabet);
                }
            }
            slicedId = chunks.slice(1).join(separator);
        }
        return ret;
    }
    encodeNumbers(numbers, increment = 0) {
        if (increment > this.alphabet.length) {
            throw new Error('Reached max attempts to re-generate the ID');
        }
        let offset = numbers.reduce((a, v, i)=>this.alphabet[v % this.alphabet.length].codePointAt(0) + i + a, numbers.length) % this.alphabet.length;
        offset = (offset + increment) % this.alphabet.length;
        let alphabet = this.alphabet.slice(offset) + this.alphabet.slice(0, offset);
        const prefix = alphabet.charAt(0);
        alphabet = alphabet.split('').reverse().join('');
        const ret = [
            prefix
        ];
        for(let i = 0; i !== numbers.length; i++){
            const num = numbers[i];
            ret.push(this.toId(num, alphabet.slice(1)));
            if (i < numbers.length - 1) {
                ret.push(alphabet.slice(0, 1));
                alphabet = this.shuffle(alphabet);
            }
        }
        let id = ret.join('');
        if (this.minLength > id.length) {
            id += alphabet.slice(0, 1);
            while(this.minLength - id.length > 0){
                alphabet = this.shuffle(alphabet);
                id += alphabet.slice(0, Math.min(this.minLength - id.length, alphabet.length));
            }
        }
        if (this.isBlockedId(id)) {
            id = this.encodeNumbers(numbers, increment + 1);
        }
        return id;
    }
    shuffle(alphabet) {
        const chars = alphabet.split('');
        for(let i = 0, j = chars.length - 1; j > 0; i++, j--){
            const r = (i * j + chars[i].codePointAt(0) + chars[j].codePointAt(0)) % chars.length;
            [chars[i], chars[r]] = [
                chars[r],
                chars[i]
            ];
        }
        return chars.join('');
    }
    toId(num, alphabet) {
        const id = [];
        const chars = alphabet.split('');
        let result = num;
        do {
            id.unshift(chars[result % chars.length]);
            result = Math.floor(result / chars.length);
        }while (result > 0)
        return id.join('');
    }
    toNumber(id, alphabet) {
        const chars = alphabet.split('');
        return id.split('').reduce((a, v)=>a * chars.length + chars.indexOf(v), 0);
    }
    isBlockedId(id) {
        const lowercaseId = id.toLowerCase();
        for (const word of this.blocklist){
            if (word.length <= lowercaseId.length) {
                if (lowercaseId.length <= 3 || word.length <= 3) {
                    if (lowercaseId === word) {
                        return true;
                    }
                } else if (/\d/.test(word)) {
                    if (lowercaseId.startsWith(word) || lowercaseId.endsWith(word)) {
                        return true;
                    }
                } else if (lowercaseId.includes(word)) {
                    return true;
                }
            }
        }
        return false;
    }
    maxValue() {
        return Number.MAX_SAFE_INTEGER;
    }
} //# sourceMappingURL=sqids.js.map
}}),
"[project]/node_modules/@uploadthing/mime-types/application/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "application": (()=>application)
});
const application = {
    "application/andrew-inset": {
        source: "iana",
        extensions: [
            "ez"
        ]
    },
    "application/applixware": {
        source: "apache",
        extensions: [
            "aw"
        ]
    },
    "application/atom+xml": {
        source: "iana",
        extensions: [
            "atom"
        ]
    },
    "application/atomcat+xml": {
        source: "iana",
        extensions: [
            "atomcat"
        ]
    },
    "application/atomdeleted+xml": {
        source: "iana",
        extensions: [
            "atomdeleted"
        ]
    },
    "application/atomsvc+xml": {
        source: "iana",
        extensions: [
            "atomsvc"
        ]
    },
    "application/atsc-dwd+xml": {
        source: "iana",
        extensions: [
            "dwd"
        ]
    },
    "application/atsc-held+xml": {
        source: "iana",
        extensions: [
            "held"
        ]
    },
    "application/atsc-rsat+xml": {
        source: "iana",
        extensions: [
            "rsat"
        ]
    },
    "application/calendar+xml": {
        source: "iana",
        extensions: [
            "xcs"
        ]
    },
    "application/ccxml+xml": {
        source: "iana",
        extensions: [
            "ccxml"
        ]
    },
    "application/cdfx+xml": {
        source: "iana",
        extensions: [
            "cdfx"
        ]
    },
    "application/cdmi-capability": {
        source: "iana",
        extensions: [
            "cdmia"
        ]
    },
    "application/cdmi-container": {
        source: "iana",
        extensions: [
            "cdmic"
        ]
    },
    "application/cdmi-domain": {
        source: "iana",
        extensions: [
            "cdmid"
        ]
    },
    "application/cdmi-object": {
        source: "iana",
        extensions: [
            "cdmio"
        ]
    },
    "application/cdmi-queue": {
        source: "iana",
        extensions: [
            "cdmiq"
        ]
    },
    "application/cpl+xml": {
        source: "iana",
        extensions: [
            "cpl"
        ]
    },
    "application/cu-seeme": {
        source: "apache",
        extensions: [
            "cu"
        ]
    },
    "application/dash+xml": {
        source: "iana",
        extensions: [
            "mpd"
        ]
    },
    "application/dash-patch+xml": {
        source: "iana",
        extensions: [
            "mpp"
        ]
    },
    "application/davmount+xml": {
        source: "iana",
        extensions: [
            "davmount"
        ]
    },
    "application/dicom": {
        source: "iana",
        extensions: [
            "dcm"
        ]
    },
    "application/docbook+xml": {
        source: "apache",
        extensions: [
            "dbk"
        ]
    },
    "application/dssc+der": {
        source: "iana",
        extensions: [
            "dssc"
        ]
    },
    "application/dssc+xml": {
        source: "iana",
        extensions: [
            "xdssc"
        ]
    },
    "application/ecmascript": {
        source: "iana",
        extensions: [
            "es",
            "ecma"
        ]
    },
    "application/emma+xml": {
        source: "iana",
        extensions: [
            "emma"
        ]
    },
    "application/emotionml+xml": {
        source: "iana",
        extensions: [
            "emotionml"
        ]
    },
    "application/epub+zip": {
        source: "iana",
        extensions: [
            "epub"
        ]
    },
    "application/exi": {
        source: "iana",
        extensions: [
            "exi"
        ]
    },
    "application/express": {
        source: "iana",
        extensions: [
            "exp"
        ]
    },
    "application/fdt+xml": {
        source: "iana",
        extensions: [
            "fdt"
        ]
    },
    "application/font-tdpfr": {
        source: "iana",
        extensions: [
            "pfr"
        ]
    },
    "application/geo+json": {
        source: "iana",
        extensions: [
            "geojson"
        ]
    },
    "application/gml+xml": {
        source: "iana",
        extensions: [
            "gml"
        ]
    },
    "application/gpx+xml": {
        source: "apache",
        extensions: [
            "gpx"
        ]
    },
    "application/gxf": {
        source: "apache",
        extensions: [
            "gxf"
        ]
    },
    "application/gzip": {
        source: "iana",
        extensions: [
            "gz"
        ]
    },
    "application/hyperstudio": {
        source: "iana",
        extensions: [
            "stk"
        ]
    },
    "application/inkml+xml": {
        source: "iana",
        extensions: [
            "ink",
            "inkml"
        ]
    },
    "application/ipfix": {
        source: "iana",
        extensions: [
            "ipfix"
        ]
    },
    "application/its+xml": {
        source: "iana",
        extensions: [
            "its"
        ]
    },
    "application/java-archive": {
        source: "apache",
        extensions: [
            "jar",
            "war",
            "ear"
        ]
    },
    "application/java-serialized-object": {
        source: "apache",
        extensions: [
            "ser"
        ]
    },
    "application/java-vm": {
        source: "apache",
        extensions: [
            "class"
        ]
    },
    "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "js",
            "mjs"
        ]
    },
    "application/json": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "json",
            "map"
        ]
    },
    "application/jsonml+json": {
        source: "apache",
        extensions: [
            "jsonml"
        ]
    },
    "application/ld+json": {
        source: "iana",
        extensions: [
            "jsonld"
        ]
    },
    "application/lgr+xml": {
        source: "iana",
        extensions: [
            "lgr"
        ]
    },
    "application/lost+xml": {
        source: "iana",
        extensions: [
            "lostxml"
        ]
    },
    "application/mac-binhex40": {
        source: "iana",
        extensions: [
            "hqx"
        ]
    },
    "application/mac-compactpro": {
        source: "apache",
        extensions: [
            "cpt"
        ]
    },
    "application/mads+xml": {
        source: "iana",
        extensions: [
            "mads"
        ]
    },
    "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "webmanifest"
        ]
    },
    "application/marc": {
        source: "iana",
        extensions: [
            "mrc"
        ]
    },
    "application/marcxml+xml": {
        source: "iana",
        extensions: [
            "mrcx"
        ]
    },
    "application/mathematica": {
        source: "iana",
        extensions: [
            "ma",
            "nb",
            "mb"
        ]
    },
    "application/mathml+xml": {
        source: "iana",
        extensions: [
            "mathml"
        ]
    },
    "application/mbox": {
        source: "iana",
        extensions: [
            "mbox"
        ]
    },
    "application/media-policy-dataset+xml": {
        source: "iana",
        extensions: [
            "mpf"
        ]
    },
    "application/mediaservercontrol+xml": {
        source: "iana",
        extensions: [
            "mscml"
        ]
    },
    "application/metalink+xml": {
        source: "apache",
        extensions: [
            "metalink"
        ]
    },
    "application/metalink4+xml": {
        source: "iana",
        extensions: [
            "meta4"
        ]
    },
    "application/mets+xml": {
        source: "iana",
        extensions: [
            "mets"
        ]
    },
    "application/mmt-aei+xml": {
        source: "iana",
        extensions: [
            "maei"
        ]
    },
    "application/mmt-usd+xml": {
        source: "iana",
        extensions: [
            "musd"
        ]
    },
    "application/mods+xml": {
        source: "iana",
        extensions: [
            "mods"
        ]
    },
    "application/mp21": {
        source: "iana",
        extensions: [
            "m21",
            "mp21"
        ]
    },
    "application/mp4": {
        source: "iana",
        extensions: [
            "mp4s",
            "m4p"
        ]
    },
    "application/msword": {
        source: "iana",
        extensions: [
            "doc",
            "dot"
        ]
    },
    "application/mxf": {
        source: "iana",
        extensions: [
            "mxf"
        ]
    },
    "application/n-quads": {
        source: "iana",
        extensions: [
            "nq"
        ]
    },
    "application/n-triples": {
        source: "iana",
        extensions: [
            "nt"
        ]
    },
    "application/node": {
        source: "iana",
        extensions: [
            "cjs"
        ]
    },
    "application/octet-stream": {
        source: "iana",
        extensions: [
            "bin",
            "dms",
            "lrf",
            "mar",
            "so",
            "dist",
            "distz",
            "pkg",
            "bpk",
            "dump",
            "elc",
            "deploy",
            "exe",
            "dll",
            "deb",
            "dmg",
            "iso",
            "img",
            "msi",
            "msp",
            "msm",
            "buffer"
        ]
    },
    "application/oda": {
        source: "iana",
        extensions: [
            "oda"
        ]
    },
    "application/oebps-package+xml": {
        source: "iana",
        extensions: [
            "opf"
        ]
    },
    "application/ogg": {
        source: "iana",
        extensions: [
            "ogx"
        ]
    },
    "application/omdoc+xml": {
        source: "apache",
        extensions: [
            "omdoc"
        ]
    },
    "application/onenote": {
        source: "apache",
        extensions: [
            "onetoc",
            "onetoc2",
            "onetmp",
            "onepkg"
        ]
    },
    "application/oxps": {
        source: "iana",
        extensions: [
            "oxps"
        ]
    },
    "application/p2p-overlay+xml": {
        source: "iana",
        extensions: [
            "relo"
        ]
    },
    "application/patch-ops-error+xml": {
        source: "iana",
        extensions: [
            "xer"
        ]
    },
    "application/pdf": {
        source: "iana",
        extensions: [
            "pdf"
        ]
    },
    "application/pgp-encrypted": {
        source: "iana",
        extensions: [
            "pgp"
        ]
    },
    "application/pgp-keys": {
        source: "iana",
        extensions: [
            "asc"
        ]
    },
    "application/pgp-signature": {
        source: "iana",
        extensions: [
            "asc",
            "sig"
        ]
    },
    "application/pics-rules": {
        source: "apache",
        extensions: [
            "prf"
        ]
    },
    "application/pkcs10": {
        source: "iana",
        extensions: [
            "p10"
        ]
    },
    "application/pkcs7-mime": {
        source: "iana",
        extensions: [
            "p7m",
            "p7c"
        ]
    },
    "application/pkcs7-signature": {
        source: "iana",
        extensions: [
            "p7s"
        ]
    },
    "application/pkcs8": {
        source: "iana",
        extensions: [
            "p8"
        ]
    },
    "application/pkix-attr-cert": {
        source: "iana",
        extensions: [
            "ac"
        ]
    },
    "application/pkix-cert": {
        source: "iana",
        extensions: [
            "cer"
        ]
    },
    "application/pkix-crl": {
        source: "iana",
        extensions: [
            "crl"
        ]
    },
    "application/pkix-pkipath": {
        source: "iana",
        extensions: [
            "pkipath"
        ]
    },
    "application/pkixcmp": {
        source: "iana",
        extensions: [
            "pki"
        ]
    },
    "application/pls+xml": {
        source: "iana",
        extensions: [
            "pls"
        ]
    },
    "application/postscript": {
        source: "iana",
        extensions: [
            "ai",
            "eps",
            "ps"
        ]
    },
    "application/provenance+xml": {
        source: "iana",
        extensions: [
            "provx"
        ]
    },
    "application/prs.cww": {
        source: "iana",
        extensions: [
            "cww"
        ]
    },
    "application/pskc+xml": {
        source: "iana",
        extensions: [
            "pskcxml"
        ]
    },
    "application/rdf+xml": {
        source: "iana",
        extensions: [
            "rdf",
            "owl"
        ]
    },
    "application/reginfo+xml": {
        source: "iana",
        extensions: [
            "rif"
        ]
    },
    "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: [
            "rnc"
        ]
    },
    "application/resource-lists+xml": {
        source: "iana",
        extensions: [
            "rl"
        ]
    },
    "application/resource-lists-diff+xml": {
        source: "iana",
        extensions: [
            "rld"
        ]
    },
    "application/rls-services+xml": {
        source: "iana",
        extensions: [
            "rs"
        ]
    },
    "application/route-apd+xml": {
        source: "iana",
        extensions: [
            "rapd"
        ]
    },
    "application/route-s-tsid+xml": {
        source: "iana",
        extensions: [
            "sls"
        ]
    },
    "application/route-usd+xml": {
        source: "iana",
        extensions: [
            "rusd"
        ]
    },
    "application/rpki-ghostbusters": {
        source: "iana",
        extensions: [
            "gbr"
        ]
    },
    "application/rpki-manifest": {
        source: "iana",
        extensions: [
            "mft"
        ]
    },
    "application/rpki-roa": {
        source: "iana",
        extensions: [
            "roa"
        ]
    },
    "application/rsd+xml": {
        source: "apache",
        extensions: [
            "rsd"
        ]
    },
    "application/rss+xml": {
        source: "apache",
        extensions: [
            "rss"
        ]
    },
    "application/rtf": {
        source: "iana",
        extensions: [
            "rtf"
        ]
    },
    "application/sbml+xml": {
        source: "iana",
        extensions: [
            "sbml"
        ]
    },
    "application/scvp-cv-request": {
        source: "iana",
        extensions: [
            "scq"
        ]
    },
    "application/scvp-cv-response": {
        source: "iana",
        extensions: [
            "scs"
        ]
    },
    "application/scvp-vp-request": {
        source: "iana",
        extensions: [
            "spq"
        ]
    },
    "application/scvp-vp-response": {
        source: "iana",
        extensions: [
            "spp"
        ]
    },
    "application/sdp": {
        source: "iana",
        extensions: [
            "sdp"
        ]
    },
    "application/senml+xml": {
        source: "iana",
        extensions: [
            "senmlx"
        ]
    },
    "application/sensml+xml": {
        source: "iana",
        extensions: [
            "sensmlx"
        ]
    },
    "application/set-payment-initiation": {
        source: "iana",
        extensions: [
            "setpay"
        ]
    },
    "application/set-registration-initiation": {
        source: "iana",
        extensions: [
            "setreg"
        ]
    },
    "application/shf+xml": {
        source: "iana",
        extensions: [
            "shf"
        ]
    },
    "application/sieve": {
        source: "iana",
        extensions: [
            "siv",
            "sieve"
        ]
    },
    "application/smil+xml": {
        source: "iana",
        extensions: [
            "smi",
            "smil"
        ]
    },
    "application/sparql-query": {
        source: "iana",
        extensions: [
            "rq"
        ]
    },
    "application/sparql-results+xml": {
        source: "iana",
        extensions: [
            "srx"
        ]
    },
    "application/srgs": {
        source: "iana",
        extensions: [
            "gram"
        ]
    },
    "application/srgs+xml": {
        source: "iana",
        extensions: [
            "grxml"
        ]
    },
    "application/sru+xml": {
        source: "iana",
        extensions: [
            "sru"
        ]
    },
    "application/ssdl+xml": {
        source: "apache",
        extensions: [
            "ssdl"
        ]
    },
    "application/ssml+xml": {
        source: "iana",
        extensions: [
            "ssml"
        ]
    },
    "application/swid+xml": {
        source: "iana",
        extensions: [
            "swidtag"
        ]
    },
    "application/tei+xml": {
        source: "iana",
        extensions: [
            "tei",
            "teicorpus"
        ]
    },
    "application/thraud+xml": {
        source: "iana",
        extensions: [
            "tfi"
        ]
    },
    "application/timestamped-data": {
        source: "iana",
        extensions: [
            "tsd"
        ]
    },
    "application/trig": {
        source: "iana",
        extensions: [
            "trig"
        ]
    },
    "application/ttml+xml": {
        source: "iana",
        extensions: [
            "ttml"
        ]
    },
    "application/urc-ressheet+xml": {
        source: "iana",
        extensions: [
            "rsheet"
        ]
    },
    "application/urc-targetdesc+xml": {
        source: "iana",
        extensions: [
            "td"
        ]
    },
    "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        extensions: [
            "1km"
        ]
    },
    "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: [
            "plb"
        ]
    },
    "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: [
            "psb"
        ]
    },
    "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: [
            "pvb"
        ]
    },
    "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: [
            "tcap"
        ]
    },
    "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: [
            "pwn"
        ]
    },
    "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: [
            "aso"
        ]
    },
    "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: [
            "imp"
        ]
    },
    "application/vnd.acucobol": {
        source: "iana",
        extensions: [
            "acu"
        ]
    },
    "application/vnd.acucorp": {
        source: "iana",
        extensions: [
            "atc",
            "acutc"
        ]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        extensions: [
            "air"
        ]
    },
    "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: [
            "fcdt"
        ]
    },
    "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: [
            "fxp",
            "fxpl"
        ]
    },
    "application/vnd.adobe.xdp+xml": {
        source: "iana",
        extensions: [
            "xdp"
        ]
    },
    "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: [
            "xfdf"
        ]
    },
    "application/vnd.age": {
        source: "iana",
        extensions: [
            "age"
        ]
    },
    "application/vnd.ahead.space": {
        source: "iana",
        extensions: [
            "ahead"
        ]
    },
    "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: [
            "azf"
        ]
    },
    "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: [
            "azs"
        ]
    },
    "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: [
            "azw"
        ]
    },
    "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: [
            "acc"
        ]
    },
    "application/vnd.amiga.ami": {
        source: "iana",
        extensions: [
            "ami"
        ]
    },
    "application/vnd.android.package-archive": {
        source: "apache",
        extensions: [
            "apk"
        ]
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: [
            "cii"
        ]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: [
            "fti"
        ]
    },
    "application/vnd.antix.game-component": {
        source: "iana",
        extensions: [
            "atx"
        ]
    },
    "application/vnd.apple.installer+xml": {
        source: "iana",
        extensions: [
            "mpkg"
        ]
    },
    "application/vnd.apple.keynote": {
        source: "iana",
        extensions: [
            "key"
        ]
    },
    "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: [
            "m3u8"
        ]
    },
    "application/vnd.apple.numbers": {
        source: "iana",
        extensions: [
            "numbers"
        ]
    },
    "application/vnd.apple.pages": {
        source: "iana",
        extensions: [
            "pages"
        ]
    },
    "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: [
            "swi"
        ]
    },
    "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: [
            "iota"
        ]
    },
    "application/vnd.audiograph": {
        source: "iana",
        extensions: [
            "aep"
        ]
    },
    "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        extensions: [
            "bmml"
        ]
    },
    "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: [
            "mpm"
        ]
    },
    "application/vnd.bmi": {
        source: "iana",
        extensions: [
            "bmi"
        ]
    },
    "application/vnd.businessobjects": {
        source: "iana",
        extensions: [
            "rep"
        ]
    },
    "application/vnd.chemdraw+xml": {
        source: "iana",
        extensions: [
            "cdxml"
        ]
    },
    "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: [
            "mmd"
        ]
    },
    "application/vnd.cinderella": {
        source: "iana",
        extensions: [
            "cdy"
        ]
    },
    "application/vnd.citationstyles.style+xml": {
        source: "iana",
        extensions: [
            "csl"
        ]
    },
    "application/vnd.claymore": {
        source: "iana",
        extensions: [
            "cla"
        ]
    },
    "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: [
            "rp9"
        ]
    },
    "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: [
            "c4g",
            "c4d",
            "c4f",
            "c4p",
            "c4u"
        ]
    },
    "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: [
            "c11amc"
        ]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: [
            "c11amz"
        ]
    },
    "application/vnd.commonspace": {
        source: "iana",
        extensions: [
            "csp"
        ]
    },
    "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: [
            "cdbcmsg"
        ]
    },
    "application/vnd.cosmocaller": {
        source: "iana",
        extensions: [
            "cmc"
        ]
    },
    "application/vnd.crick.clicker": {
        source: "iana",
        extensions: [
            "clkx"
        ]
    },
    "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: [
            "clkk"
        ]
    },
    "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: [
            "clkp"
        ]
    },
    "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: [
            "clkt"
        ]
    },
    "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: [
            "clkw"
        ]
    },
    "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        extensions: [
            "wbs"
        ]
    },
    "application/vnd.ctc-posml": {
        source: "iana",
        extensions: [
            "pml"
        ]
    },
    "application/vnd.cups-ppd": {
        source: "iana",
        extensions: [
            "ppd"
        ]
    },
    "application/vnd.curl.car": {
        source: "apache",
        extensions: [
            "car"
        ]
    },
    "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: [
            "pcurl"
        ]
    },
    "application/vnd.dart": {
        source: "iana",
        extensions: [
            "dart"
        ]
    },
    "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: [
            "rdz"
        ]
    },
    "application/vnd.dbf": {
        source: "iana",
        extensions: [
            "dbf"
        ]
    },
    "application/vnd.dece.data": {
        source: "iana",
        extensions: [
            "uvf",
            "uvvf",
            "uvd",
            "uvvd"
        ]
    },
    "application/vnd.dece.ttml+xml": {
        source: "iana",
        extensions: [
            "uvt",
            "uvvt"
        ]
    },
    "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: [
            "uvx",
            "uvvx"
        ]
    },
    "application/vnd.dece.zip": {
        source: "iana",
        extensions: [
            "uvz",
            "uvvz"
        ]
    },
    "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: [
            "fe_launch"
        ]
    },
    "application/vnd.dna": {
        source: "iana",
        extensions: [
            "dna"
        ]
    },
    "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: [
            "mlp"
        ]
    },
    "application/vnd.dpgraph": {
        source: "iana",
        extensions: [
            "dpg"
        ]
    },
    "application/vnd.dreamfactory": {
        source: "iana",
        extensions: [
            "dfac"
        ]
    },
    "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: [
            "kpxx"
        ]
    },
    "application/vnd.dvb.ait": {
        source: "iana",
        extensions: [
            "ait"
        ]
    },
    "application/vnd.dvb.service": {
        source: "iana",
        extensions: [
            "svc"
        ]
    },
    "application/vnd.dynageo": {
        source: "iana",
        extensions: [
            "geo"
        ]
    },
    "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: [
            "mag"
        ]
    },
    "application/vnd.enliven": {
        source: "iana",
        extensions: [
            "nml"
        ]
    },
    "application/vnd.epson.esf": {
        source: "iana",
        extensions: [
            "esf"
        ]
    },
    "application/vnd.epson.msf": {
        source: "iana",
        extensions: [
            "msf"
        ]
    },
    "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: [
            "qam"
        ]
    },
    "application/vnd.epson.salt": {
        source: "iana",
        extensions: [
            "slt"
        ]
    },
    "application/vnd.epson.ssf": {
        source: "iana",
        extensions: [
            "ssf"
        ]
    },
    "application/vnd.eszigno3+xml": {
        source: "iana",
        extensions: [
            "es3",
            "et3"
        ]
    },
    "application/vnd.ezpix-album": {
        source: "iana",
        extensions: [
            "ez2"
        ]
    },
    "application/vnd.ezpix-package": {
        source: "iana",
        extensions: [
            "ez3"
        ]
    },
    "application/vnd.fdf": {
        source: "iana",
        extensions: [
            "fdf"
        ]
    },
    "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: [
            "mseed"
        ]
    },
    "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: [
            "seed",
            "dataless"
        ]
    },
    "application/vnd.flographit": {
        source: "iana",
        extensions: [
            "gph"
        ]
    },
    "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: [
            "ftc"
        ]
    },
    "application/vnd.framemaker": {
        source: "iana",
        extensions: [
            "fm",
            "frame",
            "maker",
            "book"
        ]
    },
    "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: [
            "fnc"
        ]
    },
    "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: [
            "ltf"
        ]
    },
    "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: [
            "fsc"
        ]
    },
    "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: [
            "oas"
        ]
    },
    "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: [
            "oa2"
        ]
    },
    "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: [
            "oa3"
        ]
    },
    "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: [
            "fg5"
        ]
    },
    "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: [
            "bh2"
        ]
    },
    "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: [
            "ddd"
        ]
    },
    "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: [
            "xdw"
        ]
    },
    "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: [
            "xbd"
        ]
    },
    "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: [
            "fzs"
        ]
    },
    "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: [
            "txd"
        ]
    },
    "application/vnd.geogebra.file": {
        source: "iana",
        extensions: [
            "ggb"
        ]
    },
    "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: [
            "ggt"
        ]
    },
    "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: [
            "gex",
            "gre"
        ]
    },
    "application/vnd.geonext": {
        source: "iana",
        extensions: [
            "gxt"
        ]
    },
    "application/vnd.geoplan": {
        source: "iana",
        extensions: [
            "g2w"
        ]
    },
    "application/vnd.geospace": {
        source: "iana",
        extensions: [
            "g3w"
        ]
    },
    "application/vnd.gmx": {
        source: "iana",
        extensions: [
            "gmx"
        ]
    },
    "application/vnd.google-earth.kml+xml": {
        source: "iana",
        extensions: [
            "kml"
        ]
    },
    "application/vnd.google-earth.kmz": {
        source: "iana",
        extensions: [
            "kmz"
        ]
    },
    "application/vnd.grafeq": {
        source: "iana",
        extensions: [
            "gqf",
            "gqs"
        ]
    },
    "application/vnd.groove-account": {
        source: "iana",
        extensions: [
            "gac"
        ]
    },
    "application/vnd.groove-help": {
        source: "iana",
        extensions: [
            "ghf"
        ]
    },
    "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: [
            "gim"
        ]
    },
    "application/vnd.groove-injector": {
        source: "iana",
        extensions: [
            "grv"
        ]
    },
    "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: [
            "gtm"
        ]
    },
    "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: [
            "tpl"
        ]
    },
    "application/vnd.groove-vcard": {
        source: "iana",
        extensions: [
            "vcg"
        ]
    },
    "application/vnd.hal+xml": {
        source: "iana",
        extensions: [
            "hal"
        ]
    },
    "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        extensions: [
            "zmm"
        ]
    },
    "application/vnd.hbci": {
        source: "iana",
        extensions: [
            "hbci"
        ]
    },
    "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: [
            "les"
        ]
    },
    "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: [
            "hpgl"
        ]
    },
    "application/vnd.hp-hpid": {
        source: "iana",
        extensions: [
            "hpid"
        ]
    },
    "application/vnd.hp-hps": {
        source: "iana",
        extensions: [
            "hps"
        ]
    },
    "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: [
            "jlt"
        ]
    },
    "application/vnd.hp-pcl": {
        source: "iana",
        extensions: [
            "pcl"
        ]
    },
    "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: [
            "pclxl"
        ]
    },
    "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: [
            "sfd-hdstx"
        ]
    },
    "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: [
            "mpy"
        ]
    },
    "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: [
            "afp",
            "listafp",
            "list3820"
        ]
    },
    "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: [
            "irm"
        ]
    },
    "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: [
            "sc"
        ]
    },
    "application/vnd.iccprofile": {
        source: "iana",
        extensions: [
            "icc",
            "icm"
        ]
    },
    "application/vnd.igloader": {
        source: "iana",
        extensions: [
            "igl"
        ]
    },
    "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: [
            "ivp"
        ]
    },
    "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: [
            "ivu"
        ]
    },
    "application/vnd.insors.igm": {
        source: "iana",
        extensions: [
            "igm"
        ]
    },
    "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: [
            "xpw",
            "xpx"
        ]
    },
    "application/vnd.intergeo": {
        source: "iana",
        extensions: [
            "i2g"
        ]
    },
    "application/vnd.intu.qbo": {
        source: "iana",
        extensions: [
            "qbo"
        ]
    },
    "application/vnd.intu.qfx": {
        source: "iana",
        extensions: [
            "qfx"
        ]
    },
    "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: [
            "rcprofile"
        ]
    },
    "application/vnd.irepository.package+xml": {
        source: "iana",
        extensions: [
            "irp"
        ]
    },
    "application/vnd.is-xpr": {
        source: "iana",
        extensions: [
            "xpr"
        ]
    },
    "application/vnd.isac.fcs": {
        source: "iana",
        extensions: [
            "fcs"
        ]
    },
    "application/vnd.jam": {
        source: "iana",
        extensions: [
            "jam"
        ]
    },
    "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: [
            "rms"
        ]
    },
    "application/vnd.jisp": {
        source: "iana",
        extensions: [
            "jisp"
        ]
    },
    "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: [
            "joda"
        ]
    },
    "application/vnd.kahootz": {
        source: "iana",
        extensions: [
            "ktz",
            "ktr"
        ]
    },
    "application/vnd.kde.karbon": {
        source: "iana",
        extensions: [
            "karbon"
        ]
    },
    "application/vnd.kde.kchart": {
        source: "iana",
        extensions: [
            "chrt"
        ]
    },
    "application/vnd.kde.kformula": {
        source: "iana",
        extensions: [
            "kfo"
        ]
    },
    "application/vnd.kde.kivio": {
        source: "iana",
        extensions: [
            "flw"
        ]
    },
    "application/vnd.kde.kontour": {
        source: "iana",
        extensions: [
            "kon"
        ]
    },
    "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: [
            "kpr",
            "kpt"
        ]
    },
    "application/vnd.kde.kspread": {
        source: "iana",
        extensions: [
            "ksp"
        ]
    },
    "application/vnd.kde.kword": {
        source: "iana",
        extensions: [
            "kwd",
            "kwt"
        ]
    },
    "application/vnd.kenameaapp": {
        source: "iana",
        extensions: [
            "htke"
        ]
    },
    "application/vnd.kidspiration": {
        source: "iana",
        extensions: [
            "kia"
        ]
    },
    "application/vnd.kinar": {
        source: "iana",
        extensions: [
            "kne",
            "knp"
        ]
    },
    "application/vnd.koan": {
        source: "iana",
        extensions: [
            "skp",
            "skd",
            "skt",
            "skm"
        ]
    },
    "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: [
            "sse"
        ]
    },
    "application/vnd.las.las+xml": {
        source: "iana",
        extensions: [
            "lasxml"
        ]
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: [
            "lbd"
        ]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        extensions: [
            "lbe"
        ]
    },
    "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: [
            "123"
        ]
    },
    "application/vnd.lotus-approach": {
        source: "iana",
        extensions: [
            "apr"
        ]
    },
    "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: [
            "pre"
        ]
    },
    "application/vnd.lotus-notes": {
        source: "iana",
        extensions: [
            "nsf"
        ]
    },
    "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: [
            "org"
        ]
    },
    "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: [
            "scm"
        ]
    },
    "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: [
            "lwp"
        ]
    },
    "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: [
            "portpkg"
        ]
    },
    "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: [
            "mvt"
        ]
    },
    "application/vnd.mcd": {
        source: "iana",
        extensions: [
            "mcd"
        ]
    },
    "application/vnd.medcalcdata": {
        source: "iana",
        extensions: [
            "mc1"
        ]
    },
    "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: [
            "cdkey"
        ]
    },
    "application/vnd.mfer": {
        source: "iana",
        extensions: [
            "mwf"
        ]
    },
    "application/vnd.mfmp": {
        source: "iana",
        extensions: [
            "mfm"
        ]
    },
    "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: [
            "flo"
        ]
    },
    "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: [
            "igx"
        ]
    },
    "application/vnd.mif": {
        source: "iana",
        extensions: [
            "mif"
        ]
    },
    "application/vnd.mobius.daf": {
        source: "iana",
        extensions: [
            "daf"
        ]
    },
    "application/vnd.mobius.dis": {
        source: "iana",
        extensions: [
            "dis"
        ]
    },
    "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: [
            "mbk"
        ]
    },
    "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: [
            "mqy"
        ]
    },
    "application/vnd.mobius.msl": {
        source: "iana",
        extensions: [
            "msl"
        ]
    },
    "application/vnd.mobius.plc": {
        source: "iana",
        extensions: [
            "plc"
        ]
    },
    "application/vnd.mobius.txf": {
        source: "iana",
        extensions: [
            "txf"
        ]
    },
    "application/vnd.mophun.application": {
        source: "iana",
        extensions: [
            "mpn"
        ]
    },
    "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: [
            "mpc"
        ]
    },
    "application/vnd.mozilla.xul+xml": {
        source: "iana",
        extensions: [
            "xul"
        ]
    },
    "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: [
            "cil"
        ]
    },
    "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: [
            "cab"
        ]
    },
    "application/vnd.ms-excel": {
        source: "iana",
        extensions: [
            "xls",
            "xlm",
            "xla",
            "xlc",
            "xlt",
            "xlw"
        ]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: [
            "xlam"
        ]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: [
            "xlsb"
        ]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: [
            "xlsm"
        ]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: [
            "xltm"
        ]
    },
    "application/vnd.ms-fontobject": {
        source: "iana",
        extensions: [
            "eot"
        ]
    },
    "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: [
            "chm"
        ]
    },
    "application/vnd.ms-ims": {
        source: "iana",
        extensions: [
            "ims"
        ]
    },
    "application/vnd.ms-lrm": {
        source: "iana",
        extensions: [
            "lrm"
        ]
    },
    "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: [
            "thmx"
        ]
    },
    "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: [
            "cat"
        ]
    },
    "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: [
            "stl"
        ]
    },
    "application/vnd.ms-powerpoint": {
        source: "iana",
        extensions: [
            "ppt",
            "pps",
            "pot"
        ]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: [
            "ppam"
        ]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: [
            "pptm"
        ]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: [
            "sldm"
        ]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: [
            "ppsm"
        ]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: [
            "potm"
        ]
    },
    "application/vnd.ms-project": {
        source: "iana",
        extensions: [
            "mpp",
            "mpt"
        ]
    },
    "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: [
            "docm"
        ]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: [
            "dotm"
        ]
    },
    "application/vnd.ms-works": {
        source: "iana",
        extensions: [
            "wps",
            "wks",
            "wcm",
            "wdb"
        ]
    },
    "application/vnd.ms-wpl": {
        source: "iana",
        extensions: [
            "wpl"
        ]
    },
    "application/vnd.ms-xpsdocument": {
        source: "iana",
        extensions: [
            "xps"
        ]
    },
    "application/vnd.mseq": {
        source: "iana",
        extensions: [
            "mseq"
        ]
    },
    "application/vnd.musician": {
        source: "iana",
        extensions: [
            "mus"
        ]
    },
    "application/vnd.muvee.style": {
        source: "iana",
        extensions: [
            "msty"
        ]
    },
    "application/vnd.mynfc": {
        source: "iana",
        extensions: [
            "taglet"
        ]
    },
    "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: [
            "nlu"
        ]
    },
    "application/vnd.nitf": {
        source: "iana",
        extensions: [
            "ntf",
            "nitf"
        ]
    },
    "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: [
            "nnd"
        ]
    },
    "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: [
            "nns"
        ]
    },
    "application/vnd.noblenet-web": {
        source: "iana",
        extensions: [
            "nnw"
        ]
    },
    "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        extensions: [
            "ac"
        ]
    },
    "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: [
            "ngdat"
        ]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: [
            "n-gage"
        ]
    },
    "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: [
            "rpst"
        ]
    },
    "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: [
            "rpss"
        ]
    },
    "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: [
            "edm"
        ]
    },
    "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: [
            "edx"
        ]
    },
    "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: [
            "ext"
        ]
    },
    "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: [
            "odc"
        ]
    },
    "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: [
            "otc"
        ]
    },
    "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: [
            "odb"
        ]
    },
    "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: [
            "odf"
        ]
    },
    "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: [
            "odft"
        ]
    },
    "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        extensions: [
            "odg"
        ]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: [
            "otg"
        ]
    },
    "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: [
            "odi"
        ]
    },
    "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: [
            "oti"
        ]
    },
    "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        extensions: [
            "odp"
        ]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: [
            "otp"
        ]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        extensions: [
            "ods"
        ]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: [
            "ots"
        ]
    },
    "application/vnd.oasis.opendocument.text": {
        source: "iana",
        extensions: [
            "odt"
        ]
    },
    "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: [
            "odm"
        ]
    },
    "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: [
            "ott"
        ]
    },
    "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: [
            "oth"
        ]
    },
    "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: [
            "xo"
        ]
    },
    "application/vnd.oma.dd2+xml": {
        source: "iana",
        extensions: [
            "dd2"
        ]
    },
    "application/vnd.openblox.game+xml": {
        source: "iana",
        extensions: [
            "obgx"
        ]
    },
    "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: [
            "oxt"
        ]
    },
    "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        extensions: [
            "osm"
        ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        extensions: [
            "pptx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: [
            "sldx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: [
            "ppsx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: [
            "potx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        extensions: [
            "xlsx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: [
            "xltx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        extensions: [
            "docx"
        ]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: [
            "dotx"
        ]
    },
    "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: [
            "mgp"
        ]
    },
    "application/vnd.osgi.dp": {
        source: "iana",
        extensions: [
            "dp"
        ]
    },
    "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: [
            "esa"
        ]
    },
    "application/vnd.palm": {
        source: "iana",
        extensions: [
            "pdb",
            "pqa",
            "oprc"
        ]
    },
    "application/vnd.pawaafile": {
        source: "iana",
        extensions: [
            "paw"
        ]
    },
    "application/vnd.pg.format": {
        source: "iana",
        extensions: [
            "str"
        ]
    },
    "application/vnd.pg.osasli": {
        source: "iana",
        extensions: [
            "ei6"
        ]
    },
    "application/vnd.picsel": {
        source: "iana",
        extensions: [
            "efif"
        ]
    },
    "application/vnd.pmi.widget": {
        source: "iana",
        extensions: [
            "wg"
        ]
    },
    "application/vnd.pocketlearn": {
        source: "iana",
        extensions: [
            "plf"
        ]
    },
    "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: [
            "pbd"
        ]
    },
    "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: [
            "box"
        ]
    },
    "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: [
            "mgz"
        ]
    },
    "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: [
            "qps"
        ]
    },
    "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: [
            "ptid"
        ]
    },
    "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: [
            "qxd",
            "qxt",
            "qwd",
            "qwt",
            "qxl",
            "qxb"
        ]
    },
    "application/vnd.rar": {
        source: "iana",
        extensions: [
            "rar"
        ]
    },
    "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: [
            "bed"
        ]
    },
    "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: [
            "mxl"
        ]
    },
    "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        extensions: [
            "musicxml"
        ]
    },
    "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: [
            "cryptonote"
        ]
    },
    "application/vnd.rim.cod": {
        source: "apache",
        extensions: [
            "cod"
        ]
    },
    "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: [
            "rm"
        ]
    },
    "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: [
            "rmvb"
        ]
    },
    "application/vnd.route66.link66+xml": {
        source: "iana",
        extensions: [
            "link66"
        ]
    },
    "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: [
            "st"
        ]
    },
    "application/vnd.seemail": {
        source: "iana",
        extensions: [
            "see"
        ]
    },
    "application/vnd.sema": {
        source: "iana",
        extensions: [
            "sema"
        ]
    },
    "application/vnd.semd": {
        source: "iana",
        extensions: [
            "semd"
        ]
    },
    "application/vnd.semf": {
        source: "iana",
        extensions: [
            "semf"
        ]
    },
    "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: [
            "ifm"
        ]
    },
    "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: [
            "itp"
        ]
    },
    "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: [
            "iif"
        ]
    },
    "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: [
            "ipk"
        ]
    },
    "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: [
            "twd",
            "twds"
        ]
    },
    "application/vnd.smaf": {
        source: "iana",
        extensions: [
            "mmf"
        ]
    },
    "application/vnd.smart.teacher": {
        source: "iana",
        extensions: [
            "teacher"
        ]
    },
    "application/vnd.software602.filler.form+xml": {
        source: "iana",
        extensions: [
            "fo"
        ]
    },
    "application/vnd.solent.sdkm+xml": {
        source: "iana",
        extensions: [
            "sdkm",
            "sdkd"
        ]
    },
    "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: [
            "dxp"
        ]
    },
    "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: [
            "sfs"
        ]
    },
    "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: [
            "sdc"
        ]
    },
    "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: [
            "sda"
        ]
    },
    "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: [
            "sdd"
        ]
    },
    "application/vnd.stardivision.math": {
        source: "apache",
        extensions: [
            "smf"
        ]
    },
    "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: [
            "sdw",
            "vor"
        ]
    },
    "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: [
            "sgl"
        ]
    },
    "application/vnd.stepmania.package": {
        source: "iana",
        extensions: [
            "smzip"
        ]
    },
    "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: [
            "sm"
        ]
    },
    "application/vnd.sun.wadl+xml": {
        source: "iana",
        extensions: [
            "wadl"
        ]
    },
    "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: [
            "sxc"
        ]
    },
    "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: [
            "stc"
        ]
    },
    "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: [
            "sxd"
        ]
    },
    "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: [
            "std"
        ]
    },
    "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: [
            "sxi"
        ]
    },
    "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: [
            "sti"
        ]
    },
    "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: [
            "sxm"
        ]
    },
    "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: [
            "sxw"
        ]
    },
    "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: [
            "sxg"
        ]
    },
    "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: [
            "stw"
        ]
    },
    "application/vnd.sus-calendar": {
        source: "iana",
        extensions: [
            "sus",
            "susp"
        ]
    },
    "application/vnd.svd": {
        source: "iana",
        extensions: [
            "svd"
        ]
    },
    "application/vnd.symbian.install": {
        source: "apache",
        extensions: [
            "sis",
            "sisx"
        ]
    },
    "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "xsm"
        ]
    },
    "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "bdm"
        ]
    },
    "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "xdm"
        ]
    },
    "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "ddf"
        ]
    },
    "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: [
            "tao"
        ]
    },
    "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: [
            "pcap",
            "cap",
            "dmp"
        ]
    },
    "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: [
            "tmo"
        ]
    },
    "application/vnd.trid.tpt": {
        source: "iana",
        extensions: [
            "tpt"
        ]
    },
    "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: [
            "mxs"
        ]
    },
    "application/vnd.trueapp": {
        source: "iana",
        extensions: [
            "tra"
        ]
    },
    "application/vnd.ufdl": {
        source: "iana",
        extensions: [
            "ufd",
            "ufdl"
        ]
    },
    "application/vnd.uiq.theme": {
        source: "iana",
        extensions: [
            "utz"
        ]
    },
    "application/vnd.umajin": {
        source: "iana",
        extensions: [
            "umj"
        ]
    },
    "application/vnd.unity": {
        source: "iana",
        extensions: [
            "unityweb"
        ]
    },
    "application/vnd.uoml+xml": {
        source: "iana",
        extensions: [
            "uoml"
        ]
    },
    "application/vnd.vcx": {
        source: "iana",
        extensions: [
            "vcx"
        ]
    },
    "application/vnd.visio": {
        source: "iana",
        extensions: [
            "vsd",
            "vst",
            "vss",
            "vsw"
        ]
    },
    "application/vnd.visionary": {
        source: "iana",
        extensions: [
            "vis"
        ]
    },
    "application/vnd.vsf": {
        source: "iana",
        extensions: [
            "vsf"
        ]
    },
    "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "wbxml"
        ]
    },
    "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: [
            "wmlc"
        ]
    },
    "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: [
            "wmlsc"
        ]
    },
    "application/vnd.webturbo": {
        source: "iana",
        extensions: [
            "wtb"
        ]
    },
    "application/vnd.wolfram.player": {
        source: "iana",
        extensions: [
            "nbp"
        ]
    },
    "application/vnd.wordperfect": {
        source: "iana",
        extensions: [
            "wpd"
        ]
    },
    "application/vnd.wqd": {
        source: "iana",
        extensions: [
            "wqd"
        ]
    },
    "application/vnd.wt.stf": {
        source: "iana",
        extensions: [
            "stf"
        ]
    },
    "application/vnd.xara": {
        source: "iana",
        extensions: [
            "xar"
        ]
    },
    "application/vnd.xfdl": {
        source: "iana",
        extensions: [
            "xfdl"
        ]
    },
    "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: [
            "hvd"
        ]
    },
    "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: [
            "hvs"
        ]
    },
    "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: [
            "hvp"
        ]
    },
    "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: [
            "osf"
        ]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        extensions: [
            "osfpvg"
        ]
    },
    "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: [
            "saf"
        ]
    },
    "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: [
            "spf"
        ]
    },
    "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: [
            "cmp"
        ]
    },
    "application/vnd.zul": {
        source: "iana",
        extensions: [
            "zir",
            "zirz"
        ]
    },
    "application/vnd.zzazz.deck+xml": {
        source: "iana",
        extensions: [
            "zaz"
        ]
    },
    "application/voicexml+xml": {
        source: "iana",
        extensions: [
            "vxml"
        ]
    },
    "application/wasm": {
        source: "iana",
        extensions: [
            "wasm"
        ]
    },
    "application/watcherinfo+xml": {
        source: "iana",
        extensions: [
            "wif"
        ]
    },
    "application/widget": {
        source: "iana",
        extensions: [
            "wgt"
        ]
    },
    "application/winhlp": {
        source: "apache",
        extensions: [
            "hlp"
        ]
    },
    "application/wsdl+xml": {
        source: "iana",
        extensions: [
            "wsdl"
        ]
    },
    "application/wspolicy+xml": {
        source: "iana",
        extensions: [
            "wspolicy"
        ]
    },
    "application/x-7z-compressed": {
        source: "apache",
        extensions: [
            "7z"
        ]
    },
    "application/x-abiword": {
        source: "apache",
        extensions: [
            "abw"
        ]
    },
    "application/x-ace-compressed": {
        source: "apache",
        extensions: [
            "ace"
        ]
    },
    "application/x-apple-diskimage": {
        source: "apache",
        extensions: [
            "dmg"
        ]
    },
    "application/x-authorware-bin": {
        source: "apache",
        extensions: [
            "aab",
            "x32",
            "u32",
            "vox"
        ]
    },
    "application/x-authorware-map": {
        source: "apache",
        extensions: [
            "aam"
        ]
    },
    "application/x-authorware-seg": {
        source: "apache",
        extensions: [
            "aas"
        ]
    },
    "application/x-bcpio": {
        source: "apache",
        extensions: [
            "bcpio"
        ]
    },
    "application/x-bittorrent": {
        source: "apache",
        extensions: [
            "torrent"
        ]
    },
    "application/x-blorb": {
        source: "apache",
        extensions: [
            "blb",
            "blorb"
        ]
    },
    "application/x-bzip": {
        source: "apache",
        extensions: [
            "bz"
        ]
    },
    "application/x-bzip2": {
        source: "apache",
        extensions: [
            "bz2",
            "boz"
        ]
    },
    "application/x-cbr": {
        source: "apache",
        extensions: [
            "cbr",
            "cba",
            "cbt",
            "cbz",
            "cb7"
        ]
    },
    "application/x-cdlink": {
        source: "apache",
        extensions: [
            "vcd"
        ]
    },
    "application/x-cfs-compressed": {
        source: "apache",
        extensions: [
            "cfs"
        ]
    },
    "application/x-chat": {
        source: "apache",
        extensions: [
            "chat"
        ]
    },
    "application/x-chess-pgn": {
        source: "apache",
        extensions: [
            "pgn"
        ]
    },
    "application/x-cocoa": {
        source: "nginx",
        extensions: [
            "cco"
        ]
    },
    "application/x-conference": {
        source: "apache",
        extensions: [
            "nsc"
        ]
    },
    "application/x-cpio": {
        source: "apache",
        extensions: [
            "cpio"
        ]
    },
    "application/x-csh": {
        source: "apache",
        extensions: [
            "csh"
        ]
    },
    "application/x-debian-package": {
        source: "apache",
        extensions: [
            "deb",
            "udeb"
        ]
    },
    "application/x-dgc-compressed": {
        source: "apache",
        extensions: [
            "dgc"
        ]
    },
    "application/x-director": {
        source: "apache",
        extensions: [
            "dir",
            "dcr",
            "dxr",
            "cst",
            "cct",
            "cxt",
            "w3d",
            "fgd",
            "swa"
        ]
    },
    "application/x-doom": {
        source: "apache",
        extensions: [
            "wad"
        ]
    },
    "application/x-dtbncx+xml": {
        source: "apache",
        extensions: [
            "ncx"
        ]
    },
    "application/x-dtbook+xml": {
        source: "apache",
        extensions: [
            "dtb"
        ]
    },
    "application/x-dtbresource+xml": {
        source: "apache",
        extensions: [
            "res"
        ]
    },
    "application/x-dvi": {
        source: "apache",
        extensions: [
            "dvi"
        ]
    },
    "application/x-envoy": {
        source: "apache",
        extensions: [
            "evy"
        ]
    },
    "application/x-eva": {
        source: "apache",
        extensions: [
            "eva"
        ]
    },
    "application/x-font-bdf": {
        source: "apache",
        extensions: [
            "bdf"
        ]
    },
    "application/x-font-ghostscript": {
        source: "apache",
        extensions: [
            "gsf"
        ]
    },
    "application/x-font-linux-psf": {
        source: "apache",
        extensions: [
            "psf"
        ]
    },
    "application/x-font-pcf": {
        source: "apache",
        extensions: [
            "pcf"
        ]
    },
    "application/x-font-snf": {
        source: "apache",
        extensions: [
            "snf"
        ]
    },
    "application/x-font-type1": {
        source: "apache",
        extensions: [
            "pfa",
            "pfb",
            "pfm",
            "afm"
        ]
    },
    "application/x-freearc": {
        source: "apache",
        extensions: [
            "arc"
        ]
    },
    "application/x-futuresplash": {
        source: "apache",
        extensions: [
            "spl"
        ]
    },
    "application/x-gca-compressed": {
        source: "apache",
        extensions: [
            "gca"
        ]
    },
    "application/x-glulx": {
        source: "apache",
        extensions: [
            "ulx"
        ]
    },
    "application/x-gnumeric": {
        source: "apache",
        extensions: [
            "gnumeric"
        ]
    },
    "application/x-gramps-xml": {
        source: "apache",
        extensions: [
            "gramps"
        ]
    },
    "application/x-gtar": {
        source: "apache",
        extensions: [
            "gtar"
        ]
    },
    "application/x-hdf": {
        source: "apache",
        extensions: [
            "hdf"
        ]
    },
    "application/x-install-instructions": {
        source: "apache",
        extensions: [
            "install"
        ]
    },
    "application/x-iso9660-image": {
        source: "apache",
        extensions: [
            "iso"
        ]
    },
    "application/x-java-archive-diff": {
        source: "nginx",
        extensions: [
            "jardiff"
        ]
    },
    "application/x-java-jnlp-file": {
        source: "apache",
        extensions: [
            "jnlp"
        ]
    },
    "application/x-latex": {
        source: "apache",
        extensions: [
            "latex"
        ]
    },
    "application/x-lzh-compressed": {
        source: "apache",
        extensions: [
            "lzh",
            "lha"
        ]
    },
    "application/x-makeself": {
        source: "nginx",
        extensions: [
            "run"
        ]
    },
    "application/x-mie": {
        source: "apache",
        extensions: [
            "mie"
        ]
    },
    "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: [
            "prc",
            "mobi"
        ]
    },
    "application/x-ms-application": {
        source: "apache",
        extensions: [
            "application"
        ]
    },
    "application/x-ms-shortcut": {
        source: "apache",
        extensions: [
            "lnk"
        ]
    },
    "application/x-ms-wmd": {
        source: "apache",
        extensions: [
            "wmd"
        ]
    },
    "application/x-ms-wmz": {
        source: "apache",
        extensions: [
            "wmz"
        ]
    },
    "application/x-ms-xbap": {
        source: "apache",
        extensions: [
            "xbap"
        ]
    },
    "application/x-msaccess": {
        source: "apache",
        extensions: [
            "mdb"
        ]
    },
    "application/x-msbinder": {
        source: "apache",
        extensions: [
            "obd"
        ]
    },
    "application/x-mscardfile": {
        source: "apache",
        extensions: [
            "crd"
        ]
    },
    "application/x-msclip": {
        source: "apache",
        extensions: [
            "clp"
        ]
    },
    "application/x-msdownload": {
        source: "apache",
        extensions: [
            "exe",
            "dll",
            "com",
            "bat",
            "msi"
        ]
    },
    "application/x-msmediaview": {
        source: "apache",
        extensions: [
            "mvb",
            "m13",
            "m14"
        ]
    },
    "application/x-msmetafile": {
        source: "apache",
        extensions: [
            "wmf",
            "wmz",
            "emf",
            "emz"
        ]
    },
    "application/x-msmoney": {
        source: "apache",
        extensions: [
            "mny"
        ]
    },
    "application/x-mspublisher": {
        source: "apache",
        extensions: [
            "pub"
        ]
    },
    "application/x-msschedule": {
        source: "apache",
        extensions: [
            "scd"
        ]
    },
    "application/x-msterminal": {
        source: "apache",
        extensions: [
            "trm"
        ]
    },
    "application/x-mswrite": {
        source: "apache",
        extensions: [
            "wri"
        ]
    },
    "application/x-netcdf": {
        source: "apache",
        extensions: [
            "nc",
            "cdf"
        ]
    },
    "application/x-nzb": {
        source: "apache",
        extensions: [
            "nzb"
        ]
    },
    "application/x-perl": {
        source: "nginx",
        extensions: [
            "pl",
            "pm"
        ]
    },
    "application/x-pilot": {
        source: "nginx",
        extensions: [
            "prc",
            "pdb"
        ]
    },
    "application/x-pkcs12": {
        source: "apache",
        extensions: [
            "p12",
            "pfx"
        ]
    },
    "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: [
            "p7b",
            "spc"
        ]
    },
    "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: [
            "p7r"
        ]
    },
    "application/x-rar-compressed": {
        source: "apache",
        extensions: [
            "rar"
        ]
    },
    "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: [
            "rpm"
        ]
    },
    "application/x-research-info-systems": {
        source: "apache",
        extensions: [
            "ris"
        ]
    },
    "application/x-sea": {
        source: "nginx",
        extensions: [
            "sea"
        ]
    },
    "application/x-sh": {
        source: "apache",
        extensions: [
            "sh"
        ]
    },
    "application/x-shar": {
        source: "apache",
        extensions: [
            "shar"
        ]
    },
    "application/x-shockwave-flash": {
        source: "apache",
        extensions: [
            "swf"
        ]
    },
    "application/x-silverlight-app": {
        source: "apache",
        extensions: [
            "xap"
        ]
    },
    "application/x-sql": {
        source: "apache",
        extensions: [
            "sql"
        ]
    },
    "application/x-stuffit": {
        source: "apache",
        extensions: [
            "sit"
        ]
    },
    "application/x-stuffitx": {
        source: "apache",
        extensions: [
            "sitx"
        ]
    },
    "application/x-subrip": {
        source: "apache",
        extensions: [
            "srt"
        ]
    },
    "application/x-sv4cpio": {
        source: "apache",
        extensions: [
            "sv4cpio"
        ]
    },
    "application/x-sv4crc": {
        source: "apache",
        extensions: [
            "sv4crc"
        ]
    },
    "application/x-t3vm-image": {
        source: "apache",
        extensions: [
            "t3"
        ]
    },
    "application/x-tads": {
        source: "apache",
        extensions: [
            "gam"
        ]
    },
    "application/x-tar": {
        source: "apache",
        extensions: [
            "tar"
        ]
    },
    "application/x-tcl": {
        source: "apache",
        extensions: [
            "tcl",
            "tk"
        ]
    },
    "application/x-tex": {
        source: "apache",
        extensions: [
            "tex"
        ]
    },
    "application/x-tex-tfm": {
        source: "apache",
        extensions: [
            "tfm"
        ]
    },
    "application/x-texinfo": {
        source: "apache",
        extensions: [
            "texinfo",
            "texi"
        ]
    },
    "application/x-tgif": {
        source: "apache",
        extensions: [
            "obj"
        ]
    },
    "application/x-ustar": {
        source: "apache",
        extensions: [
            "ustar"
        ]
    },
    "application/x-wais-source": {
        source: "apache",
        extensions: [
            "src"
        ]
    },
    "application/x-x509-ca-cert": {
        source: "iana",
        extensions: [
            "der",
            "crt",
            "pem"
        ]
    },
    "application/x-xfig": {
        source: "apache",
        extensions: [
            "fig"
        ]
    },
    "application/x-xliff+xml": {
        source: "apache",
        extensions: [
            "xlf"
        ]
    },
    "application/x-xpinstall": {
        source: "apache",
        extensions: [
            "xpi"
        ]
    },
    "application/x-xz": {
        source: "apache",
        extensions: [
            "xz"
        ]
    },
    "application/x-zmachine": {
        source: "apache",
        extensions: [
            "z1",
            "z2",
            "z3",
            "z4",
            "z5",
            "z6",
            "z7",
            "z8"
        ]
    },
    "application/xaml+xml": {
        source: "apache",
        extensions: [
            "xaml"
        ]
    },
    "application/xcap-att+xml": {
        source: "iana",
        extensions: [
            "xav"
        ]
    },
    "application/xcap-caps+xml": {
        source: "iana",
        extensions: [
            "xca"
        ]
    },
    "application/xcap-diff+xml": {
        source: "iana",
        extensions: [
            "xdf"
        ]
    },
    "application/xcap-el+xml": {
        source: "iana",
        extensions: [
            "xel"
        ]
    },
    "application/xcap-ns+xml": {
        source: "iana",
        extensions: [
            "xns"
        ]
    },
    "application/xenc+xml": {
        source: "iana",
        extensions: [
            "xenc"
        ]
    },
    "application/xhtml+xml": {
        source: "iana",
        extensions: [
            "xhtml",
            "xht"
        ]
    },
    "application/xliff+xml": {
        source: "iana",
        extensions: [
            "xlf"
        ]
    },
    "application/xml": {
        source: "iana",
        extensions: [
            "xml",
            "xsl",
            "xsd",
            "rng"
        ]
    },
    "application/xml-dtd": {
        source: "iana",
        extensions: [
            "dtd"
        ]
    },
    "application/xop+xml": {
        source: "iana",
        extensions: [
            "xop"
        ]
    },
    "application/xproc+xml": {
        source: "apache",
        extensions: [
            "xpl"
        ]
    },
    "application/xslt+xml": {
        source: "iana",
        extensions: [
            "xsl",
            "xslt"
        ]
    },
    "application/xspf+xml": {
        source: "apache",
        extensions: [
            "xspf"
        ]
    },
    "application/xv+xml": {
        source: "iana",
        extensions: [
            "mxml",
            "xhvml",
            "xvml",
            "xvm"
        ]
    },
    "application/yaml": {
        source: "iana",
        extensions: [
            "yaml",
            "yml"
        ]
    },
    "application/yang": {
        source: "iana",
        extensions: [
            "yang"
        ]
    },
    "application/yin+xml": {
        source: "iana",
        extensions: [
            "yin"
        ]
    },
    "application/zip": {
        source: "iana",
        extensions: [
            "zip"
        ]
    }
};
;
}}),
"[project]/node_modules/@uploadthing/mime-types/audio/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "audio": (()=>audio)
});
const audio = {
    "audio/3gpp": {
        source: "iana",
        extensions: [
            "3gpp"
        ]
    },
    "audio/adpcm": {
        source: "apache",
        extensions: [
            "adp"
        ]
    },
    "audio/amr": {
        source: "iana",
        extensions: [
            "amr"
        ]
    },
    "audio/basic": {
        source: "iana",
        extensions: [
            "au",
            "snd"
        ]
    },
    "audio/midi": {
        source: "apache",
        extensions: [
            "mid",
            "midi",
            "kar",
            "rmi"
        ]
    },
    "audio/mobile-xmf": {
        source: "iana",
        extensions: [
            "mxmf"
        ]
    },
    "audio/mp4": {
        source: "iana",
        extensions: [
            "m4a",
            "mp4a"
        ]
    },
    "audio/mpeg": {
        source: "iana",
        extensions: [
            "mpga",
            "mp2",
            "mp2a",
            "mp3",
            "m2a",
            "m3a"
        ]
    },
    "audio/ogg": {
        source: "iana",
        extensions: [
            "oga",
            "ogg",
            "spx",
            "opus"
        ]
    },
    "audio/s3m": {
        source: "apache",
        extensions: [
            "s3m"
        ]
    },
    "audio/silk": {
        source: "apache",
        extensions: [
            "sil"
        ]
    },
    "audio/vnd.dece.audio": {
        source: "iana",
        extensions: [
            "uva",
            "uvva"
        ]
    },
    "audio/vnd.digital-winds": {
        source: "iana",
        extensions: [
            "eol"
        ]
    },
    "audio/vnd.dra": {
        source: "iana",
        extensions: [
            "dra"
        ]
    },
    "audio/vnd.dts": {
        source: "iana",
        extensions: [
            "dts"
        ]
    },
    "audio/vnd.dts.hd": {
        source: "iana",
        extensions: [
            "dtshd"
        ]
    },
    "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: [
            "lvp"
        ]
    },
    "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: [
            "pya"
        ]
    },
    "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: [
            "ecelp4800"
        ]
    },
    "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: [
            "ecelp7470"
        ]
    },
    "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: [
            "ecelp9600"
        ]
    },
    "audio/vnd.rip": {
        source: "iana",
        extensions: [
            "rip"
        ]
    },
    "audio/webm": {
        source: "apache",
        extensions: [
            "weba"
        ]
    },
    "audio/x-aac": {
        source: "apache",
        extensions: [
            "aac"
        ]
    },
    "audio/x-aiff": {
        source: "apache",
        extensions: [
            "aif",
            "aiff",
            "aifc"
        ]
    },
    "audio/x-caf": {
        source: "apache",
        extensions: [
            "caf"
        ]
    },
    "audio/x-flac": {
        source: "apache",
        extensions: [
            "flac"
        ]
    },
    "audio/x-m4a": {
        source: "nginx",
        extensions: [
            "m4a"
        ]
    },
    "audio/x-matroska": {
        source: "apache",
        extensions: [
            "mka"
        ]
    },
    "audio/x-mpegurl": {
        source: "apache",
        extensions: [
            "m3u"
        ]
    },
    "audio/x-ms-wax": {
        source: "apache",
        extensions: [
            "wax"
        ]
    },
    "audio/x-ms-wma": {
        source: "apache",
        extensions: [
            "wma"
        ]
    },
    "audio/x-pn-realaudio": {
        source: "apache",
        extensions: [
            "ram",
            "ra"
        ]
    },
    "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: [
            "rmp"
        ]
    },
    "audio/x-realaudio": {
        source: "nginx",
        extensions: [
            "ra"
        ]
    },
    "audio/x-wav": {
        source: "apache",
        extensions: [
            "wav"
        ]
    },
    "audio/x-gsm": {
        source: "apache",
        extensions: [
            "gsm"
        ]
    },
    "audio/xm": {
        source: "apache",
        extensions: [
            "xm"
        ]
    }
};
;
}}),
"[project]/node_modules/@uploadthing/mime-types/image/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "image": (()=>image)
});
const image = {
    "image/aces": {
        source: "iana",
        extensions: [
            "exr"
        ]
    },
    "image/avci": {
        source: "iana",
        extensions: [
            "avci"
        ]
    },
    "image/avcs": {
        source: "iana",
        extensions: [
            "avcs"
        ]
    },
    "image/avif": {
        source: "iana",
        extensions: [
            "avif"
        ]
    },
    "image/bmp": {
        source: "iana",
        extensions: [
            "bmp"
        ]
    },
    "image/cgm": {
        source: "iana",
        extensions: [
            "cgm"
        ]
    },
    "image/dicom-rle": {
        source: "iana",
        extensions: [
            "drle"
        ]
    },
    "image/emf": {
        source: "iana",
        extensions: [
            "emf"
        ]
    },
    "image/fits": {
        source: "iana",
        extensions: [
            "fits"
        ]
    },
    "image/g3fax": {
        source: "iana",
        extensions: [
            "g3"
        ]
    },
    "image/gif": {
        source: "iana",
        extensions: [
            "gif"
        ]
    },
    "image/heic": {
        source: "iana",
        extensions: [
            "heic"
        ]
    },
    "image/heic-sequence": {
        source: "iana",
        extensions: [
            "heics"
        ]
    },
    "image/heif": {
        source: "iana",
        extensions: [
            "heif"
        ]
    },
    "image/heif-sequence": {
        source: "iana",
        extensions: [
            "heifs"
        ]
    },
    "image/hej2k": {
        source: "iana",
        extensions: [
            "hej2"
        ]
    },
    "image/hsj2": {
        source: "iana",
        extensions: [
            "hsj2"
        ]
    },
    "image/ief": {
        source: "iana",
        extensions: [
            "ief"
        ]
    },
    "image/jls": {
        source: "iana",
        extensions: [
            "jls"
        ]
    },
    "image/jp2": {
        source: "iana",
        extensions: [
            "jp2",
            "jpg2"
        ]
    },
    "image/jpeg": {
        source: "iana",
        extensions: [
            "jpeg",
            "jpg",
            "jpe",
            "jfif",
            "pjpeg",
            "pjp"
        ]
    },
    "image/jph": {
        source: "iana",
        extensions: [
            "jph"
        ]
    },
    "image/jphc": {
        source: "iana",
        extensions: [
            "jhc"
        ]
    },
    "image/jpm": {
        source: "iana",
        extensions: [
            "jpm"
        ]
    },
    "image/jpx": {
        source: "iana",
        extensions: [
            "jpx",
            "jpf"
        ]
    },
    "image/jxr": {
        source: "iana",
        extensions: [
            "jxr"
        ]
    },
    "image/jxra": {
        source: "iana",
        extensions: [
            "jxra"
        ]
    },
    "image/jxrs": {
        source: "iana",
        extensions: [
            "jxrs"
        ]
    },
    "image/jxs": {
        source: "iana",
        extensions: [
            "jxs"
        ]
    },
    "image/jxsc": {
        source: "iana",
        extensions: [
            "jxsc"
        ]
    },
    "image/jxsi": {
        source: "iana",
        extensions: [
            "jxsi"
        ]
    },
    "image/jxss": {
        source: "iana",
        extensions: [
            "jxss"
        ]
    },
    "image/ktx": {
        source: "iana",
        extensions: [
            "ktx"
        ]
    },
    "image/ktx2": {
        source: "iana",
        extensions: [
            "ktx2"
        ]
    },
    "image/png": {
        source: "iana",
        extensions: [
            "png"
        ]
    },
    "image/prs.btif": {
        source: "iana",
        extensions: [
            "btif"
        ]
    },
    "image/prs.pti": {
        source: "iana",
        extensions: [
            "pti"
        ]
    },
    "image/sgi": {
        source: "apache",
        extensions: [
            "sgi"
        ]
    },
    "image/svg+xml": {
        source: "iana",
        extensions: [
            "svg",
            "svgz"
        ]
    },
    "image/t38": {
        source: "iana",
        extensions: [
            "t38"
        ]
    },
    "image/tiff": {
        source: "iana",
        extensions: [
            "tif",
            "tiff"
        ]
    },
    "image/tiff-fx": {
        source: "iana",
        extensions: [
            "tfx"
        ]
    },
    "image/vnd.adobe.photoshop": {
        source: "iana",
        extensions: [
            "psd"
        ]
    },
    "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: [
            "azv"
        ]
    },
    "image/vnd.dece.graphic": {
        source: "iana",
        extensions: [
            "uvi",
            "uvvi",
            "uvg",
            "uvvg"
        ]
    },
    "image/vnd.djvu": {
        source: "iana",
        extensions: [
            "djvu",
            "djv"
        ]
    },
    "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: [
            "sub"
        ]
    },
    "image/vnd.dwg": {
        source: "iana",
        extensions: [
            "dwg"
        ]
    },
    "image/vnd.dxf": {
        source: "iana",
        extensions: [
            "dxf"
        ]
    },
    "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: [
            "fbs"
        ]
    },
    "image/vnd.fpx": {
        source: "iana",
        extensions: [
            "fpx"
        ]
    },
    "image/vnd.fst": {
        source: "iana",
        extensions: [
            "fst"
        ]
    },
    "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: [
            "mmr"
        ]
    },
    "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: [
            "rlc"
        ]
    },
    "image/vnd.microsoft.icon": {
        source: "iana",
        extensions: [
            "ico"
        ]
    },
    "image/vnd.ms-modi": {
        source: "iana",
        extensions: [
            "mdi"
        ]
    },
    "image/vnd.ms-photo": {
        source: "apache",
        extensions: [
            "wdp"
        ]
    },
    "image/vnd.net-fpx": {
        source: "iana",
        extensions: [
            "npx"
        ]
    },
    "image/vnd.pco.b16": {
        source: "iana",
        extensions: [
            "b16"
        ]
    },
    "image/vnd.tencent.tap": {
        source: "iana",
        extensions: [
            "tap"
        ]
    },
    "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: [
            "vtf"
        ]
    },
    "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: [
            "wbmp"
        ]
    },
    "image/vnd.xiff": {
        source: "iana",
        extensions: [
            "xif"
        ]
    },
    "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: [
            "pcx"
        ]
    },
    "image/webp": {
        source: "apache",
        extensions: [
            "webp"
        ]
    },
    "image/wmf": {
        source: "iana",
        extensions: [
            "wmf"
        ]
    },
    "image/x-3ds": {
        source: "apache",
        extensions: [
            "3ds"
        ]
    },
    "image/x-cmu-raster": {
        source: "apache",
        extensions: [
            "ras"
        ]
    },
    "image/x-cmx": {
        source: "apache",
        extensions: [
            "cmx"
        ]
    },
    "image/x-freehand": {
        source: "apache",
        extensions: [
            "fh",
            "fhc",
            "fh4",
            "fh5",
            "fh7"
        ]
    },
    "image/x-icon": {
        source: "apache",
        extensions: [
            "ico"
        ]
    },
    "image/x-jng": {
        source: "nginx",
        extensions: [
            "jng"
        ]
    },
    "image/x-mrsid-image": {
        source: "apache",
        extensions: [
            "sid"
        ]
    },
    "image/x-ms-bmp": {
        source: "nginx",
        extensions: [
            "bmp"
        ]
    },
    "image/x-pcx": {
        source: "apache",
        extensions: [
            "pcx"
        ]
    },
    "image/x-pict": {
        source: "apache",
        extensions: [
            "pic",
            "pct"
        ]
    },
    "image/x-portable-anymap": {
        source: "apache",
        extensions: [
            "pnm"
        ]
    },
    "image/x-portable-bitmap": {
        source: "apache",
        extensions: [
            "pbm"
        ]
    },
    "image/x-portable-graymap": {
        source: "apache",
        extensions: [
            "pgm"
        ]
    },
    "image/x-portable-pixmap": {
        source: "apache",
        extensions: [
            "ppm"
        ]
    },
    "image/x-rgb": {
        source: "apache",
        extensions: [
            "rgb"
        ]
    },
    "image/x-tga": {
        source: "apache",
        extensions: [
            "tga"
        ]
    },
    "image/x-xbitmap": {
        source: "apache",
        extensions: [
            "xbm"
        ]
    },
    "image/x-xpixmap": {
        source: "apache",
        extensions: [
            "xpm"
        ]
    },
    "image/x-xwindowdump": {
        source: "apache",
        extensions: [
            "xwd"
        ]
    }
};
;
}}),
"[project]/node_modules/@uploadthing/mime-types/text/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "text": (()=>text)
});
const text = {
    "text/cache-manifest": {
        source: "iana",
        extensions: [
            "appcache",
            "manifest"
        ]
    },
    "text/calendar": {
        source: "iana",
        extensions: [
            "ics",
            "ifb"
        ]
    },
    "text/css": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "css"
        ]
    },
    "text/csv": {
        source: "iana",
        extensions: [
            "csv"
        ]
    },
    "text/html": {
        source: "iana",
        extensions: [
            "html",
            "htm",
            "shtml"
        ]
    },
    "text/markdown": {
        source: "iana",
        extensions: [
            "markdown",
            "md"
        ]
    },
    "text/mathml": {
        source: "nginx",
        extensions: [
            "mml"
        ]
    },
    "text/n3": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "n3"
        ]
    },
    "text/plain": {
        source: "iana",
        extensions: [
            "txt",
            "text",
            "conf",
            "def",
            "list",
            "log",
            "in",
            "ini"
        ]
    },
    "text/prs.lines.tag": {
        source: "iana",
        extensions: [
            "dsc"
        ]
    },
    "text/richtext": {
        source: "iana",
        extensions: [
            "rtx"
        ]
    },
    "text/rtf": {
        source: "iana",
        extensions: [
            "rtf"
        ]
    },
    "text/sgml": {
        source: "iana",
        extensions: [
            "sgml",
            "sgm"
        ]
    },
    "text/shex": {
        source: "iana",
        extensions: [
            "shex"
        ]
    },
    "text/spdx": {
        source: "iana",
        extensions: [
            "spdx"
        ]
    },
    "text/tab-separated-values": {
        source: "iana",
        extensions: [
            "tsv"
        ]
    },
    "text/troff": {
        source: "iana",
        extensions: [
            "t",
            "tr",
            "roff",
            "man",
            "me",
            "ms"
        ]
    },
    "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "ttl"
        ]
    },
    "text/uri-list": {
        source: "iana",
        extensions: [
            "uri",
            "uris",
            "urls"
        ]
    },
    "text/vcard": {
        source: "iana",
        extensions: [
            "vcard"
        ]
    },
    "text/vnd.curl": {
        source: "iana",
        extensions: [
            "curl"
        ]
    },
    "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: [
            "dcurl"
        ]
    },
    "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: [
            "mcurl"
        ]
    },
    "text/vnd.curl.scurl": {
        source: "apache",
        extensions: [
            "scurl"
        ]
    },
    "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: [
            "sub"
        ]
    },
    "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: [
            "ged"
        ]
    },
    "text/vnd.fly": {
        source: "iana",
        extensions: [
            "fly"
        ]
    },
    "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: [
            "flx"
        ]
    },
    "text/vnd.graphviz": {
        source: "iana",
        extensions: [
            "gv"
        ]
    },
    "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: [
            "3dml"
        ]
    },
    "text/vnd.in3d.spot": {
        source: "iana",
        extensions: [
            "spot"
        ]
    },
    "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "jad"
        ]
    },
    "text/vnd.wap.wml": {
        source: "iana",
        extensions: [
            "wml"
        ]
    },
    "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: [
            "wmls"
        ]
    },
    "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        extensions: [
            "vtt"
        ]
    },
    "text/x-asm": {
        source: "apache",
        extensions: [
            "s",
            "asm"
        ]
    },
    "text/x-c": {
        source: "apache",
        extensions: [
            "c",
            "cc",
            "cxx",
            "cpp",
            "h",
            "hh",
            "dic"
        ]
    },
    "text/x-component": {
        source: "nginx",
        extensions: [
            "htc"
        ]
    },
    "text/x-fortran": {
        source: "apache",
        extensions: [
            "f",
            "for",
            "f77",
            "f90"
        ]
    },
    "text/x-java-source": {
        source: "apache",
        extensions: [
            "java"
        ]
    },
    "text/x-nfo": {
        source: "apache",
        extensions: [
            "nfo"
        ]
    },
    "text/x-opml": {
        source: "apache",
        extensions: [
            "opml"
        ]
    },
    "text/x-pascal": {
        source: "apache",
        extensions: [
            "p",
            "pas"
        ]
    },
    "text/x-setext": {
        source: "apache",
        extensions: [
            "etx"
        ]
    },
    "text/x-sfv": {
        source: "apache",
        extensions: [
            "sfv"
        ]
    },
    "text/x-uuencode": {
        source: "apache",
        extensions: [
            "uu"
        ]
    },
    "text/x-vcalendar": {
        source: "apache",
        extensions: [
            "vcs"
        ]
    },
    "text/x-vcard": {
        source: "apache",
        extensions: [
            "vcf"
        ]
    },
    "text/xml": {
        source: "iana",
        extensions: [
            "xml"
        ]
    }
};
;
}}),
"[project]/node_modules/@uploadthing/mime-types/video/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "video": (()=>video)
});
const video = {
    "video/3gpp": {
        source: "iana",
        extensions: [
            "3gp",
            "3gpp"
        ]
    },
    "video/3gpp2": {
        source: "iana",
        extensions: [
            "3g2"
        ]
    },
    "video/h261": {
        source: "iana",
        extensions: [
            "h261"
        ]
    },
    "video/h263": {
        source: "iana",
        extensions: [
            "h263"
        ]
    },
    "video/h264": {
        source: "iana",
        extensions: [
            "h264"
        ]
    },
    "video/iso.segment": {
        source: "iana",
        extensions: [
            "m4s"
        ]
    },
    "video/jpeg": {
        source: "iana",
        extensions: [
            "jpgv"
        ]
    },
    "video/jpm": {
        source: "apache",
        extensions: [
            "jpm",
            "jpgm"
        ]
    },
    "video/mj2": {
        source: "iana",
        extensions: [
            "mj2",
            "mjp2"
        ]
    },
    "video/mp2t": {
        source: "iana",
        extensions: [
            "ts"
        ]
    },
    "video/mp4": {
        source: "iana",
        extensions: [
            "mp4",
            "mp4v",
            "mpg4"
        ]
    },
    "video/mpeg": {
        source: "iana",
        extensions: [
            "mpeg",
            "mpg",
            "mpe",
            "m1v",
            "m2v"
        ]
    },
    "video/ogg": {
        source: "iana",
        extensions: [
            "ogv"
        ]
    },
    "video/quicktime": {
        source: "iana",
        extensions: [
            "qt",
            "mov"
        ]
    },
    "video/vnd.dece.hd": {
        source: "iana",
        extensions: [
            "uvh",
            "uvvh"
        ]
    },
    "video/vnd.dece.mobile": {
        source: "iana",
        extensions: [
            "uvm",
            "uvvm"
        ]
    },
    "video/vnd.dece.pd": {
        source: "iana",
        extensions: [
            "uvp",
            "uvvp"
        ]
    },
    "video/vnd.dece.sd": {
        source: "iana",
        extensions: [
            "uvs",
            "uvvs"
        ]
    },
    "video/vnd.dece.video": {
        source: "iana",
        extensions: [
            "uvv",
            "uvvv"
        ]
    },
    "video/vnd.dvb.file": {
        source: "iana",
        extensions: [
            "dvb"
        ]
    },
    "video/vnd.fvt": {
        source: "iana",
        extensions: [
            "fvt"
        ]
    },
    "video/vnd.mpegurl": {
        source: "iana",
        extensions: [
            "mxu",
            "m4u"
        ]
    },
    "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: [
            "pyv"
        ]
    },
    "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: [
            "uvu",
            "uvvu"
        ]
    },
    "video/vnd.vivo": {
        source: "iana",
        extensions: [
            "viv"
        ]
    },
    "video/webm": {
        source: "apache",
        extensions: [
            "webm"
        ]
    },
    "video/x-f4v": {
        source: "apache",
        extensions: [
            "f4v"
        ]
    },
    "video/x-fli": {
        source: "apache",
        extensions: [
            "fli"
        ]
    },
    "video/x-flv": {
        source: "apache",
        extensions: [
            "flv"
        ]
    },
    "video/x-m4v": {
        source: "apache",
        extensions: [
            "m4v"
        ]
    },
    "video/x-matroska": {
        source: "apache",
        extensions: [
            "mkv",
            "mk3d",
            "mks"
        ]
    },
    "video/x-mng": {
        source: "apache",
        extensions: [
            "mng"
        ]
    },
    "video/x-ms-asf": {
        source: "apache",
        extensions: [
            "asf",
            "asx"
        ]
    },
    "video/x-ms-vob": {
        source: "apache",
        extensions: [
            "vob"
        ]
    },
    "video/x-ms-wm": {
        source: "apache",
        extensions: [
            "wm"
        ]
    },
    "video/x-ms-wmv": {
        source: "apache",
        extensions: [
            "wmv"
        ]
    },
    "video/x-ms-wmx": {
        source: "apache",
        extensions: [
            "wmx"
        ]
    },
    "video/x-ms-wvx": {
        source: "apache",
        extensions: [
            "wvx"
        ]
    },
    "video/x-msvideo": {
        source: "apache",
        extensions: [
            "avi"
        ]
    },
    "video/x-sgi-movie": {
        source: "apache",
        extensions: [
            "movie"
        ]
    },
    "video/x-smv": {
        source: "apache",
        extensions: [
            "smv"
        ]
    }
};
;
}}),
"[project]/node_modules/@uploadthing/mime-types/dist/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getExtensions": (()=>getExtensions),
    "getTypes": (()=>getTypes),
    "lookup": (()=>lookup),
    "mimeTypes": (()=>mimeTypes)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$application$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/application/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$audio$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/audio/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$image$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/image/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$text$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/text/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$video$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/video/index.js [app-route] (ecmascript)");
;
;
;
;
;
/**
 * Random types not worthy of their own file
 */ const misc = {
    "chemical/x-cdx": {
        source: "apache",
        extensions: [
            "cdx"
        ]
    },
    "chemical/x-cif": {
        source: "apache",
        extensions: [
            "cif"
        ]
    },
    "chemical/x-cmdf": {
        source: "apache",
        extensions: [
            "cmdf"
        ]
    },
    "chemical/x-cml": {
        source: "apache",
        extensions: [
            "cml"
        ]
    },
    "chemical/x-csml": {
        source: "apache",
        extensions: [
            "csml"
        ]
    },
    "chemical/x-xyz": {
        source: "apache",
        extensions: [
            "xyz"
        ]
    },
    "font/collection": {
        source: "iana",
        extensions: [
            "ttc"
        ]
    },
    "font/otf": {
        source: "iana",
        extensions: [
            "otf"
        ]
    },
    "font/ttf": {
        source: "iana",
        extensions: [
            "ttf"
        ]
    },
    "font/woff": {
        source: "iana",
        extensions: [
            "woff"
        ]
    },
    "font/woff2": {
        source: "iana",
        extensions: [
            "woff2"
        ]
    },
    "message/disposition-notification": {
        source: "iana",
        extensions: [
            "disposition-notification"
        ]
    },
    "message/global": {
        source: "iana",
        extensions: [
            "u8msg"
        ]
    },
    "message/global-delivery-status": {
        source: "iana",
        extensions: [
            "u8dsn"
        ]
    },
    "message/global-disposition-notification": {
        source: "iana",
        extensions: [
            "u8mdn"
        ]
    },
    "message/global-headers": {
        source: "iana",
        extensions: [
            "u8hdr"
        ]
    },
    "message/rfc822": {
        source: "iana",
        extensions: [
            "eml",
            "mime"
        ]
    },
    "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: [
            "wsc"
        ]
    },
    "model/3mf": {
        source: "iana",
        extensions: [
            "3mf"
        ]
    },
    "model/gltf+json": {
        source: "iana",
        extensions: [
            "gltf"
        ]
    },
    "model/gltf-binary": {
        source: "iana",
        extensions: [
            "glb"
        ]
    },
    "model/iges": {
        source: "iana",
        extensions: [
            "igs",
            "iges"
        ]
    },
    "model/mesh": {
        source: "iana",
        extensions: [
            "msh",
            "mesh",
            "silo"
        ]
    },
    "model/mtl": {
        source: "iana",
        extensions: [
            "mtl"
        ]
    },
    "model/obj": {
        source: "iana",
        extensions: [
            "obj"
        ]
    },
    "model/step": {
        source: "iana",
        extensions: [
            ".p21",
            ".stp",
            ".step",
            ".stpnc",
            ".210"
        ]
    },
    "model/step+xml": {
        source: "iana",
        extensions: [
            "stpx"
        ]
    },
    "model/step+zip": {
        source: "iana",
        extensions: [
            "stpz"
        ]
    },
    "model/step-xml+zip": {
        source: "iana",
        extensions: [
            "stpxz"
        ]
    },
    "model/stl": {
        source: "iana",
        extensions: [
            "stl"
        ]
    },
    "model/vnd.collada+xml": {
        source: "iana",
        extensions: [
            "dae"
        ]
    },
    "model/vnd.dwf": {
        source: "iana",
        extensions: [
            "dwf"
        ]
    },
    "model/vnd.gdl": {
        source: "iana",
        extensions: [
            "gdl"
        ]
    },
    "model/vnd.gtw": {
        source: "iana",
        extensions: [
            "gtw"
        ]
    },
    "model/vnd.mts": {
        source: "iana",
        extensions: [
            "mts"
        ]
    },
    "model/vnd.opengex": {
        source: "iana",
        extensions: [
            "ogex"
        ]
    },
    "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: [
            "x_b"
        ]
    },
    "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: [
            "x_t"
        ]
    },
    "model/vnd.sap.vds": {
        source: "iana",
        extensions: [
            "vds"
        ]
    },
    "model/vnd.usdz+zip": {
        source: "iana",
        extensions: [
            "usdz"
        ]
    },
    "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: [
            "bsp"
        ]
    },
    "model/vnd.vtu": {
        source: "iana",
        extensions: [
            "vtu"
        ]
    },
    "model/vrml": {
        source: "iana",
        extensions: [
            "wrl",
            "vrml"
        ]
    },
    "model/x3d+binary": {
        source: "apache",
        extensions: [
            "x3db",
            "x3dbz"
        ]
    },
    "model/x3d+fastinfoset": {
        source: "iana",
        extensions: [
            "x3db"
        ]
    },
    "model/x3d+vrml": {
        source: "apache",
        extensions: [
            "x3dv",
            "x3dvz"
        ]
    },
    "model/x3d+xml": {
        source: "iana",
        extensions: [
            "x3d",
            "x3dz"
        ]
    },
    "model/x3d-vrml": {
        source: "iana",
        extensions: [
            "x3dv"
        ]
    },
    "x-conference/x-cooltalk": {
        source: "apache",
        extensions: [
            "ice"
        ]
    }
};
const mimes = {
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$application$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["application"],
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$audio$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["audio"],
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$image$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["image"],
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$text$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["text"],
    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$video$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["video"],
    ...misc
};
const mimeTypes = mimes;
function extname(path) {
    const index = path.lastIndexOf(".");
    return index < 0 ? "" : path.substring(index);
}
const extensions = {};
const types = {};
// Introduce getters to improve tree-shakeability
function getTypes() {
    populateMaps(extensions, types);
    return types;
}
function getExtensions() {
    populateMaps(extensions, types);
    return extensions;
}
/**
 * Lookup the MIME type for a file path/extension.
 */ function lookup(path) {
    if (!path || typeof path !== "string") {
        return false;
    }
    // get the extension ("ext" or ".ext" or full path)
    const extension = extname("x." + path).toLowerCase().substring(1);
    if (!extension) {
        return false;
    }
    return getTypes()[extension] || false;
}
let inittedMaps = false;
/**
 * Populate the extensions and types maps.
 * @private
 */ function populateMaps(extensions, types) {
    if (inittedMaps) return;
    inittedMaps = true;
    // source preference (least -> most)
    const preference = [
        "nginx",
        "apache",
        undefined,
        "iana"
    ];
    Object.keys(mimeTypes).forEach((type)=>{
        const mime = mimeTypes[type];
        const exts = mime.extensions;
        if (!exts?.length) {
            return;
        }
        // mime -> extensions
        extensions[type] = exts;
        // extension -> mime
        for (const extension of exts){
            if (types[extension]) {
                const from = preference.indexOf(mimeTypes[types[extension]].source);
                const to = preference.indexOf(mime.source);
                if (types[extension] !== "application/octet-stream" && (from > to || from === to && types[extension].startsWith("application/"))) {
                    continue;
                }
            }
            // set the extension -> mime
            types[extension] = type;
        }
    });
}
;
}}),
"[project]/node_modules/@uploadthing/shared/dist/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ALLOWED_FILE_TYPES": (()=>ALLOWED_FILE_TYPES),
    "BadRequestError": (()=>BadRequestError),
    "FILESIZE_UNITS": (()=>FILESIZE_UNITS),
    "FetchContext": (()=>FetchContext),
    "FetchError": (()=>FetchError),
    "INTERNAL_DO_NOT_USE__fatalClientError": (()=>INTERNAL_DO_NOT_USE__fatalClientError),
    "INTERNAL_doFormatting": (()=>INTERNAL_doFormatting),
    "InvalidFileSizeError": (()=>InvalidFileSizeError),
    "InvalidFileTypeError": (()=>InvalidFileTypeError),
    "InvalidJsonError": (()=>InvalidJsonError),
    "InvalidRouteConfigError": (()=>InvalidRouteConfigError),
    "InvalidURLError": (()=>InvalidURLError),
    "RetryError": (()=>RetryError),
    "UnknownFileTypeError": (()=>UnknownFileTypeError),
    "UploadAbortedError": (()=>UploadAbortedError),
    "UploadPausedError": (()=>UploadPausedError),
    "UploadThingError": (()=>UploadThingError),
    "ValidACLs": (()=>ValidACLs),
    "ValidContentDispositions": (()=>ValidContentDispositions),
    "acceptPropAsAcceptAttr": (()=>acceptPropAsAcceptAttr),
    "allFilesAccepted": (()=>allFilesAccepted),
    "allowedContentTextLabelGenerator": (()=>allowedContentTextLabelGenerator),
    "bytesToFileSize": (()=>bytesToFileSize),
    "capitalizeStart": (()=>capitalizeStart),
    "contentDisposition": (()=>contentDisposition),
    "contentFieldToContent": (()=>contentFieldToContent),
    "createIdentityProxy": (()=>createIdentityProxy),
    "defaultClassListMerger": (()=>defaultClassListMerger),
    "fetchEff": (()=>fetchEff),
    "fileSizeToBytes": (()=>fileSizeToBytes),
    "fillInputRouteConfig": (()=>fillInputRouteConfig),
    "filterDefinedObjectValues": (()=>filterDefinedObjectValues),
    "generateClientDropzoneAccept": (()=>generateClientDropzoneAccept),
    "generateKey": (()=>generateKey),
    "generateMimeTypes": (()=>generateMimeTypes),
    "generatePermittedFileTypes": (()=>generatePermittedFileTypes),
    "generateSignedURL": (()=>generateSignedURL),
    "getDefaultRouteConfigValues": (()=>getDefaultRouteConfigValues),
    "getDefaultSizeForType": (()=>getDefaultSizeForType),
    "getErrorTypeFromStatusCode": (()=>getErrorTypeFromStatusCode),
    "getFilesFromClipboardEvent": (()=>getFilesFromClipboardEvent),
    "getFullApiUrl": (()=>getFullApiUrl),
    "getRequestUrl": (()=>getRequestUrl),
    "getStatusCodeFromError": (()=>getStatusCodeFromError),
    "initialState": (()=>initialState),
    "isEnterOrSpace": (()=>isEnterOrSpace),
    "isEventWithFiles": (()=>isEventWithFiles),
    "isFileAccepted": (()=>isFileAccepted),
    "isIeOrEdge": (()=>isIeOrEdge),
    "isPropagationStopped": (()=>isPropagationStopped),
    "isRouteArray": (()=>isRouteArray),
    "isValidQuantity": (()=>isValidQuantity),
    "isValidSize": (()=>isValidSize),
    "matchFileType": (()=>matchFileType),
    "noop": (()=>noop),
    "objectKeys": (()=>objectKeys),
    "parseResponseJson": (()=>parseResponseJson),
    "parseTimeToSeconds": (()=>parseTimeToSeconds),
    "reducer": (()=>reducer),
    "resolveMaybeUrlArg": (()=>resolveMaybeUrlArg),
    "safeNumberReplacer": (()=>safeNumberReplacer),
    "safeParseJSON": (()=>safeParseJSON),
    "semverLite": (()=>semverLite),
    "signPayload": (()=>signPayload),
    "styleFieldToClassName": (()=>styleFieldToClassName),
    "styleFieldToCssObject": (()=>styleFieldToCssObject),
    "unwrap": (()=>unwrap),
    "verifyKey": (()=>verifyKey),
    "verifySignature": (()=>verifySignature),
    "warnIfInvalidPeerDependency": (()=>warnIfInvalidPeerDependency)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sqids$2f$esm$2f$sqids$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/sqids/esm/sqids.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Micro.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Predicate$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Predicate.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Context$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Context.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$video$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/video/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$text$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/text/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$image$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/image/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$audio$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/mime-types/audio/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Hash$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Hash.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Redacted$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Redacted.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Encoding$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Encoding.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
const ValidContentDispositions = [
    "inline",
    "attachment"
];
const ValidACLs = [
    "public-read",
    "private"
];
class InvalidRouteConfigError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("InvalidRouteConfig") {
    constructor(type, field){
        const reason = field ? `Expected route config to have a ${field} for key ${type} but none was found.` : `Encountered an invalid route config during backfilling. ${type} was not found.`;
        super({
            reason
        });
    }
}
class UnknownFileTypeError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("UnknownFileType") {
    constructor(fileName){
        const reason = `Could not determine type for ${fileName}`;
        super({
            reason
        });
    }
}
class InvalidFileTypeError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("InvalidFileType") {
    constructor(fileType, fileName){
        const reason = `File type ${fileType} not allowed for ${fileName}`;
        super({
            reason
        });
    }
}
class InvalidFileSizeError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("InvalidFileSize") {
    constructor(fileSize){
        const reason = `Invalid file size: ${fileSize}`;
        super({
            reason
        });
    }
}
class InvalidURLError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("InvalidURL") {
    constructor(attemptedUrl){
        super({
            reason: `Failed to parse '${attemptedUrl}' as a URL.`
        });
    }
}
class RetryError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("RetryError") {
}
class FetchError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("FetchError") {
}
class InvalidJsonError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("InvalidJson") {
}
class BadRequestError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("BadRequestError") {
    getMessage() {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Predicate$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.isRecord(this.json)) {
            if (typeof this.json.message === "string") return this.json.message;
        }
        return this.message;
    }
}
class UploadPausedError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("UploadAborted") {
}
class UploadAbortedError extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("UploadAborted") {
}
function isRouteArray(routeConfig) {
    return Array.isArray(routeConfig);
}
function getDefaultSizeForType(fileType) {
    if (fileType === "image") return "4MB";
    if (fileType === "video") return "16MB";
    if (fileType === "audio") return "8MB";
    if (fileType === "blob") return "8MB";
    if (fileType === "pdf") return "4MB";
    if (fileType === "text") return "64KB";
    return "4MB";
}
function getDefaultRouteConfigValues(type) {
    return {
        maxFileSize: getDefaultSizeForType(type),
        maxFileCount: 1,
        minFileCount: 1,
        contentDisposition: "inline"
    };
}
/**
 * This function takes in the user's input and "upscales" it to a full config
 * Additionally, it replaces numbers with "safe" equivalents
 *
 * Example:
 * ```ts
 * ["image"] => { image: { maxFileSize: "4MB", limit: 1 } }
 * ```
 */ const fillInputRouteConfig = (routeConfig)=>{
    // If array, apply defaults
    if (isRouteArray(routeConfig)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed(routeConfig.reduce((acc, fileType)=>{
            acc[fileType] = getDefaultRouteConfigValues(fileType);
            return acc;
        }, {}));
    }
    // Backfill defaults onto config
    const newConfig = {};
    for (const key of objectKeys(routeConfig)){
        const value = routeConfig[key];
        if (!value) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.fail(new InvalidRouteConfigError(key));
        newConfig[key] = {
            ...getDefaultRouteConfigValues(key),
            ...value
        };
    }
    // we know that the config is valid, so we can stringify it and parse it back
    // this allows us to replace numbers with "safe" equivalents
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed(JSON.parse(JSON.stringify(newConfig, safeNumberReplacer)));
};
/**
 * Match the file's type for a given allow list e.g. `image/png => image`
 * Prefers the file's type, then falls back to a extension-based lookup
 */ const matchFileType = (file, allowedTypes)=>{
    // Type might be "" if the browser doesn't recognize the mime type
    const mimeType = file.type || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["lookup"])(file.name);
    if (!mimeType) {
        if (allowedTypes.includes("blob")) return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed("blob");
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.fail(new UnknownFileTypeError(file.name));
    }
    // If the user has specified a specific mime type, use that
    if (allowedTypes.some((type)=>type.includes("/"))) {
        if (allowedTypes.includes(mimeType)) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed(mimeType);
        }
    }
    // Otherwise, we have a "magic" type eg. "image" or "video"
    const type = mimeType.toLowerCase() === "application/pdf" ? "pdf" : mimeType.split("/")[0];
    if (!allowedTypes.includes(type)) {
        // Blob is a catch-all for any file type not explicitly supported
        if (allowedTypes.includes("blob")) {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed("blob");
        } else {
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.fail(new InvalidFileTypeError(type, file.name));
        }
    }
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed(type);
};
const FILESIZE_UNITS = [
    "B",
    "KB",
    "MB",
    "GB",
    "TB"
];
const fileSizeToBytes = (fileSize)=>{
    const regex = new RegExp(`^(\\d+)(\\.\\d+)?\\s*(${FILESIZE_UNITS.join("|")})$`, "i");
    // make sure the string is in the format of 123KB
    const match = fileSize.match(regex);
    if (!match) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.fail(new InvalidFileSizeError(fileSize));
    }
    const sizeValue = parseFloat(match[1]);
    const sizeUnit = match[3].toUpperCase();
    const bytes = sizeValue * Math.pow(1024, FILESIZE_UNITS.indexOf(sizeUnit));
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed(Math.floor(bytes));
};
const bytesToFileSize = (bytes)=>{
    if (bytes === 0 || bytes === -1) {
        return "0B";
    }
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(2)}${FILESIZE_UNITS[i]}`;
};
async function safeParseJSON(input) {
    const text = await input.text();
    try {
        return JSON.parse(text ?? "null");
    } catch (err) {
        console.error(`Error parsing JSON, got '${text}'`);
        return new Error(`Error parsing JSON, got '${text}'`);
    }
}
/** typesafe Object.keys */ function objectKeys(obj) {
    return Object.keys(obj);
}
function filterDefinedObjectValues(obj) {
    return Object.fromEntries(Object.entries(obj).filter((pair)=>pair[1] != null));
}
/** construct content-disposition header according to RFC 6266 section 4.1
 * https://www.rfc-editor.org/rfc/rfc6266#section-4.1
 *
 * @example
 * contentDisposition("inline", 'my "special" file,name.pdf');
 * // => "inline; filename="my \"special\" file\,name.pdf"; filename*=UTF-8''my%20%22special%22%20file%2Cname.pdf"
 */ function contentDisposition(contentDisposition, fileName) {
    // Encode the filename for the legacy parameter
    const legacyFileName = fileName.replace(/[",\\']/g, "\\$&");
    //UTF-8 encode for the extended parameter (RFC 5987)
    const utf8FileName = encodeURIComponent(fileName).replace(/[')(]/g, (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`).replace(/\*/g, "%2A");
    return [
        contentDisposition,
        `filename="${legacyFileName}"`,
        `filename*=UTF-8''${utf8FileName}`
    ].join("; ");
}
function semverLite(required, toCheck) {
    // Pull out numbers from strings like `6.0.0`, `^6.4`, `~6.4.0`
    const semverRegex = /(\d+)\.?(\d+)?\.?(\d+)?/;
    const requiredMatch = required.match(semverRegex);
    if (!requiredMatch?.[0]) {
        throw new Error(`Invalid semver requirement: ${required}`);
    }
    const toCheckMatch = toCheck.match(semverRegex);
    if (!toCheckMatch?.[0]) {
        throw new Error(`Invalid semver to check: ${toCheck}`);
    }
    const [_1, rMajor, rMinor, rPatch] = requiredMatch;
    const [_2, cMajor, cMinor, cPatch] = toCheckMatch;
    if (required.startsWith("^")) {
        // Major must be equal, minor must be greater or equal
        if (rMajor !== cMajor) return false;
        if (rMinor > cMinor) return false;
        return true;
    }
    if (required.startsWith("~")) {
        // Major must be equal, minor must be equal
        if (rMajor !== cMajor) return false;
        if (rMinor !== cMinor) return false;
        return true;
    }
    // Exact match
    return rMajor === cMajor && rMinor === cMinor && rPatch === cPatch;
}
function warnIfInvalidPeerDependency(pkg, required, toCheck) {
    if (!semverLite(required, toCheck)) {
        console.warn(`!!!WARNING::: ${pkg} requires "uploadthing@${required}", but version "${toCheck}" is installed`);
    }
}
const getRequestUrl = (req)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const host = req.headers.get("x-forwarded-host") ?? req.headers.get("host");
        const proto = req.headers.get("x-forwarded-proto") ?? "https";
        const protocol = proto.endsWith(":") ? proto : `${proto}:`;
        const url = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.try({
            try: ()=>new URL(req.url, `${protocol}//${host}`),
            catch: ()=>new InvalidURLError(req.url)
        });
        url.search = "";
        return url;
    });
const getFullApiUrl = (maybeUrl)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const base = (()=>{
            if ("TURBOPACK compile-time falsy", 0) {
                "TURBOPACK unreachable";
            }
            if (process.env?.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;
            return "http://localhost:3000";
        })();
        const url = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.try({
            try: ()=>new URL(maybeUrl ?? "/api/uploadthing", base),
            catch: ()=>new InvalidURLError(maybeUrl ?? "/api/uploadthing")
        });
        if (url.pathname === "/") {
            url.pathname = "/api/uploadthing";
        }
        return url;
    });
/*
 * Returns a full URL to the dev's uploadthing endpoint
 * Can take either an origin, or a pathname, or a full URL
 * and will return the "closest" url matching the default
 * `<VERCEL_URL || localhost>/api/uploadthing`
 */ const resolveMaybeUrlArg = (maybeUrl)=>{
    return maybeUrl instanceof URL ? maybeUrl : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.runSync(getFullApiUrl(maybeUrl));
};
function parseTimeToSeconds(time) {
    if (typeof time === "number") return time;
    const match = time.split(/(\d+)/).filter(Boolean);
    const num = Number(match[0]);
    const unit = (match[1] ?? "s").trim().slice(0, 1);
    const multiplier = {
        s: 1,
        m: 60,
        h: 3600,
        d: 86400
    }[unit];
    return num * multiplier;
}
/**
 * Replacer for JSON.stringify that will replace numbers that cannot be
 * serialized to JSON with "reasonable equivalents".
 *
 * Infinity and -Infinity are replaced by MAX_SAFE_INTEGER and MIN_SAFE_INTEGER
 * NaN is replaced by 0
 *
 */ const safeNumberReplacer = (_, value)=>{
    if (typeof value !== "number") return value;
    if (Number.isSafeInteger(value) || value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER) {
        return value;
    }
    if (value === Infinity) return Number.MAX_SAFE_INTEGER;
    if (value === -Infinity) return Number.MIN_SAFE_INTEGER;
    if (Number.isNaN(value)) return 0;
};
function noop() {
// noop
}
function createIdentityProxy() {
    return new Proxy(noop, {
        get: (_, prop)=>prop
    });
}
function unwrap(x, ...args) {
    return typeof x === "function" ? x(...args) : x;
}
const ALLOWED_FILE_TYPES = [
    "image",
    "video",
    "audio",
    "pdf",
    "text",
    "blob"
];
const ERROR_CODES = {
    // Generic
    BAD_REQUEST: 400,
    NOT_FOUND: 404,
    FORBIDDEN: 403,
    INTERNAL_SERVER_ERROR: 500,
    INTERNAL_CLIENT_ERROR: 500,
    // S3 specific
    TOO_LARGE: 413,
    TOO_SMALL: 400,
    TOO_MANY_FILES: 400,
    KEY_TOO_LONG: 400,
    // UploadThing specific
    URL_GENERATION_FAILED: 500,
    UPLOAD_FAILED: 500,
    MISSING_ENV: 500,
    INVALID_SERVER_CONFIG: 500,
    FILE_LIMIT_EXCEEDED: 500
};
function messageFromUnknown(cause, fallback) {
    if (typeof cause === "string") {
        return cause;
    }
    if (cause instanceof Error) {
        return cause.message;
    }
    if (cause && typeof cause === "object" && "message" in cause && typeof cause.message === "string") {
        return cause.message;
    }
    return fallback ?? "An unknown error occurred";
}
class UploadThingError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Error {
    constructor(initOpts){
        const opts = typeof initOpts === "string" ? {
            code: "INTERNAL_SERVER_ERROR",
            message: initOpts
        } : initOpts;
        const message = opts.message ?? messageFromUnknown(opts.cause, opts.code);
        super({
            message
        }), this._tag = "UploadThingError", this.name = "UploadThingError";
        this.code = opts.code;
        this.data = opts.data;
        if (opts.cause instanceof Error) {
            this.cause = opts.cause;
        } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Predicate$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.isRecord(opts.cause) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Predicate$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.isNumber(opts.cause.status) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Predicate$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.isString(opts.cause.statusText)) {
            this.cause = new Error(`Response ${opts.cause.status} ${opts.cause.statusText}`);
        } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Predicate$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.isString(opts.cause)) {
            this.cause = new Error(opts.cause);
        } else {
            this.cause = opts.cause;
        }
    }
    static toObject(error) {
        return {
            code: error.code,
            message: error.message,
            data: error.data
        };
    }
    static serialize(error) {
        return JSON.stringify(UploadThingError.toObject(error));
    }
}
function getErrorTypeFromStatusCode(statusCode) {
    for (const [code, status] of Object.entries(ERROR_CODES)){
        if (status === statusCode) {
            return code;
        }
    }
    return "INTERNAL_SERVER_ERROR";
}
function getStatusCodeFromError(error) {
    return ERROR_CODES[error.code] ?? 500;
}
const INTERNAL_DO_NOT_USE__fatalClientError = (e)=>new UploadThingError({
        code: "INTERNAL_CLIENT_ERROR",
        message: "Something went wrong. Please report this to UploadThing.",
        cause: e
    });
class FetchContext extends /** #__PURE__ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Context$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Tag("uploadthing/Fetch")() {
}
// Temporary Effect wrappers below.
// Only for use in the browser.
// On the server, use `@effect/platform.HttpClient` instead.
const fetchEff = (input, init)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.flatMap(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.service(FetchContext), (fetch)=>{
        const headers = new Headers(init?.headers ?? []);
        const reqInfo = {
            url: input.toString(),
            method: init?.method,
            body: init?.body,
            headers: Object.fromEntries(headers)
        };
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tryPromise({
            try: (signal)=>fetch(input, {
                    ...init,
                    headers,
                    signal
                }),
            catch: (error)=>new FetchError({
                    error: error instanceof Error ? {
                        ...error,
                        name: error.name,
                        message: error.message,
                        stack: error.stack
                    } : error,
                    input: reqInfo
                })
        }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tapError((e)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.sync(()=>console.error(e.input))), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map((res)=>Object.assign(res, {
                requestUrl: reqInfo.url
            })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withTrace("fetch"));
    });
const parseResponseJson = (res)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tryPromise({
        try: async ()=>{
            const json = await res.json();
            return {
                json,
                ok: res.ok,
                status: res.status
            };
        },
        catch: (error)=>new InvalidJsonError({
                error,
                input: res.requestUrl
            })
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.filterOrFail(({ ok })=>ok, ({ json, status })=>new BadRequestError({
            status,
            message: `Request to ${res.requestUrl} failed with status ${status}`,
            json
        })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map(({ json })=>json), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withTrace("parseJson"));
const generateMimeTypes = (typesOrRouteConfig)=>{
    const fileTypes = Array.isArray(typesOrRouteConfig) ? typesOrRouteConfig : objectKeys(typesOrRouteConfig);
    if (fileTypes.includes("blob")) return [];
    return fileTypes.map((type)=>{
        if (type === "pdf") return "application/pdf";
        if (type.includes("/")) return type;
        // Add wildcard to support all subtypes, e.g. image => "image/*"
        // But some browsers/OSes don't support it, so we'll also dump all the mime types
        // we know that starts with the type, e.g. image => "image/png, image/jpeg, ..."
        if (type === "audio") return [
            "audio/*",
            ...objectKeys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$audio$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["audio"])
        ].join(", ");
        if (type === "image") return [
            "image/*",
            ...objectKeys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$image$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["image"])
        ].join(", ");
        if (type === "text") return [
            "text/*",
            ...objectKeys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$text$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["text"])
        ].join(", ");
        if (type === "video") return [
            "video/*",
            ...objectKeys(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$mime$2d$types$2f$video$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["video"])
        ].join(", ");
        return `${type}/*`;
    });
};
const generateClientDropzoneAccept = (fileTypes)=>{
    const mimeTypes = generateMimeTypes(fileTypes);
    return Object.fromEntries(mimeTypes.map((type)=>[
            type,
            []
        ]));
};
function getFilesFromClipboardEvent(event) {
    const dataTransferItems = event.clipboardData?.items;
    if (!dataTransferItems) return;
    const files = Array.from(dataTransferItems).reduce((acc, curr)=>{
        const f = curr.getAsFile();
        return f ? [
            ...acc,
            f
        ] : acc;
    }, []);
    return files;
}
/**
 * Shared helpers for our premade components that's reusable by multiple frameworks
 */ const generatePermittedFileTypes = (config)=>{
    const fileTypes = config ? objectKeys(config) : [];
    const maxFileCount = config ? Object.values(config).map((v)=>v.maxFileCount) : [];
    return {
        fileTypes,
        multiple: maxFileCount.some((v)=>v && v > 1)
    };
};
const capitalizeStart = (str)=>{
    return str.charAt(0).toUpperCase() + str.slice(1);
};
const INTERNAL_doFormatting = (config)=>{
    if (!config) return "";
    const allowedTypes = objectKeys(config);
    const formattedTypes = allowedTypes.map((f)=>f === "blob" ? "file" : f);
    // Format multi-type uploader label as "Supports videos, images and files";
    if (formattedTypes.length > 1) {
        const lastType = formattedTypes.pop();
        return `${formattedTypes.join("s, ")} and ${lastType}s`;
    }
    // Single type uploader label
    const key = allowedTypes[0];
    const formattedKey = formattedTypes[0];
    const { maxFileSize, maxFileCount, minFileCount } = config[key];
    if (maxFileCount && maxFileCount > 1) {
        if (minFileCount > 1) {
            return `${minFileCount} - ${maxFileCount} ${formattedKey}s up to ${maxFileSize}`;
        } else {
            return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;
        }
    } else {
        return `${formattedKey} (${maxFileSize})`;
    }
};
const allowedContentTextLabelGenerator = (config)=>{
    return capitalizeStart(INTERNAL_doFormatting(config));
};
const styleFieldToClassName = (styleField, args)=>{
    if (typeof styleField === "string") return styleField;
    if (typeof styleField === "function") {
        const result = styleField(args);
        if (typeof result === "string") return result;
    }
    return "";
};
const styleFieldToCssObject = (styleField, args)=>{
    if (typeof styleField === "object") return styleField;
    if (typeof styleField === "function") {
        const result = styleField(args);
        if (typeof result === "object") return result;
    }
    return {};
};
const contentFieldToContent = (contentField, arg)=>{
    if (!contentField) return null;
    if (typeof contentField !== "function") return contentField;
    if (typeof contentField === "function") {
        const result = contentField(arg);
        return result;
    }
};
const defaultClassListMerger = (...classes)=>{
    return classes.filter(Boolean).join(" ");
};
const signaturePrefix = "hmac-sha256=";
const algorithm = {
    name: "HMAC",
    hash: "SHA-256"
};
const encoder = new TextEncoder();
function shuffle(str, seed) {
    const chars = str.split("");
    const seedNum = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Hash$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.string(seed);
    let temp;
    let j;
    for(let i = 0; i < chars.length; i++){
        j = (seedNum % (i + 1) + i) % chars.length;
        temp = chars[i];
        chars[i] = chars[j];
        chars[j] = temp;
    }
    return chars.join("");
}
const signPayload = (payload, secret)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const signingKey = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tryPromise({
            try: ()=>crypto.subtle.importKey("raw", encoder.encode(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Redacted$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.value(secret)), algorithm, false, [
                    "sign"
                ]),
            catch: (e)=>new UploadThingError({
                    code: "BAD_REQUEST",
                    message: "Invalid signing secret",
                    cause: e
                })
        });
        const signature = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tryPromise({
            try: ()=>crypto.subtle.sign(algorithm, signingKey, encoder.encode(payload)),
            catch: (e)=>new UploadThingError({
                    code: "BAD_REQUEST",
                    cause: e
                })
        }), (arrayBuffer)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Encoding$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.encodeHex(new Uint8Array(arrayBuffer)));
        return `${signaturePrefix}${signature}`;
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withTrace("signPayload"));
const verifySignature = (payload, signature, secret)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const sig = signature?.slice(signaturePrefix.length);
        if (!sig) return false;
        const secretBytes = encoder.encode(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Redacted$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.value(secret));
        const signingKey = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.promise(()=>crypto.subtle.importKey("raw", secretBytes, algorithm, false, [
                "verify"
            ]));
        const sigBytes = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.fromEither(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Encoding$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.decodeHex(sig));
        const payloadBytes = encoder.encode(payload);
        return yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.promise(()=>crypto.subtle.verify(algorithm, signingKey, sigBytes, payloadBytes));
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withTrace("verifySignature"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.orElseSucceed(()=>false));
const generateKey = (file, appId, getHashParts)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.sync(()=>{
        // Get the parts of which we should hash to constuct the key
        // This allows the user to customize the hashing algorithm
        // If they for example want to generate the same key for the
        // same file whenever it was uploaded
        const hashParts = JSON.stringify(getHashParts?.(file) ?? [
            file.name,
            file.size,
            file.type,
            file.lastModified,
            Date.now()
        ]);
        // Hash and Encode the parts and appId as sqids
        const alphabet = shuffle(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sqids$2f$esm$2f$sqids$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["defaultOptions"].alphabet, appId);
        const encodedFileSeed = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sqids$2f$esm$2f$sqids$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]({
            alphabet,
            minLength: 36
        }).encode([
            Math.abs(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Hash$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.string(hashParts))
        ]);
        const encodedAppId = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sqids$2f$esm$2f$sqids$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]({
            alphabet,
            minLength: 12
        }).encode([
            Math.abs(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Hash$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.string(appId))
        ]);
        // Concatenate them
        return encodedAppId + encodedFileSeed;
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withTrace("generateKey"));
// Verify that the key was generated with the same appId
const verifyKey = (key, appId)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.sync(()=>{
        const alphabet = shuffle(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sqids$2f$esm$2f$sqids$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["defaultOptions"].alphabet, appId);
        const expectedPrefix = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$sqids$2f$esm$2f$sqids$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]({
            alphabet,
            minLength: 12
        }).encode([
            Math.abs(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Hash$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.string(appId))
        ]);
        return key.startsWith(expectedPrefix);
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withTrace("verifyKey"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.orElseSucceed(()=>false));
const generateSignedURL = (url, secretKey, opts)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const parsedURL = new URL(url);
        const ttl = opts.ttlInSeconds ? parseTimeToSeconds(opts.ttlInSeconds) : 60 * 60;
        const expirationTime = Date.now() + ttl * 1000;
        parsedURL.searchParams.append("expires", expirationTime.toString());
        if (opts.data) {
            Object.entries(opts.data).forEach(([key, value])=>{
                if (value == null) return;
                const encoded = encodeURIComponent(value);
                parsedURL.searchParams.append(key, encoded);
            });
        }
        const signature = yield* signPayload(parsedURL.toString(), secretKey);
        parsedURL.searchParams.append("signature", signature);
        return parsedURL.href;
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Micro$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withTrace("generateSignedURL"));
/**
 * Copyright (c) (MIT License) 2015 Andrey Okonetchnikov
 * https://github.com/react-dropzone/attr-accept/blob/master/src/index.js
 */ function accepts(file, acceptedFiles) {
    if (file && acceptedFiles) {
        const acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
        const fileName = file.name ?? "";
        const mimeType = (file.type ?? "").toLowerCase();
        const baseMimeType = mimeType.replace(/\/.*$/, "");
        return acceptedFilesArray.some((type)=>{
            const validType = type.trim().toLowerCase();
            if (validType.startsWith(".")) {
                return fileName.toLowerCase().endsWith(validType);
            } else if (validType.endsWith("/*")) {
                // This is something like a image/* mime type
                return baseMimeType === validType.replace(/\/.*$/, "");
            }
            return mimeType === validType;
        });
    }
    return true;
}
const isPropagationStopped = (event)=>{
    if (typeof event.isPropagationStopped === "function") {
        return event.isPropagationStopped();
    }
    if (typeof event.cancelBubble !== "undefined") {
        return event.cancelBubble;
    }
    return false;
};
// Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with
// that MIME type will always be accepted
function isFileAccepted(file, accept) {
    return file.type === "application/x-moz-file" || accepts(file, accept);
}
function isEnterOrSpace(event) {
    return "key" in event && (event.key === " " || event.key === "Enter") || "keyCode" in event && (event.keyCode === 32 || event.keyCode === 13);
}
const isDefined = (v)=>v != null;
function isValidSize(file, minSize, maxSize) {
    if (!isDefined(file.size)) return true;
    if (isDefined(minSize) && isDefined(maxSize)) {
        return file.size >= minSize && file.size <= maxSize;
    }
    if (isDefined(minSize) && file.size < minSize) return false;
    if (isDefined(maxSize) && file.size > maxSize) return false;
    return true;
}
function isValidQuantity(files, multiple, maxFiles) {
    if (!multiple && files.length > 1) return false;
    if (multiple && maxFiles >= 1 && files.length > maxFiles) return false;
    return true;
}
function allFilesAccepted({ files, accept, minSize, maxSize, multiple, maxFiles }) {
    if (!isValidQuantity(files, multiple, maxFiles)) return false;
    return files.every((file)=>isFileAccepted(file, accept) && isValidSize(file, minSize, maxSize));
}
function isEventWithFiles(event) {
    if (!("dataTransfer" in event && event.dataTransfer !== null)) {
        return !!event.target && "files" in event.target && !!event.target.files;
    }
    // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types
    // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file
    return Array.prototype.some.call(event.dataTransfer?.types, (type)=>type === "Files" || type === "application/x-moz-file");
}
function isIeOrEdge(ua = window.navigator.userAgent) {
    return ua.indexOf("MSIE ") > -1 || ua.indexOf("Trident/") > -1 || ua.indexOf("Edge/") > -1;
}
function isMIMEType(v) {
    return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || /\w+\/[-+.\w]+/g.test(v);
}
function isExt(v) {
    return /^.*\.[\w]+$/.test(v);
}
/**
 * Convert the `{accept}` dropzone prop to an array of MIME types/extensions.
 */ function acceptPropAsAcceptAttr(accept) {
    if (isDefined(accept)) {
        return Object.entries(accept).reduce((a, [mimeType, ext])=>[
                ...a,
                mimeType,
                ...ext
            ], []) // Silently discard invalid entries as pickerOptionsFromAccept warns about these
        .filter((v)=>isMIMEType(v) || isExt(v)).join(",");
    }
    return undefined;
}
const initialState = {
    isFocused: false,
    isFileDialogActive: false,
    isDragActive: false,
    isDragAccept: false,
    isDragReject: false,
    acceptedFiles: []
};
function reducer(state, action) {
    switch(action.type){
        case "focus":
            return {
                ...state,
                isFocused: true
            };
        case "blur":
            return {
                ...state,
                isFocused: false
            };
        case "openDialog":
            return {
                ...initialState,
                isFileDialogActive: true
            };
        case "closeDialog":
            return {
                ...state,
                isFileDialogActive: false
            };
        case "setDraggedFiles":
            return {
                ...state,
                ...action.payload
            };
        case "setFiles":
            return {
                ...state,
                ...action.payload
            };
        case "reset":
            return initialState;
        default:
            return state;
    }
}
;
}}),
"[project]/node_modules/multipasta/dist/esm/internal/contentType.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// taken from https://github.com/fastify/fast-content-type-parse
// under the MIT license
/**
 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
 *
 * parameter     = token "=" ( token / quoted-string )
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
 * obs-text      = %x80-FF
 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
 */ __turbopack_esm__({
    "parse": (()=>parse)
});
const paramRE = /; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu;
/**
 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
 *
 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
 * obs-text    = %x80-FF
 */ const quotedPairRE = /\\([\v\u0020-\u00ff])/gu;
/**
 * RegExp to match type in RFC 7231 sec 3.1.1.1
 *
 * media-type = type "/" subtype
 * type       = token
 * subtype    = token
 */ const mediaTypeRE = /^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u;
const mediaTypeRENoSlash = /^[!#$%&'*+.^\w|~-]+$/u;
// default ContentType to prevent repeated object creation
const defaultContentType = {
    value: "",
    parameters: /*#__PURE__*/ Object.create(null)
};
function parse(header, withoutSlash = false) {
    if (typeof header !== "string") {
        return defaultContentType;
    }
    let index = header.indexOf(";");
    const type = index !== -1 ? header.slice(0, index).trim() : header.trim();
    const mediaRE = withoutSlash ? mediaTypeRENoSlash : mediaTypeRE;
    if (mediaRE.test(type) === false) {
        return defaultContentType;
    }
    const result = {
        value: type.toLowerCase(),
        parameters: Object.create(null)
    };
    // parse parameters
    if (index === -1) {
        return result;
    }
    let key;
    let match;
    let value;
    paramRE.lastIndex = index;
    while(match = paramRE.exec(header)){
        if (match.index !== index) {
            return defaultContentType;
        }
        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];
        if (value[0] === '"') {
            // remove quotes and escapes
            value = value.slice(1, value.length - 1);
            !withoutSlash && quotedPairRE.test(value) && (value = value.replace(quotedPairRE, "$1"));
        }
        result.parameters[key] = value;
    }
    if (index !== header.length) {
        return defaultContentType;
    }
    return result;
} //# sourceMappingURL=contentType.js.map
}}),
"[project]/node_modules/multipasta/dist/esm/internal/headers.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "make": (()=>make)
});
const constMaxPairs = 100;
const constMaxSize = 16 * 1024;
var State;
(function(State) {
    State[State["key"] = 0] = "key";
    State[State["whitespace"] = 1] = "whitespace";
    State[State["value"] = 2] = "value";
})(State || (State = {}));
const constContinue = {
    _tag: "Continue"
};
const constNameChars = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    1
];
const constValueChars = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
];
function make() {
    const decoder = new TextDecoder();
    const state = {
        state: State.key,
        headers: Object.create(null),
        key: "",
        value: undefined,
        crlf: 0,
        previousChunk: undefined,
        pairs: 0,
        size: 0
    };
    function reset(value) {
        state.state = State.key;
        state.headers = Object.create(null);
        state.key = "";
        state.value = undefined;
        state.crlf = 0;
        state.previousChunk = undefined;
        state.pairs = 0;
        state.size = 0;
        return value;
    }
    function concatUint8Array(a, b) {
        const newUint8Array = new Uint8Array(a.length + b.length);
        newUint8Array.set(a);
        newUint8Array.set(b, a.length);
        return newUint8Array;
    }
    function error(reason) {
        return reset({
            _tag: "Failure",
            reason,
            headers: state.headers
        });
    }
    return function write(chunk, start) {
        let endOffset = 0;
        let previousCursor;
        if (state.previousChunk !== undefined) {
            endOffset = state.previousChunk.length;
            previousCursor = endOffset;
            const newChunk = new Uint8Array(chunk.length + endOffset);
            newChunk.set(state.previousChunk);
            newChunk.set(chunk, endOffset);
            state.previousChunk = undefined;
            chunk = newChunk;
        }
        const end = chunk.length;
        outer: while(start < end){
            if (state.state === State.key) {
                let i = start;
                for(; i < end; i++){
                    if (state.size++ > constMaxSize) {
                        return error("HeaderTooLarge");
                    }
                    if (chunk[i] === 58) {
                        state.key += decoder.decode(chunk.subarray(start, i)).toLowerCase();
                        if (state.key.length === 0) {
                            return error("InvalidHeaderName");
                        }
                        if (chunk[i + 1] === 32 && chunk[i + 2] !== 32 && chunk[i + 2] !== 9) {
                            start = i + 2;
                            state.state = State.value;
                            state.size++;
                        } else if (chunk[i + 1] !== 32 && chunk[i + 1] !== 9) {
                            start = i + 1;
                            state.state = State.value;
                        } else {
                            start = i + 1;
                            state.state = State.whitespace;
                        }
                        break;
                    } else if (constNameChars[chunk[i]] !== 1) {
                        return error("InvalidHeaderName");
                    }
                }
                if (i === end) {
                    state.key += decoder.decode(chunk.subarray(start, end)).toLowerCase();
                    return constContinue;
                }
            }
            if (state.state === State.whitespace) {
                for(; start < end; start++){
                    if (state.size++ > constMaxSize) {
                        return error("HeaderTooLarge");
                    }
                    if (chunk[start] !== 32 && chunk[start] !== 9) {
                        state.state = State.value;
                        break;
                    }
                }
                if (start === end) {
                    return constContinue;
                }
            }
            if (state.state === State.value) {
                let i = start;
                if (previousCursor !== undefined) {
                    i = previousCursor;
                    previousCursor = undefined;
                }
                for(; i < end; i++){
                    if (state.size++ > constMaxSize) {
                        return error("HeaderTooLarge");
                    }
                    if (chunk[i] === 13 || state.crlf > 0) {
                        let byte = chunk[i];
                        if (byte === 13 && state.crlf === 0) {
                            state.crlf = 1;
                            i++;
                            state.size++;
                            byte = chunk[i];
                        }
                        if (byte === 10 && state.crlf === 1) {
                            state.crlf = 2;
                            i++;
                            state.size++;
                            byte = chunk[i];
                        }
                        if (byte === 13 && state.crlf === 2) {
                            state.crlf = 3;
                            i++;
                            state.size++;
                            byte = chunk[i];
                        }
                        if (byte === 10 && state.crlf === 3) {
                            state.crlf = 4;
                            i++;
                            state.size++;
                        }
                        if (state.crlf < 4 && i >= end) {
                            state.previousChunk = chunk.subarray(start);
                            return constContinue;
                        } else if (state.crlf >= 2) {
                            state.value = state.value === undefined ? chunk.subarray(start, i - state.crlf) : concatUint8Array(state.value, chunk.subarray(start, i - state.crlf));
                            const value = decoder.decode(state.value);
                            if (state.headers[state.key] === undefined) {
                                state.headers[state.key] = value;
                            } else if (typeof state.headers[state.key] === "string") {
                                state.headers[state.key] = [
                                    state.headers[state.key],
                                    value
                                ];
                            } else {
                                ;
                                state.headers[state.key].push(value);
                            }
                            start = i;
                            state.size--;
                            if (state.crlf !== 4 && state.pairs === constMaxPairs) {
                                return error("TooManyHeaders");
                            } else if (state.crlf === 3) {
                                return error("InvalidHeaderValue");
                            } else if (state.crlf === 4) {
                                return reset({
                                    _tag: "Headers",
                                    headers: state.headers,
                                    endPosition: start - endOffset
                                });
                            }
                            state.pairs++;
                            state.key = "";
                            state.value = undefined;
                            state.crlf = 0;
                            state.state = State.key;
                            continue outer;
                        }
                    } else if (constValueChars[chunk[i]] !== 1) {
                        return error("InvalidHeaderValue");
                    }
                }
                if (i === end) {
                    state.value = state.value === undefined ? chunk.subarray(start, end) : concatUint8Array(state.value, chunk.subarray(start, end));
                    return constContinue;
                }
            }
        }
        if (start > end) {
            state.size += end - start;
        }
        return constContinue;
    };
} //# sourceMappingURL=headers.js.map
}}),
"[project]/node_modules/multipasta/dist/esm/internal/search.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "make": (()=>make)
});
function makeState(needle_) {
    const needle = new TextEncoder().encode(needle_);
    const needleLength = needle.length;
    const indexes = {};
    for(let i = 0; i < needleLength; i++){
        const b = needle[i];
        if (indexes[b] === undefined) indexes[b] = [];
        indexes[b].push(i);
    }
    return {
        needle,
        needleLength,
        indexes,
        firstByte: needle[0],
        previousChunk: undefined,
        previousChunkLength: 0,
        matchIndex: 0
    };
}
function make(needle, callback, seed) {
    const state = makeState(needle);
    if (seed !== undefined) {
        state.previousChunk = seed;
        state.previousChunkLength = seed.length;
    }
    function makeIndexOf() {
        // on node.js use the Buffer api
        if ("Buffer" in globalThis && !("Bun" in globalThis || "Deno" in globalThis)) {
            return function(chunk, needle, fromIndex) {
                return Buffer.prototype.indexOf.call(chunk, needle, fromIndex);
            };
        }
        const skipTable = new Uint8Array(256).fill(state.needle.length);
        for(let i = 0, lastIndex = state.needle.length - 1; i < lastIndex; ++i){
            skipTable[state.needle[i]] = lastIndex - i;
        }
        return function(chunk, needle, fromIndex) {
            const lengthTotal = chunk.length;
            let i = fromIndex + state.needleLength - 1;
            while(i < lengthTotal){
                for(let j = state.needleLength - 1, k = i; j >= 0 && chunk[k] === needle[j]; j--, k--){
                    if (j === 0) return k;
                }
                i += skipTable[chunk[i]];
            }
            return -1;
        };
    }
    const indexOf = makeIndexOf();
    function write(chunk) {
        let chunkLength = chunk.length;
        if (state.previousChunk !== undefined) {
            const newChunk = new Uint8Array(state.previousChunkLength + chunkLength);
            newChunk.set(state.previousChunk);
            newChunk.set(chunk, state.previousChunkLength);
            chunk = newChunk;
            chunkLength = state.previousChunkLength + chunkLength;
            state.previousChunk = undefined;
        }
        if (chunkLength < state.needleLength) {
            state.previousChunk = chunk;
            state.previousChunkLength = chunkLength;
            return;
        }
        let pos = 0;
        while(pos < chunkLength){
            const match = indexOf(chunk, state.needle, pos);
            if (match > -1) {
                if (match > pos) {
                    callback(state.matchIndex, chunk.subarray(pos, match));
                }
                state.matchIndex += 1;
                pos = match + state.needleLength;
                continue;
            } else if (chunk[chunkLength - 1] in state.indexes) {
                const indexes = state.indexes[chunk[chunkLength - 1]];
                let earliestIndex = -1;
                for(let i = 0, len = indexes.length; i < len; i++){
                    const index = indexes[i];
                    if (chunk[chunkLength - 1 - index] === state.firstByte && i > earliestIndex) {
                        earliestIndex = index;
                    }
                }
                if (earliestIndex === -1) {
                    if (pos === 0) {
                        callback(state.matchIndex, chunk);
                    } else {
                        callback(state.matchIndex, chunk.subarray(pos));
                    }
                } else {
                    if (chunkLength - 1 - earliestIndex > pos) {
                        callback(state.matchIndex, chunk.subarray(pos, chunkLength - 1 - earliestIndex));
                    }
                    state.previousChunk = chunk.subarray(chunkLength - 1 - earliestIndex);
                    state.previousChunkLength = earliestIndex + 1;
                }
            } else if (pos === 0) {
                callback(state.matchIndex, chunk);
            } else {
                callback(state.matchIndex, chunk.subarray(pos));
            }
            break;
        }
    }
    function end() {
        if (state.previousChunk !== undefined && state.previousChunk !== seed) {
            callback(state.matchIndex, state.previousChunk);
        }
        state.previousChunk = seed;
        state.previousChunkLength = seed?.length ?? 0;
        state.matchIndex = 0;
    }
    return {
        write,
        end
    };
} //# sourceMappingURL=search.js.map
}}),
"[project]/node_modules/multipasta/dist/esm/internal/multipart.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decodeField": (()=>decodeField),
    "defaultIsFile": (()=>defaultIsFile),
    "make": (()=>make)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$contentType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/multipasta/dist/esm/internal/contentType.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$headers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/multipasta/dist/esm/internal/headers.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$search$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/multipasta/dist/esm/internal/search.js [app-route] (ecmascript)");
;
;
;
var State;
(function(State) {
    State[State["headers"] = 0] = "headers";
    State[State["body"] = 1] = "body";
})(State || (State = {}));
const errInvalidDisposition = {
    _tag: "InvalidDisposition"
};
const errEndNotReached = {
    _tag: "EndNotReached"
};
const errMaxParts = {
    _tag: "ReachedLimit",
    limit: "MaxParts"
};
const errMaxTotalSize = {
    _tag: "ReachedLimit",
    limit: "MaxTotalSize"
};
const errMaxPartSize = {
    _tag: "ReachedLimit",
    limit: "MaxPartSize"
};
const errMaxFieldSize = {
    _tag: "ReachedLimit",
    limit: "MaxFieldSize"
};
const constCR = /*#__PURE__*/ new TextEncoder().encode("\r\n");
function defaultIsFile(info) {
    return info.filename !== undefined || info.contentType === "application/octet-stream";
}
function parseBoundary(headers) {
    const contentType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$contentType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.parse(headers["content-type"]);
    return contentType.parameters.boundary;
}
function noopOnChunk(_chunk) {}
function make({ headers, onFile: onPart, onField, onError, onDone, isFile = defaultIsFile, maxParts = Infinity, maxTotalSize = Infinity, maxPartSize = Infinity, maxFieldSize = 1024 * 1024 }) {
    const boundary = parseBoundary(headers);
    if (boundary === undefined) {
        onError({
            _tag: "InvalidBoundary"
        });
        return {
            write: noopOnChunk,
            end () {}
        };
    }
    const state = {
        state: State.headers,
        index: 0,
        parts: 0,
        onChunk: noopOnChunk,
        info: undefined,
        headerSkip: 0,
        partSize: 0,
        totalSize: 0,
        isFile: false,
        fieldChunks: [],
        fieldSize: 0
    };
    function skipBody() {
        state.state = State.body;
        state.isFile = true;
        state.onChunk = noopOnChunk;
    }
    const headerParser = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$headers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.make();
    const split = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$search$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.make(`\r\n--${boundary}`, function(index, chunk) {
        if (index === 0) {
            // data before the first boundary
            skipBody();
            return;
        } else if (index !== state.index) {
            if (state.index > 0) {
                if (state.isFile) {
                    state.onChunk(null);
                    state.partSize = 0;
                } else {
                    if (state.fieldChunks.length === 1) {
                        onField(state.info, state.fieldChunks[0]);
                    } else {
                        const buf = new Uint8Array(state.fieldSize);
                        let offset = 0;
                        for(let i = 0; i < state.fieldChunks.length; i++){
                            const chunk = state.fieldChunks[i];
                            buf.set(chunk, offset);
                            offset += chunk.length;
                        }
                        onField(state.info, buf);
                    }
                    state.fieldSize = 0;
                    state.fieldChunks = [];
                }
            }
            state.state = State.headers;
            state.index = index;
            state.headerSkip = 2; // skip the first \r\n
            // trailing --
            if (chunk[0] === 45 && chunk[1] === 45) {
                return onDone();
            }
            state.parts++;
            if (state.parts > maxParts) {
                onError(errMaxParts);
            }
        }
        if ((state.partSize += chunk.length) > maxPartSize) {
            onError(errMaxPartSize);
        }
        if (state.state === State.headers) {
            const result = headerParser(chunk, state.headerSkip);
            state.headerSkip = 0;
            if (result._tag === "Continue") {
                return;
            } else if (result._tag === "Failure") {
                skipBody();
                return onError({
                    _tag: "BadHeaders",
                    error: result
                });
            }
            const contentType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$contentType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.parse(result.headers["content-type"]);
            const contentDisposition = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$contentType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.parse(result.headers["content-disposition"], true);
            if ("form-data" === contentDisposition.value && !("name" in contentDisposition.parameters)) {
                skipBody();
                return onError(errInvalidDisposition);
            }
            let encodedFilename;
            if ("filename*" in contentDisposition.parameters) {
                const parts = contentDisposition.parameters["filename*"].split("''");
                if (parts.length === 2) {
                    encodedFilename = decodeURIComponent(parts[1]);
                }
            }
            state.info = {
                name: contentDisposition.parameters.name ?? "",
                filename: encodedFilename ?? contentDisposition.parameters.filename,
                contentType: contentType.value === "" ? contentDisposition.parameters.filename !== undefined ? "application/octet-stream" : "text/plain" : contentType.value,
                contentTypeParameters: contentType.parameters,
                contentDisposition: contentDisposition.value,
                contentDispositionParameters: contentDisposition.parameters,
                headers: result.headers
            };
            state.state = State.body;
            state.isFile = isFile(state.info);
            if (state.isFile) {
                state.onChunk = onPart(state.info);
            }
            if (result.endPosition < chunk.length) {
                if (state.isFile) {
                    state.onChunk(chunk.subarray(result.endPosition));
                } else {
                    const buf = chunk.subarray(result.endPosition);
                    if ((state.fieldSize += buf.length) > maxFieldSize) {
                        onError(errMaxFieldSize);
                    }
                    state.fieldChunks.push(buf);
                }
            }
        } else if (state.isFile) {
            state.onChunk(chunk);
        } else {
            if ((state.fieldSize += chunk.length) > maxFieldSize) {
                onError(errMaxFieldSize);
            }
            state.fieldChunks.push(chunk);
        }
    }, constCR);
    return {
        write (chunk) {
            if ((state.totalSize += chunk.length) > maxTotalSize) {
                return onError(errMaxTotalSize);
            }
            return split.write(chunk);
        },
        end () {
            split.end();
            if (state.state === State.body) {
                onError(errEndNotReached);
            }
            state.state = State.headers;
            state.index = 0;
            state.parts = 0;
            state.onChunk = noopOnChunk;
            state.info = undefined;
            state.totalSize = 0;
            state.partSize = 0;
            state.fieldChunks = [];
            state.fieldSize = 0;
        }
    };
}
const utf8Decoder = /*#__PURE__*/ new TextDecoder("utf-8");
function getDecoder(charset) {
    if (charset === "utf-8" || charset === "utf8" || charset === "") {
        return utf8Decoder;
    }
    try {
        return new TextDecoder(charset);
    } catch (error) {
        return utf8Decoder;
    }
}
function decodeField(info, value) {
    return getDecoder(info.contentTypeParameters.charset ?? "utf-8").decode(value);
} //# sourceMappingURL=multipart.js.map
}}),
"[project]/node_modules/multipasta/dist/esm/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decodeField": (()=>decodeField),
    "defaultIsFile": (()=>defaultIsFile),
    "make": (()=>make)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$multipart$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/multipasta/dist/esm/internal/multipart.js [app-route] (ecmascript)");
;
const make = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$multipart$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.make;
const defaultIsFile = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$multipart$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.defaultIsFile;
const decodeField = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$multipasta$2f$dist$2f$esm$2f$internal$2f$multipart$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.decodeField; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/find-my-way-ts/dist/esm/QueryString.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @since 1.0.0
 */ // Taken from https://github.com/anonrig/fast-querystring under MIT License
__turbopack_esm__({
    "parse": (()=>parse),
    "stringify": (()=>stringify)
});
const plusRegex = /\+/g;
const Empty = function() {};
Empty.prototype = /*#__PURE__*/ Object.create(null);
function parse(input) {
    // Optimization: Use new Empty() instead of Object.create(null) for performance
    // v8 has a better optimization for initializing functions compared to Object
    const result = new Empty();
    if (typeof input !== "string") {
        return result;
    }
    const inputLength = input.length;
    let key = "";
    let value = "";
    let startingIndex = -1;
    let equalityIndex = -1;
    let shouldDecodeKey = false;
    let shouldDecodeValue = false;
    let keyHasPlus = false;
    let valueHasPlus = false;
    let hasBothKeyValuePair = false;
    let c = 0;
    // Have a boundary of input.length + 1 to access last pair inside the loop.
    for(let i = 0; i < inputLength + 1; i++){
        c = i !== inputLength ? input.charCodeAt(i) : 38;
        // Handle '&' and end of line to pass the current values to result
        if (c === 38) {
            hasBothKeyValuePair = equalityIndex > startingIndex;
            // Optimization: Reuse equality index to store the end of key
            if (!hasBothKeyValuePair) {
                equalityIndex = i;
            }
            key = input.slice(startingIndex + 1, equalityIndex);
            // Add key/value pair only if the range size is greater than 1; a.k.a. contains at least "="
            if (hasBothKeyValuePair || key.length > 0) {
                // Optimization: Replace '+' with space
                if (keyHasPlus) {
                    key = key.replace(plusRegex, " ");
                }
                // Optimization: Do not decode if it's not necessary.
                if (shouldDecodeKey) {
                    key = decodeURIComponent(key) || key;
                }
                if (hasBothKeyValuePair) {
                    value = input.slice(equalityIndex + 1, i);
                    if (valueHasPlus) {
                        value = value.replace(plusRegex, " ");
                    }
                    if (shouldDecodeValue) {
                        value = decodeURIComponent(value) || value;
                    }
                }
                const currentValue = result[key];
                if (currentValue === undefined) {
                    result[key] = value;
                } else {
                    // Optimization: value.pop is faster than Array.isArray(value)
                    if (currentValue.pop) {
                        currentValue.push(value);
                    } else {
                        result[key] = [
                            currentValue,
                            value
                        ];
                    }
                }
            }
            // Reset reading key value pairs
            value = "";
            startingIndex = i;
            equalityIndex = i;
            shouldDecodeKey = false;
            shouldDecodeValue = false;
            keyHasPlus = false;
            valueHasPlus = false;
        } else if (c === 61) {
            if (equalityIndex <= startingIndex) {
                equalityIndex = i;
            } else {
                shouldDecodeValue = true;
            }
        } else if (c === 43) {
            if (equalityIndex > startingIndex) {
                valueHasPlus = true;
            } else {
                keyHasPlus = true;
            }
        } else if (c === 37) {
            if (equalityIndex > startingIndex) {
                shouldDecodeValue = true;
            } else {
                shouldDecodeKey = true;
            }
        }
    }
    return result;
}
function getAsPrimitive(value) {
    const type = typeof value;
    if (type === "string") {
        // Length check is handled inside encodeString function
        return encodeString(value);
    } else if (type === "bigint" || type === "boolean") {
        return "" + value;
    } else if (type === "number" && Number.isFinite(value)) {
        return value < 1e21 ? "" + value : encodeString("" + value);
    }
    return "";
}
function stringify(input) {
    let result = "";
    if (input === null || typeof input !== "object") {
        return result;
    }
    const separator = "&";
    const keys = Object.keys(input);
    const keyLength = keys.length;
    let valueLength = 0;
    for(let i = 0; i < keyLength; i++){
        const key = keys[i];
        const value = input[key];
        const encodedKey = encodeString(key) + "=";
        if (i) {
            result += separator;
        }
        if (Array.isArray(value)) {
            valueLength = value.length;
            for(let j = 0; j < valueLength; j++){
                if (j) {
                    result += separator;
                }
                // Optimization: Dividing into multiple lines improves the performance.
                // Since v8 does not need to care about the '+' character if it was one-liner.
                result += encodedKey;
                result += getAsPrimitive(value[j]);
            }
        } else {
            result += encodedKey;
            result += getAsPrimitive(value);
        }
    }
    return result;
}
// -----------------------------------------------------------------------------
// This has been taken from Node.js project.
// Full implementation can be found from https://github.com/nodejs/node/blob/main/lib/internal/querystring.js
const hexTable = /*#__PURE__*/ Array.from({
    length: 256
}, (_, i)=>"%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
// These characters do not need escaping when generating query strings:
// ! - . _ ~
// ' ( ) *
// digits
// alpha (uppercase)
// alpha (lowercase)
// biome-ignore format: the array should not be formatted
const noEscape = /*#__PURE__*/ new Int8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    // 0 - 15
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    // 16 - 31
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    // 32 - 47
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    // 48 - 63
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    // 64 - 79
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    1,
    // 80 - 95
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    // 96 - 111
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    1,
    0 // 112 - 127
]);
function encodeString(str) {
    const len = str.length;
    if (len === 0) return "";
    let out = "";
    let lastPos = 0;
    let i = 0;
    outer: for(; i < len; i++){
        let c = str.charCodeAt(i);
        // ASCII
        while(c < 0x80){
            if (noEscape[c] !== 1) {
                if (lastPos < i) out += str.slice(lastPos, i);
                lastPos = i + 1;
                out += hexTable[c];
            }
            if (++i === len) break outer;
            c = str.charCodeAt(i);
        }
        if (lastPos < i) out += str.slice(lastPos, i);
        // Multi-byte characters ...
        if (c < 0x800) {
            lastPos = i + 1;
            out += hexTable[0xc0 | c >> 6] + hexTable[0x80 | c & 0x3f];
            continue;
        }
        if (c < 0xd800 || c >= 0xe000) {
            lastPos = i + 1;
            out += hexTable[0xe0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3f] + hexTable[0x80 | c & 0x3f];
            continue;
        }
        // Surrogate pair
        ++i;
        // This branch should never happen because all URLSearchParams entries
        // should already be converted to USVString. But, included for
        // completion's sake anyway.
        if (i >= len) {
            throw new Error("URI malformed");
        }
        const c2 = str.charCodeAt(i) & 0x3ff;
        lastPos = i + 1;
        c = 0x10000 + ((c & 0x3ff) << 10 | c2);
        out += hexTable[0xf0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3f] + hexTable[0x80 | c >> 6 & 0x3f] + hexTable[0x80 | c & 0x3f];
    }
    if (lastPos === 0) return str;
    if (lastPos < len) return out + str.slice(lastPos);
    return out;
} //# sourceMappingURL=QueryString.js.map
}}),
"[project]/node_modules/find-my-way-ts/dist/esm/internal/router.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "make": (()=>make)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$find$2d$my$2d$way$2d$ts$2f$dist$2f$esm$2f$QueryString$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/find-my-way-ts/dist/esm/QueryString.js [app-route] (ecmascript)");
;
const FULL_PATH_REGEXP = /^https?:\/\/.*?\//;
const OPTIONAL_PARAM_REGEXP = /(\/:[^/()]*?)\?(\/?)/;
const make = (options = {})=>new RouterImpl(options);
class RouterImpl {
    constructor(options = {}){
        this.options = {
            ignoreTrailingSlash: true,
            ignoreDuplicateSlashes: true,
            caseSensitive: false,
            maxParamLength: 100,
            ...options
        };
    }
    options;
    routes = [];
    trees = {};
    on(method, path, handler) {
        const optionalParamMatch = path.match(OPTIONAL_PARAM_REGEXP);
        if (optionalParamMatch && optionalParamMatch.index !== undefined) {
            assert(path.length === optionalParamMatch.index + optionalParamMatch[0].length, "Optional Parameter needs to be the last parameter of the path");
            const pathFull = path.replace(OPTIONAL_PARAM_REGEXP, "$1$2");
            const pathOptional = path.replace(OPTIONAL_PARAM_REGEXP, "$2");
            this.on(method, pathFull, handler);
            this.on(method, pathOptional, handler);
            return;
        }
        if (this.options.ignoreDuplicateSlashes) {
            path = removeDuplicateSlashes(path);
        }
        if (this.options.ignoreTrailingSlash) {
            path = trimLastSlash(path);
        }
        const methods = typeof method === "string" ? [
            method
        ] : method;
        for (const method of methods){
            this._on(method, path, handler);
        }
    }
    all(path, handler) {
        this.on(httpMethods, path, handler);
    }
    _on(method, path, handler) {
        if (this.trees[method] === undefined) {
            this.trees[method] = new StaticNode("/");
        }
        let pattern = path;
        if (pattern === "*" && this.trees[method].prefix.length !== 0) {
            const currentRoot = this.trees[method];
            this.trees[method] = new StaticNode("");
            this.trees[method].staticChildren["/"] = currentRoot;
        }
        let parentNodePathIndex = this.trees[method].prefix.length;
        let currentNode = this.trees[method];
        const params = [];
        for(let i = 0; i <= pattern.length; i++){
            if (pattern.charCodeAt(i) === 58 && pattern.charCodeAt(i + 1) === 58) {
                // It's a double colon
                i++;
                continue;
            }
            const isParametricNode = pattern.charCodeAt(i) === 58 && pattern.charCodeAt(i + 1) !== 58;
            const isWildcardNode = pattern.charCodeAt(i) === 42;
            if (isParametricNode || isWildcardNode || i === pattern.length && i !== parentNodePathIndex) {
                let staticNodePath = pattern.slice(parentNodePathIndex, i);
                if (!this.options.caseSensitive) {
                    staticNodePath = staticNodePath.toLowerCase();
                }
                staticNodePath = staticNodePath.split("::").join(":");
                staticNodePath = staticNodePath.split("%").join("%25");
                // add the static part of the route to the tree
                currentNode = currentNode.createStaticChild(staticNodePath);
            }
            if (isParametricNode) {
                let isRegexNode = false;
                const regexps = [];
                let lastParamStartIndex = i + 1;
                for(let j = lastParamStartIndex;; j++){
                    const charCode = pattern.charCodeAt(j);
                    const isRegexParam = charCode === 40;
                    const isStaticPart = charCode === 45 || charCode === 46;
                    const isEndOfNode = charCode === 47 || j === pattern.length;
                    if (isRegexParam || isStaticPart || isEndOfNode) {
                        const paramName = pattern.slice(lastParamStartIndex, j);
                        params.push(paramName);
                        isRegexNode = isRegexNode || isRegexParam || isStaticPart;
                        if (isRegexParam) {
                            const endOfRegexIndex = getClosingParenthensePosition(pattern, j);
                            const regexString = pattern.slice(j, endOfRegexIndex + 1);
                            regexps.push(trimRegExpStartAndEnd(regexString));
                            j = endOfRegexIndex + 1;
                        } else {
                            regexps.push("(.*?)");
                        }
                        const staticPartStartIndex = j;
                        for(; j < pattern.length; j++){
                            const charCode = pattern.charCodeAt(j);
                            if (charCode === 47) break;
                            if (charCode === 58) {
                                const nextCharCode = pattern.charCodeAt(j + 1);
                                if (nextCharCode === 58) j++;
                                else break;
                            }
                        }
                        let staticPart = pattern.slice(staticPartStartIndex, j);
                        if (staticPart) {
                            staticPart = staticPart.split("::").join(":");
                            staticPart = staticPart.split("%").join("%25");
                            regexps.push(escapeRegExp(staticPart));
                        }
                        lastParamStartIndex = j + 1;
                        if (isEndOfNode || pattern.charCodeAt(j) === 47 || j === pattern.length) {
                            const nodePattern = isRegexNode ? "()" + staticPart : staticPart;
                            const nodePath = pattern.slice(i, j);
                            pattern = pattern.slice(0, i + 1) + nodePattern + pattern.slice(j);
                            i += nodePattern.length;
                            const regex = isRegexNode ? new RegExp("^" + regexps.join("") + "$") : undefined;
                            currentNode = currentNode.createParametricChild(regex, staticPart, nodePath);
                            parentNodePathIndex = i + 1;
                            break;
                        }
                    }
                }
            } else if (isWildcardNode) {
                // add the wildcard parameter
                params.push("*");
                currentNode = currentNode.createWildcardChild();
                parentNodePathIndex = i + 1;
                if (i !== pattern.length - 1) {
                    throw new Error("Wildcard must be the last character in the route");
                }
            }
        }
        if (!this.options.caseSensitive) {
            pattern = pattern.toLowerCase();
        }
        if (pattern === "*") {
            pattern = "/*";
        }
        for (const existRoute of this.routes){
            if (existRoute.method === method && existRoute.pattern === pattern) {
                throw new Error(`Method '${method}' already declared for route '${pattern}'`);
            }
        }
        const route = {
            method,
            path,
            pattern,
            params,
            handler
        };
        this.routes.push(route);
        currentNode.addRoute(route);
    }
    has(method, path) {
        const node = this.trees[method];
        if (node === undefined) {
            return false;
        }
        const staticNode = node.getStaticChild(path);
        if (staticNode === undefined) {
            return false;
        }
        return staticNode.isLeafNode;
    }
    find(method, path) {
        let currentNode = this.trees[method];
        if (currentNode === undefined) return undefined;
        if (path.charCodeAt(0) !== 47) {
            // 47 is '/'
            path = path.replace(FULL_PATH_REGEXP, "/");
        }
        // This must be run before sanitizeUrl as the resulting function
        // .sliceParameter must be constructed with same URL string used
        // throughout the rest of this function.
        if (this.options.ignoreDuplicateSlashes) {
            path = removeDuplicateSlashes(path);
        }
        let sanitizedUrl;
        let querystring;
        let shouldDecodeParam;
        try {
            sanitizedUrl = safeDecodeURI(path);
            path = sanitizedUrl.path;
            querystring = sanitizedUrl.querystring;
            shouldDecodeParam = sanitizedUrl.shouldDecodeParam;
        } catch (error) {
            return undefined;
        }
        if (this.options.ignoreTrailingSlash) {
            path = trimLastSlash(path);
        }
        const originPath = path;
        if (this.options.caseSensitive === false) {
            path = path.toLowerCase();
        }
        const maxParamLength = this.options.maxParamLength;
        let pathIndex = currentNode.prefix.length;
        const params = [];
        const pathLen = path.length;
        const brothersNodesStack = [];
        while(true){
            if (pathIndex === pathLen && currentNode.isLeafNode) {
                const handle = currentNode.handlerStorage?.find();
                if (handle !== undefined) {
                    return {
                        handler: handle.handler,
                        params: handle.createParams(params),
                        searchParams: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$find$2d$my$2d$way$2d$ts$2f$dist$2f$esm$2f$QueryString$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.parse(querystring)
                    };
                }
            }
            let node = currentNode.getNextNode(path, pathIndex, brothersNodesStack, params.length);
            if (node === undefined) {
                if (brothersNodesStack.length === 0) {
                    return undefined;
                }
                const brotherNodeState = brothersNodesStack.pop();
                pathIndex = brotherNodeState.brotherPathIndex;
                params.splice(brotherNodeState.paramsCount);
                node = brotherNodeState.brotherNode;
            }
            currentNode = node;
            // static route
            if (currentNode._tag === "StaticNode") {
                pathIndex += currentNode.prefix.length;
                continue;
            }
            if (currentNode._tag === "WildcardNode") {
                let param = originPath.slice(pathIndex);
                if (shouldDecodeParam) {
                    param = safeDecodeURIComponent(param);
                }
                params.push(param);
                pathIndex = pathLen;
                continue;
            }
            if (currentNode._tag === "ParametricNode") {
                let paramEndIndex = originPath.indexOf("/", pathIndex);
                if (paramEndIndex === -1) {
                    paramEndIndex = pathLen;
                }
                let param = originPath.slice(pathIndex, paramEndIndex);
                if (shouldDecodeParam) {
                    param = safeDecodeURIComponent(param);
                }
                if (currentNode.regex !== undefined) {
                    const matchedParameters = currentNode.regex.exec(param);
                    if (matchedParameters === null) continue;
                    for(let i = 1; i < matchedParameters.length; i++){
                        const matchedParam = matchedParameters[i];
                        if (matchedParam.length > maxParamLength) {
                            return undefined;
                        }
                        params.push(matchedParam);
                    }
                } else {
                    if (param.length > maxParamLength) {
                        return undefined;
                    }
                    params.push(param);
                }
                pathIndex = paramEndIndex;
            }
        }
    }
}
class HandlerStorage {
    handlers = [];
    unconstrainedHandler;
    find() {
        return this.unconstrainedHandler;
    }
    add(route) {
        const handler = {
            params: route.params,
            handler: route.handler,
            createParams: compileCreateParams(route.params)
        };
        this.handlers.push(handler);
        this.unconstrainedHandler = this.handlers[0];
    }
}
class NodeBase {
    isLeafNode = false;
    routes;
    handlerStorage;
    addRoute(route) {
        if (this.routes === undefined) {
            this.routes = [
                route
            ];
        } else {
            this.routes.push(route);
        }
        if (this.handlerStorage === undefined) {
            this.handlerStorage = new HandlerStorage();
        }
        this.isLeafNode = true;
        this.handlerStorage.add(route);
    }
}
class ParentNode extends NodeBase {
    staticChildren = {};
    findStaticMatchingChild(path, pathIndex) {
        const staticChild = this.staticChildren[path.charAt(pathIndex)];
        if (staticChild === undefined || !staticChild.matchPrefix(path, pathIndex)) {
            return undefined;
        }
        return staticChild;
    }
    getStaticChild(path, pathIndex = 0) {
        if (path.length === pathIndex) {
            return this;
        }
        const staticChild = this.findStaticMatchingChild(path, pathIndex);
        if (staticChild === undefined) {
            return undefined;
        }
        return staticChild.getStaticChild(path, pathIndex + staticChild.prefix.length);
    }
    createStaticChild(path) {
        if (path.length === 0) {
            return this;
        }
        let staticChild = this.staticChildren[path.charAt(0)];
        if (staticChild) {
            let i = 1;
            for(; i < staticChild.prefix.length; i++){
                if (path.charCodeAt(i) !== staticChild.prefix.charCodeAt(i)) {
                    staticChild = staticChild.split(this, i);
                    break;
                }
            }
            return staticChild.createStaticChild(path.slice(i));
        }
        const label = path.charAt(0);
        this.staticChildren[label] = new StaticNode(path);
        return this.staticChildren[label];
    }
}
class StaticNode extends ParentNode {
    _tag = "StaticNode";
    constructor(prefix){
        super();
        this.setPrefix(prefix);
    }
    prefix;
    matchPrefix;
    parametricChildren = [];
    wildcardChild;
    setPrefix(prefix) {
        this.prefix = prefix;
        if (prefix.length === 1) {
            this.matchPrefix = (_path, _pathIndex)=>true;
        } else {
            const len = prefix.length;
            this.matchPrefix = function(path, pathIndex) {
                for(let i = 1; i < len; i++){
                    if (path.charCodeAt(pathIndex + i) !== this.prefix.charCodeAt(i)) {
                        return false;
                    }
                }
                return true;
            };
        }
    }
    getParametricChild(regex) {
        if (regex === undefined) {
            return this.parametricChildren.find((child)=>child.isRegex === false);
        }
        const source = regex.source;
        return this.parametricChildren.find((child)=>{
            if (child.regex === undefined) {
                return false;
            }
            return child.regex.source === source;
        });
    }
    createParametricChild(regex, staticSuffix, nodePath) {
        let child = this.getParametricChild(regex);
        if (child !== undefined) {
            child.nodePaths.add(nodePath);
            return child;
        }
        child = new ParametricNode(regex, staticSuffix, nodePath);
        this.parametricChildren.push(child);
        this.parametricChildren.sort((child1, child2)=>{
            if (!child1.isRegex) return 1;
            if (!child2.isRegex) return -1;
            if (child1.staticSuffix === undefined) return 1;
            if (child2.staticSuffix === undefined) return -1;
            if (child2.staticSuffix.endsWith(child1.staticSuffix)) return 1;
            if (child1.staticSuffix.endsWith(child2.staticSuffix)) return -1;
            return 0;
        });
        return child;
    }
    createWildcardChild() {
        if (this.wildcardChild === undefined) {
            this.wildcardChild = new WildcardNode();
        }
        return this.wildcardChild;
    }
    split(parentNode, length) {
        const parentPrefix = this.prefix.slice(0, length);
        const childPrefix = this.prefix.slice(length);
        this.setPrefix(childPrefix);
        const staticNode = new StaticNode(parentPrefix);
        staticNode.staticChildren[childPrefix.charAt(0)] = this;
        parentNode.staticChildren[parentPrefix.charAt(0)] = staticNode;
        return staticNode;
    }
    getNextNode(path, pathIndex, nodeStack, paramsCount) {
        let node = this.findStaticMatchingChild(path, pathIndex);
        let parametricBrotherNodeIndex = 0;
        if (node === undefined) {
            if (this.parametricChildren.length === 0) {
                return this.wildcardChild;
            }
            node = this.parametricChildren[0];
            parametricBrotherNodeIndex = 1;
        }
        if (this.wildcardChild !== undefined) {
            nodeStack.push({
                paramsCount,
                brotherPathIndex: pathIndex,
                brotherNode: this.wildcardChild
            });
        }
        for(let i = this.parametricChildren.length - 1; i >= parametricBrotherNodeIndex; i--){
            nodeStack.push({
                paramsCount,
                brotherPathIndex: pathIndex,
                brotherNode: this.parametricChildren[i]
            });
        }
        return node;
    }
}
class ParametricNode extends ParentNode {
    regex;
    staticSuffix;
    _tag = "ParametricNode";
    constructor(regex, staticSuffix, nodePath){
        super();
        this.regex = regex;
        this.staticSuffix = staticSuffix;
        this.isRegex = !!regex;
        this.nodePaths = new Set([
            nodePath
        ]);
    }
    isRegex;
    nodePaths;
    getNextNode(path, pathIndex) {
        return this.findStaticMatchingChild(path, pathIndex);
    }
}
class WildcardNode extends NodeBase {
    _tag = "WildcardNode";
    getNextNode(_path, _pathIndex, _nodeStack, _paramsCount) {
        return undefined;
    }
}
const assert = (condition, message)=>{
    if (!condition) {
        throw new Error(message);
    }
};
function removeDuplicateSlashes(path) {
    return path.replace(/\/\/+/g, "/");
}
function trimLastSlash(path) {
    if (path.length > 1 && path.charCodeAt(path.length - 1) === 47) {
        return path.slice(0, -1);
    }
    return path;
}
function compileCreateParams(params) {
    const len = params.length;
    return function(paramsArray) {
        const paramsObject = {};
        for(let i = 0; i < len; i++){
            paramsObject[params[i]] = paramsArray[i];
        }
        return paramsObject;
    };
}
function getClosingParenthensePosition(path, idx) {
    // `path.indexOf()` will always return the first position of the closing parenthese,
    // but it's inefficient for grouped or wrong regexp expressions.
    // see issues #62 and #63 for more info
    let parentheses = 1;
    while(idx < path.length){
        idx++;
        // ignore skipped chars
        if (path[idx] === "\\") {
            idx++;
            continue;
        }
        if (path[idx] === ")") {
            parentheses--;
        } else if (path[idx] === "(") {
            parentheses++;
        }
        if (!parentheses) return idx;
    }
    throw new TypeError('Invalid regexp expression in "' + path + '"');
}
function trimRegExpStartAndEnd(regexString) {
    // removes chars that marks start "^" and end "$" of regexp
    if (regexString.charCodeAt(1) === 94) {
        regexString = regexString.slice(0, 1) + regexString.slice(2);
    }
    if (regexString.charCodeAt(regexString.length - 2) === 36) {
        regexString = regexString.slice(0, regexString.length - 2) + regexString.slice(regexString.length - 1);
    }
    return regexString;
}
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
// It must spot all the chars where decodeURIComponent(x) !== decodeURI(x)
// The chars are: # $ & + , / : ; = ? @
function decodeComponentChar(highCharCode, lowCharCode) {
    if (highCharCode === 50) {
        if (lowCharCode === 53) return "%";
        if (lowCharCode === 51) return "#";
        if (lowCharCode === 52) return "$";
        if (lowCharCode === 54) return "&";
        if (lowCharCode === 66) return "+";
        if (lowCharCode === 98) return "+";
        if (lowCharCode === 67) return ",";
        if (lowCharCode === 99) return ",";
        if (lowCharCode === 70) return "/";
        if (lowCharCode === 102) return "/";
        return undefined;
    }
    if (highCharCode === 51) {
        if (lowCharCode === 65) return ":";
        if (lowCharCode === 97) return ":";
        if (lowCharCode === 66) return ";";
        if (lowCharCode === 98) return ";";
        if (lowCharCode === 68) return "=";
        if (lowCharCode === 100) return "=";
        if (lowCharCode === 70) return "?";
        if (lowCharCode === 102) return "?";
        return undefined;
    }
    if (highCharCode === 52 && lowCharCode === 48) {
        return "@";
    }
    return undefined;
}
function safeDecodeURI(path) {
    let shouldDecode = false;
    let shouldDecodeParam = false;
    let querystring = "";
    for(let i = 1; i < path.length; i++){
        const charCode = path.charCodeAt(i);
        if (charCode === 37) {
            const highCharCode = path.charCodeAt(i + 1);
            const lowCharCode = path.charCodeAt(i + 2);
            if (decodeComponentChar(highCharCode, lowCharCode) === undefined) {
                shouldDecode = true;
            } else {
                shouldDecodeParam = true;
                // %25 - encoded % char. We need to encode one more time to prevent double decoding
                if (highCharCode === 50 && lowCharCode === 53) {
                    shouldDecode = true;
                    path = path.slice(0, i + 1) + "25" + path.slice(i + 1);
                    i += 2;
                }
                i += 2;
            }
        // Some systems do not follow RFC and separate the path and query
        // string with a `;` character (code 59), e.g. `/foo;jsessionid=123456`.
        // Thus, we need to split on `;` as well as `?` and `#`.
        } else if (charCode === 63 || charCode === 59 || charCode === 35) {
            querystring = path.slice(i + 1);
            path = path.slice(0, i);
            break;
        }
    }
    const decodedPath = shouldDecode ? decodeURI(path) : path;
    return {
        path: decodedPath,
        querystring,
        shouldDecodeParam
    };
}
function safeDecodeURIComponent(uriComponent) {
    const startIndex = uriComponent.indexOf("%");
    if (startIndex === -1) return uriComponent;
    let decoded = "";
    let lastIndex = startIndex;
    for(let i = startIndex; i < uriComponent.length; i++){
        if (uriComponent.charCodeAt(i) === 37) {
            const highCharCode = uriComponent.charCodeAt(i + 1);
            const lowCharCode = uriComponent.charCodeAt(i + 2);
            const decodedChar = decodeComponentChar(highCharCode, lowCharCode);
            decoded += uriComponent.slice(lastIndex, i) + decodedChar;
            lastIndex = i + 3;
        }
    }
    return uriComponent.slice(0, startIndex) + decoded + uriComponent.slice(lastIndex);
}
const httpMethods = [
    "ACL",
    "BIND",
    "CHECKOUT",
    "CONNECT",
    "COPY",
    "DELETE",
    "GET",
    "HEAD",
    "LINK",
    "LOCK",
    "M-SEARCH",
    "MERGE",
    "MKACTIVITY",
    "MKCALENDAR",
    "MKCOL",
    "MOVE",
    "NOTIFY",
    "OPTIONS",
    "PATCH",
    "POST",
    "PROPFIND",
    "PROPPATCH",
    "PURGE",
    "PUT",
    "REBIND",
    "REPORT",
    "SEARCH",
    "SOURCE",
    "SUBSCRIBE",
    "TRACE",
    "UNBIND",
    "UNLINK",
    "UNLOCK",
    "UNSUBSCRIBE"
]; //# sourceMappingURL=router.js.map
}}),
"[project]/node_modules/find-my-way-ts/dist/esm/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * @since 1.0.0
 */ __turbopack_esm__({
    "make": (()=>make)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$find$2d$my$2d$way$2d$ts$2f$dist$2f$esm$2f$internal$2f$router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/find-my-way-ts/dist/esm/internal/router.js [app-route] (ecmascript)");
;
const make = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$find$2d$my$2d$way$2d$ts$2f$dist$2f$esm$2f$internal$2f$router$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.make; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/uploadthing/internal/types.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/**
 * Marker used to append a `customId` to the incoming file data in `.middleware()`
 * @example
 * ```ts
 * .middleware((opts) => {
 *   return {
 *     [UTFiles]: opts.files.map((file) => ({
 *       ...file,
 *       customId: generateId(),
 *     }))
 *   };
 * })
 * ```
 */ __turbopack_esm__({
    "UTFiles": (()=>UTFiles)
});
const UTFiles = Symbol("uploadthing-custom-id-symbol");
;
}}),
"[project]/node_modules/uploadthing/next/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "createRouteHandler": (()=>createRouteHandler),
    "createUploadthing": (()=>createUploadthing)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Effect.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Schema.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@uploadthing/shared/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ConfigProvider$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/ConfigProvider.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Config.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Stream$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Stream.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$LogLevel$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/LogLevel.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Logger$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Logger.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Layer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Layer.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Data$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Data.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Cause$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Cause.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Runtime$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Runtime.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$FetchHttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__FetchHttpClient$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/FetchHttpClient.js [app-route] (ecmascript) <export * as FetchHttpClient>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$FiberRef$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/FiberRef.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$Headers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Headers$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/Headers.js [app-route] (ecmascript) <export * as Headers>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ManagedRuntime$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/ManagedRuntime.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Context$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Context.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpApp$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpApp$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/HttpApp.js [app-route] (ecmascript) <export * as HttpApp>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerResponse$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/HttpServerResponse.js [app-route] (ecmascript) <export * as HttpServerResponse>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerRequest$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/HttpServerRequest.js [app-route] (ecmascript) <export * as HttpServerRequest>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpRouter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpRouter$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/HttpRouter.js [app-route] (ecmascript) <export * as HttpRouter>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Match$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Match.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClient$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/HttpClient.js [app-route] (ecmascript) <export * as HttpClient>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/HttpClientRequest.js [app-route] (ecmascript) <export * as HttpClientRequest>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Redacted$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/effect/dist/esm/Redacted.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientResponse$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/HttpClientResponse.js [app-route] (ecmascript) <export * as HttpClientResponse>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$internal$2f$types$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uploadthing/internal/types.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpBody$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpBody$3e$__ = __turbopack_import__("[project]/node_modules/@effect/platform/dist/esm/HttpBody.js [app-route] (ecmascript) <export * as HttpBody>");
const __TURBOPACK__import$2e$meta__ = {
    get url () {
        return `file://${__turbopack_resolve_absolute_path__("node_modules/uploadthing/next/index.js")}`;
    }
};
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
var version = "7.4.1";
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Literal(...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ValidContentDispositions"]);
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Literal(...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ValidACLs"]);
/**
 * Valid options for the `?actionType` query param
 */ const ActionType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Literal("upload");
/**
 * Valid options for the `uploadthing-hook` header
 * for requests coming from UT server
 */ const UploadThingHook = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Literal("callback", "error");
/**
 * =============================================================================
 * =========================== Configuration ===================================
 * =============================================================================
 */ const DecodeString = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.transform(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Uint8ArrayFromSelf, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String, {
    decode: (data)=>new TextDecoder().decode(data),
    encode: (data)=>new TextEncoder().encode(data)
});
const ParsedToken = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Struct({
    apiKey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Redacted(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.startsWith("sk_"))),
    appId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    regions: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.NonEmptyArray(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String),
    ingestHost: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.optionalWith({
        default: ()=>"ingest.uploadthing.com"
    }))
});
const UploadThingToken = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Uint8ArrayFromBase64.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.compose(DecodeString), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.compose(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.parseJson(ParsedToken)));
/**
 * =============================================================================
 * ======================== File Type Hierarchy ===============================
 * =============================================================================
 */ /**
 * Properties from the web File object, this is what the client sends when initiating an upload
 */ class FileUploadData extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Class("FileUploadData")({
    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    size: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Number,
    type: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    lastModified: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Number.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.optional)
}) {
}
/**
 * `.middleware()` can add a customId to the incoming file data
 */ class FileUploadDataWithCustomId extends FileUploadData.extend("FileUploadDataWithCustomId")({
    customId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.NullOr(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String)
}) {
}
/**
 * When files are uploaded, we get back
 * - a key
 * - a direct URL for the file
 * - an app-specific URL for the file (useful for scoping eg. for optimization allowed origins)
 * - the hash (md5-hex) of the uploaded file's contents
 */ class UploadedFileData extends FileUploadDataWithCustomId.extend("UploadedFileData")({
    key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    url: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    appUrl: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    fileHash: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String
}) {
}
/**
 * =============================================================================
 * ======================== Server Response Schemas ============================
 * =============================================================================
 */ class NewPresignedUrl extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Class("NewPresignedUrl")({
    url: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    customId: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.NullOr(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String),
    name: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String
}) {
}
class MetadataFetchStreamPart extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Class("MetadataFetchStreamPart")({
    payload: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    signature: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
    hook: UploadThingHook
}) {
}
class MetadataFetchResponse extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Class("MetadataFetchResponse")({
    ok: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Boolean
}) {
}
class CallbackResultResponse extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Class("CallbackResultResponse")({
    ok: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Boolean
}) {
}
/**
 * =============================================================================
 * ======================== Client Action Payloads ============================
 * =============================================================================
 */ class UploadActionPayload extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Class("UploadActionPayload")({
    files: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Array(FileUploadData),
    input: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Unknown
}) {
}
/**
 * Merge in `import.meta.env` to the built-in `process.env` provider
 * Prefix keys with `UPLOADTHING_` so we can reference just the name.
 * @example
 * process.env.UPLOADTHING_TOKEN = "foo"
 * Config.string("token"); // Config<"foo">
 */ const envProvider = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ConfigProvider$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.fromEnv().pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ConfigProvider$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.orElse(()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ConfigProvider$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.fromMap(new Map(Object.entries((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["filterDefinedObjectValues"])(__TURBOPACK__import$2e$meta__?.env ?? {}))), {
        pathDelim: "_"
    })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ConfigProvider$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.nested("uploadthing"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ConfigProvider$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.constantCase);
/**
 * Config provider that merges the options from the object
 * and environment variables prefixed with `UPLOADTHING_`.
 * @remarks Options take precedence over environment variables.
 */ const configProvider = (options)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ConfigProvider$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.fromJson(options ?? {}).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ConfigProvider$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.orElse(()=>envProvider));
const IsDevelopment = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.boolean("isDev").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.orElse(()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed(typeof process !== "undefined" ? "production" : undefined).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map((_)=>_ === "development"))), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withDefault(false));
const UTToken = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Config("token", UploadThingToken).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.catchTags({
    ConfigError: (e)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
            code: e._op === "InvalidData" ? "INVALID_SERVER_CONFIG" : "MISSING_ENV",
            message: e._op === "InvalidData" ? "Invalid token. A token is a base64 encoded JSON object matching { apiKey: string, appId: string, regions: string[] }." : "Missing token. Please set the `UPLOADTHING_TOKEN` environment variable or provide a token manually through config.",
            cause: e
        })
}));
__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.string("apiUrl").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withDefault("https://api.uploadthing.com"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.mapAttempt((_)=>new URL(_)), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map((url)=>url.href.replace(/\/$/, "")));
const IngestUrl = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
    const { regions, ingestHost } = yield* UTToken;
    const region = regions[0]; // Currently only support 1 region per app
    return yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.string("ingestUrl").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withDefault(`https://${region}.${ingestHost}`), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.mapAttempt((_)=>new URL(_)), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map((url)=>url.href.replace(/\/$/, "")));
});
function defaultErrorFormatter(error) {
    return {
        message: error.message
    };
}
function formatError(error, router) {
    const errorFormatter = router[Object.keys(router)[0]]?.errorFormatter ?? defaultErrorFormatter;
    return errorFormatter(error);
}
const handleJsonLineStream = (schema, onChunk)=>(stream)=>{
        let buf = "";
        return stream.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Stream$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.decodeText(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Stream$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.mapEffect((chunk)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
                buf += chunk;
                // Scan buffer for newlines
                const parts = buf.split("\n");
                const validChunks = [];
                for (const part of parts){
                    try {
                        // Attempt to parse chunk as JSON
                        validChunks.push(JSON.parse(part));
                        // Advance buffer if parsing succeeded
                        buf = buf.slice(part.length + 1);
                    } catch  {
                    //
                    }
                }
                yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Received chunks").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("chunk", chunk), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("parsedChunks", validChunks), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("buf", buf));
                return validChunks;
            })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Stream$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.mapEffect(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.decodeUnknown(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Array(schema))), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Stream$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.mapEffect(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.forEach((part)=>onChunk(part))), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Stream$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.runDrain, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withLogSpan("handleJsonLineStream"));
    };
const withMinimalLogLevel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logLevel("logLevel").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withDefault(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$LogLevel$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Info), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.andThen((level)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Logger$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.minimumLogLevel(level)), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tapError((e)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logError("Invalid log level").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("error", e))), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.catchTag("ConfigError", (e)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
        code: "INVALID_SERVER_CONFIG",
        message: "Invalid server configuration",
        cause: e
    })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Layer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.unwrapEffect);
const LogFormat = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.literal("json", "logFmt", "structured", "pretty")("logFormat");
const withLogFormat = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
    const isDev = yield* IsDevelopment;
    const logFormat = yield* LogFormat.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withDefault(isDev ? "pretty" : "json"));
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Logger$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[logFormat];
}).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.catchTag("ConfigError", (e)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
        code: "INVALID_SERVER_CONFIG",
        message: "Invalid server configuration",
        cause: e
    })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Layer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.unwrapEffect);
const logHttpClientResponse = (message, opts)=>{
    const mixin = opts?.mixin ?? "json";
    const level = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$LogLevel$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.fromLiteral(opts?.level ?? "Debug");
    return (response)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.flatMap(mixin !== "None" ? response[mixin] : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.void, ()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logWithLevel(level, `${message} (${response.status})`).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("response", response)));
};
const logHttpClientError = (message)=>(err)=>err._tag === "ResponseError" ? logHttpClientResponse(message, {
            level: "Error"
        })(err.response) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logError(message).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("error", err));
class ParserError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Data$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.TaggedError("ParserError") {
    constructor(...args){
        super(...args), this.message = "Input validation failed. The original error with it's validation issues is in the error cause.";
    }
}
function getParseFn(parser) {
    if ("~standard" in parser) {
        /**
     * Standard Schema
     */ return async (value)=>{
            const result = await parser["~standard"].validate(value);
            if (result.issues) {
                throw new ParserError({
                    cause: result.issues
                });
            }
            return result.value;
        };
    }
    if ("parseAsync" in parser && typeof parser.parseAsync === "function") {
        /**
     * Zod
     * TODO (next major): Consider wrapping ZodError in ParserError
     */ return parser.parseAsync;
    }
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.isSchema(parser)) {
        /**
     * Effect Schema
     */ return (value)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.decodeUnknownPromise(parser)(value).catch((error)=>{
                throw new ParserError({
                    cause: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Cause$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.squash(error[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Runtime$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.FiberFailureCauseId])
                });
            });
    }
    throw new Error("Invalid parser");
}
class FileSizeMismatch extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Data$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Error {
    constructor(type, max, actual){
        const reason = `You uploaded a ${type} file that was ${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["bytesToFileSize"])(actual)}, but the limit for that type is ${max}`;
        super({
            reason
        }), this._tag = "FileSizeMismatch", this.name = "FileSizeMismatchError";
    }
}
class FileCountMismatch extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Data$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Error {
    constructor(type, boundtype, bound, actual){
        const reason = `You uploaded ${actual} file(s) of type '${type}', but the ${boundtype} for that type is ${bound}`;
        super({
            reason
        }), this._tag = "FileCountMismatch", this.name = "FileCountMismatchError";
    }
}
// Verify that the uploaded files doesn't violate the route config,
// e.g. uploading more videos than allowed, or a file that is larger than allowed.
// This is double-checked on infra side, but we want to fail early to avoid network latency.
const assertFilesMeetConfig = (files, routeConfig)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const counts = {};
        for (const file of files){
            const type = yield* (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["matchFileType"])(file, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["objectKeys"])(routeConfig));
            counts[type] = (counts[type] ?? 0) + 1;
            const sizeLimit = routeConfig[type]?.maxFileSize;
            if (!sizeLimit) {
                return yield* new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["InvalidRouteConfigError"](type, "maxFileSize");
            }
            const sizeLimitBytes = yield* (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fileSizeToBytes"])(sizeLimit);
            if (file.size > sizeLimitBytes) {
                return yield* new FileSizeMismatch(type, sizeLimit, file.size);
            }
        }
        for(const _key in counts){
            const key = _key;
            const config = routeConfig[key];
            if (!config) return yield* new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["InvalidRouteConfigError"](key);
            const count = counts[key];
            const min = config.minFileCount;
            const max = config.maxFileCount;
            if (min > max) {
                return yield* new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                    code: "BAD_REQUEST",
                    message: "Invalid config during file count - minFileCount > maxFileCount",
                    cause: `minFileCount must be less than maxFileCount for key ${key}. got: ${min} > ${max}`
                });
            }
            if (count < min) {
                return yield* new FileCountMismatch(key, "minimum", min, count);
            }
            if (count > max) {
                return yield* new FileCountMismatch(key, "maximum", max, count);
            }
        }
        return null;
    });
const extractRouterConfig = (router)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.forEach((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["objectKeys"])(router), (slug)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fillInputRouteConfig"])(router[slug].routerConfig), (config)=>({
                slug,
                config
            })));
const makeRuntime = (fetch, config)=>{
    const fetchHttpClient = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Layer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.provideMerge(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$FetchHttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__FetchHttpClient$3e$__["FetchHttpClient"].layer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Layer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$FetchHttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__FetchHttpClient$3e$__["FetchHttpClient"].Fetch, fetch));
    const withRedactedHeaders = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Layer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.effectDiscard(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$FiberRef$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.update(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$Headers$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__Headers$3e$__["Headers"].currentRedactedNames, (_)=>_.concat([
            "x-uploadthing-api-key"
        ])));
    const layer = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Layer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.provide(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Layer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.mergeAll(withLogFormat, withMinimalLogLevel, fetchHttpClient, withRedactedHeaders), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Layer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.setConfigProvider(configProvider(config)));
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$ManagedRuntime$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.make(layer);
};
class AdapterArguments extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Context$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Tag("uploadthing/AdapterArguments")() {
}
const makeAdapterHandler = (makeAdapterArgs, toRequest, opts, beAdapter)=>{
    const managed = makeRuntime(opts.config?.fetch, opts.config);
    const handle = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.promise(()=>managed.runtime().then(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpApp$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpApp$3e$__["HttpApp"].toWebHandlerRuntime));
    const app = (...args)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.promise(()=>managed.runPromise(createRequestHandler(opts, beAdapter))), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.provideServiceEffect(AdapterArguments, makeAdapterArgs(...args)));
    return async (...args)=>{
        const result = await handle.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.ap(app(...args)), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.ap(toRequest(...args)), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withLogSpan("requestHandler"), managed.runPromise);
        return result;
    };
};
const createRequestHandler = (opts, beAdapter)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const isDevelopment = yield* IsDevelopment;
        const routerConfig = yield* extractRouterConfig(opts.router);
        const handleDaemon = (()=>{
            if (opts.config?.handleDaemonPromise) {
                return opts.config.handleDaemonPromise;
            }
            return isDevelopment ? "void" : "await";
        })();
        if (isDevelopment && handleDaemon === "await") {
            return yield* new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                code: "INVALID_SERVER_CONFIG",
                message: 'handleDaemonPromise: "await" is forbidden in development.'
            });
        }
        const GET = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
            return yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerResponse$3e$__["HttpServerResponse"].json(routerConfig);
        });
        const POST = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
            const { "uploadthing-hook": uploadthingHook, "x-uploadthing-package": fePackage, "x-uploadthing-version": clientVersion } = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerRequest$3e$__["HttpServerRequest"].schemaHeaders(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Struct({
                "uploadthing-hook": UploadThingHook.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.optional),
                "x-uploadthing-package": __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.optionalWith({
                    default: ()=>"unknown"
                })),
                "x-uploadthing-version": __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.optionalWith({
                    default: ()=>version
                }))
            }));
            if (clientVersion !== version) {
                const serverVersion = version;
                yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logWarning("Client version mismatch. Things may not work as expected, please sync your versions to ensure compatibility.").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs({
                    clientVersion,
                    serverVersion
                }));
            }
            const { slug, actionType } = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpRouter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpRouter$3e$__["HttpRouter"].schemaParams(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Struct({
                actionType: ActionType.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.optional),
                slug: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String
            }));
            const uploadable = opts.router[slug];
            if (!uploadable) {
                const msg = `No file route found for slug ${slug}`;
                yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logError(msg);
                return yield* new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                    code: "NOT_FOUND",
                    message: msg
                });
            }
            const { body, fiber } = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Match$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.value({
                actionType,
                uploadthingHook
            }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Match$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.when({
                actionType: "upload",
                uploadthingHook: undefined
            }, ()=>handleUploadAction({
                    uploadable,
                    fePackage,
                    beAdapter,
                    slug
                })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Match$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.when({
                actionType: undefined,
                uploadthingHook: "callback"
            }, ()=>handleCallbackRequest({
                    uploadable,
                    fePackage,
                    beAdapter
                })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Match$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.when({
                actionType: undefined,
                uploadthingHook: "error"
            }, ()=>handleErrorRequest({
                    uploadable
                })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Match$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.orElse(()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed({
                    body: null,
                    fiber: null
                })));
            if (fiber) {
                yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Running fiber as daemon").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("handleDaemon", handleDaemon));
                if (handleDaemon === "void") ;
                else if (handleDaemon === "await") {
                    yield* fiber.await;
                } else if (typeof handleDaemon === "function") {
                    handleDaemon(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.runPromise(fiber.await));
                }
            }
            yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Sending response").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("body", body));
            return yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerResponse$3e$__["HttpServerResponse"].json(body);
        }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.catchTags({
            ParseError: (e)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerResponse$3e$__["HttpServerResponse"].json(formatError(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                    code: "BAD_REQUEST",
                    message: "Invalid input",
                    cause: e.message
                }), opts.router), {
                    status: 400
                }),
            UploadThingError: (e)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerResponse$3e$__["HttpServerResponse"].json(formatError(e, opts.router), {
                    status: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getStatusCodeFromError"])(e)
                })
        }));
        const appendResponseHeaders = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerResponse$3e$__["HttpServerResponse"].setHeader("x-uploadthing-version", version));
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpRouter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpRouter$3e$__["HttpRouter"].empty.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpRouter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpRouter$3e$__["HttpRouter"].get("*", GET), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpRouter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpRouter$3e$__["HttpRouter"].post("*", POST), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpRouter$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpRouter$3e$__["HttpRouter"].use(appendResponseHeaders));
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withLogSpan("createRequestHandler"));
const handleErrorRequest = (opts)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const { uploadable } = opts;
        const request = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerRequest$3e$__["HttpServerRequest"].HttpServerRequest;
        const { apiKey } = yield* UTToken;
        const verified = yield* (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["verifySignature"])((yield* request.text), request.headers["x-uploadthing-signature"], apiKey);
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug(`Signature verified: ${verified}`);
        if (!verified) {
            yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logError("Invalid signature");
            return yield* new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                code: "BAD_REQUEST",
                message: "Invalid signature"
            });
        }
        const requestInput = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerRequest$3e$__["HttpServerRequest"].schemaBodyJson(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Struct({
            fileKey: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
            error: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String
        }));
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Handling error callback request with input:").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("json", requestInput));
        const adapterArgs = yield* AdapterArguments;
        const fiber = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tryPromise({
            try: async ()=>uploadable.onUploadError({
                    ...adapterArgs,
                    error: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                        code: "UPLOAD_FAILED",
                        message: `Upload failed for ${requestInput.fileKey}: ${requestInput.error}`
                    }),
                    fileKey: requestInput.fileKey
                }),
            catch: (error)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                    code: "INTERNAL_SERVER_ERROR",
                    message: "Failed to run onUploadError",
                    cause: error
                })
        }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tapError((error)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logError("Failed to run onUploadError. You probably shouldn't be throwing errors here.").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("error", error)))).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.ignoreLogged, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.forkDaemon);
        return {
            body: null,
            fiber
        };
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withLogSpan("handleErrorRequest"));
const handleCallbackRequest = (opts)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const { uploadable, fePackage, beAdapter } = opts;
        const request = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerRequest$3e$__["HttpServerRequest"].HttpServerRequest;
        const { apiKey } = yield* UTToken;
        const verified = yield* (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["verifySignature"])((yield* request.text), request.headers["x-uploadthing-signature"], apiKey);
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug(`Signature verified: ${verified}`);
        if (!verified) {
            yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logError("Invalid signature");
            return yield* new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                code: "BAD_REQUEST",
                message: "Invalid signature"
            });
        }
        const requestInput = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerRequest$3e$__["HttpServerRequest"].schemaBodyJson(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Struct({
            status: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
            file: UploadedFileData,
            metadata: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Record({
                key: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.String,
                value: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Schema$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.Unknown
            })
        }));
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Handling callback request with input:").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("json", requestInput));
        /**
     * Run `.onUploadComplete` as a daemon to prevent the
     * request from UT to potentially timeout.
     */ const fiber = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
            const adapterArgs = yield* AdapterArguments;
            const serverData = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tryPromise({
                try: async ()=>uploadable.onUploadComplete({
                        ...adapterArgs,
                        file: requestInput.file,
                        metadata: requestInput.metadata
                    }),
                catch: (error)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                        code: "INTERNAL_SERVER_ERROR",
                        message: "Failed to run onUploadComplete. You probably shouldn't be throwing errors here.",
                        cause: error
                    })
            });
            const payload = {
                fileKey: requestInput.file.key,
                callbackData: serverData ?? null
            };
            yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("'onUploadComplete' callback finished. Sending response to UploadThing:").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("callbackData", payload));
            const baseUrl = yield* IngestUrl;
            const httpClient = (yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClient$3e$__["HttpClient"].HttpClient).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClient$3e$__["HttpClient"].filterStatusOk);
            yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].post(`/callback-result`).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].prependUrl(baseUrl), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].setHeaders({
                "x-uploadthing-api-key": __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Redacted$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.value(apiKey),
                "x-uploadthing-version": version,
                "x-uploadthing-be-adapter": beAdapter,
                "x-uploadthing-fe-package": fePackage
            }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].bodyJson(payload), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.flatMap(httpClient.execute), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tapError(logHttpClientError("Failed to register callback result")), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.flatMap(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientResponse$3e$__["HttpClientResponse"].schemaBodyJson(CallbackResultResponse)), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tap(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.log("Sent callback result to UploadThing")), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.scoped);
        }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.ignoreLogged, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.forkDaemon);
        return {
            body: null,
            fiber
        };
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withLogSpan("handleCallbackRequest"));
const runRouteMiddleware = (opts)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const { json: { files, input }, uploadable } = opts;
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Running middleware");
        const adapterArgs = yield* AdapterArguments;
        const metadata = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tryPromise({
            try: async ()=>uploadable.middleware({
                    ...adapterArgs,
                    input,
                    files
                }),
            catch: (error)=>error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"] ? error : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                    code: "INTERNAL_SERVER_ERROR",
                    message: "Failed to run middleware",
                    cause: error
                })
        });
        if (metadata[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$internal$2f$types$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UTFiles"]] && metadata[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$internal$2f$types$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UTFiles"]].length !== files.length) {
            const msg = `Expected files override to have the same length as original files, got ${metadata[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$internal$2f$types$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UTFiles"]].length} but expected ${files.length}`;
            yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logError(msg);
            return yield* new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                code: "BAD_REQUEST",
                message: "Files override must have the same length as files",
                cause: msg
            });
        }
        // Attach customIds from middleware to the files
        const filesWithCustomIds = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.forEach(files, (file, idx)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
                const theirs = metadata[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$internal$2f$types$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UTFiles"]]?.[idx];
                if (theirs && theirs.size !== file.size) {
                    yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logWarning("File size mismatch. Reverting to original size");
                }
                return {
                    name: theirs?.name ?? file.name,
                    size: file.size,
                    type: file.type,
                    customId: theirs?.customId,
                    lastModified: theirs?.lastModified ?? Date.now()
                };
            }));
        return {
            metadata,
            filesWithCustomIds
        };
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withLogSpan("runRouteMiddleware"));
const handleUploadAction = (opts)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
        const httpClient = (yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClient$3e$__["HttpClient"].HttpClient).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClient$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClient$3e$__["HttpClient"].filterStatusOk);
        const { uploadable, fePackage, beAdapter, slug } = opts;
        const json = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerRequest$3e$__["HttpServerRequest"].schemaBodyJson(UploadActionPayload);
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Handling upload request").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("json", json));
        // validate the input
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Parsing user input");
        const parsedInput = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tryPromise({
            try: ()=>getParseFn(uploadable.inputParser)(json.input),
            catch: (error)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                    code: "BAD_REQUEST",
                    message: "Invalid input",
                    cause: error
                })
        });
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Input parsed successfully").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("input", parsedInput));
        const { metadata, filesWithCustomIds } = yield* runRouteMiddleware({
            json: {
                input: parsedInput,
                files: json.files
            },
            uploadable
        });
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Parsing route config").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("routerConfig", uploadable.routerConfig));
        const parsedConfig = yield* (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fillInputRouteConfig"])(uploadable.routerConfig).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.catchTag("InvalidRouteConfig", (err)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                code: "BAD_REQUEST",
                message: "Invalid route config",
                cause: err
            })));
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Route config parsed successfully").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("routeConfig", parsedConfig));
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Validating files meet the config requirements").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("files", json.files));
        yield* assertFilesMeetConfig(json.files, parsedConfig).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.mapError((e)=>new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UploadThingError"]({
                code: "BAD_REQUEST",
                message: `Invalid config: ${e._tag}`,
                cause: "reason" in e ? e.reason : e.message
            })));
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Files validated.");
        const fileUploadRequests = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.forEach(filesWithCustomIds, (file)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["matchFileType"])(file, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["objectKeys"])(parsedConfig)), (type)=>({
                    name: file.name,
                    size: file.size,
                    type: file.type || type,
                    lastModified: file.lastModified,
                    customId: file.customId,
                    contentDisposition: parsedConfig[type]?.contentDisposition ?? "inline",
                    acl: parsedConfig[type]?.acl
                }))).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.catchTags({
            /** Shouldn't happen since config is validated above so just dying is fine I think */ InvalidFileType: (e)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.die(e),
            UnknownFileType: (e)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.die(e)
        }));
        const routeOptions = uploadable.routeOptions;
        const { apiKey, appId } = yield* UTToken;
        const ingestUrl = yield* IngestUrl;
        const isDev = yield* IsDevelopment;
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logDebug("Generating presigned URLs").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("fileUploadRequests", fileUploadRequests), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("ingestUrl", ingestUrl));
        const presignedUrls = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.forEach(fileUploadRequests, (file)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.gen(function*() {
                const key = yield* (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["generateKey"])(file, appId, routeOptions.getFileHashParts);
                const url = yield* (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$uploadthing$2f$shared$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["generateSignedURL"])(`${ingestUrl}/${key}`, apiKey, {
                    ttlInSeconds: routeOptions.presignedURLTTL,
                    data: {
                        "x-ut-identifier": appId,
                        "x-ut-file-name": file.name,
                        "x-ut-file-size": file.size,
                        "x-ut-file-type": file.type,
                        "x-ut-slug": slug,
                        "x-ut-custom-id": file.customId,
                        "x-ut-content-disposition": file.contentDisposition,
                        "x-ut-acl": file.acl
                    }
                });
                return {
                    url,
                    key
                };
            }), {
            concurrency: "unbounded"
        });
        const serverReq = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerRequest$3e$__["HttpServerRequest"].HttpServerRequest;
        const requestUrl = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpServerRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpServerRequest$3e$__["HttpServerRequest"].toURL(serverReq);
        const devHookRequest = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.string("callbackUrl").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Config$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withDefault(requestUrl.origin + requestUrl.pathname), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.map((url)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].post(url).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].appendUrlParam("slug", slug))));
        const metadataRequest = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].post("/route-metadata").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].prependUrl(ingestUrl), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].setHeaders({
            "x-uploadthing-api-key": __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Redacted$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.value(apiKey),
            "x-uploadthing-version": version,
            "x-uploadthing-be-adapter": beAdapter,
            "x-uploadthing-fe-package": fePackage
        }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].bodyJson({
            fileKeys: presignedUrls.map(({ key })=>key),
            metadata: metadata,
            isDev,
            callbackUrl: devHookRequest.url,
            callbackSlug: slug,
            awaitServerData: routeOptions.awaitServerData ?? true
        }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.flatMap(httpClient.execute));
        // Send metadata to UT server (non blocking as a daemon)
        // In dev, keep the stream open and simulate the callback requests as
        // files complete uploading
        const fiber = yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.if(isDev, {
            onTrue: ()=>metadataRequest.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tapBoth({
                    onSuccess: logHttpClientResponse("Registered metadata", {
                        mixin: "None"
                    }),
                    onFailure: logHttpClientError("Failed to register metadata")
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientResponse$3e$__["HttpClientResponse"].stream, handleJsonLineStream(MetadataFetchStreamPart, (chunk)=>devHookRequest.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].setHeaders({
                        "uploadthing-hook": chunk.hook,
                        "x-uploadthing-signature": chunk.signature
                    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientRequest$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientRequest$3e$__["HttpClientRequest"].setBody(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpBody$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpBody$3e$__["HttpBody"].text(chunk.payload, "application/json")), httpClient.execute, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tapBoth({
                        onSuccess: logHttpClientResponse("Successfully forwarded callback request from dev stream"),
                        onFailure: logHttpClientError("Failed to forward callback request from dev stream")
                    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs(chunk), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.asVoid, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.ignoreLogged, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.scoped))),
            onFalse: ()=>metadataRequest.pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.tapBoth({
                    onSuccess: logHttpClientResponse("Registered metadata"),
                    onFailure: logHttpClientError("Failed to register metadata")
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.flatMap(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$effect$2f$platform$2f$dist$2f$esm$2f$HttpClientResponse$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$export__$2a$__as__HttpClientResponse$3e$__["HttpClientResponse"].schemaBodyJson(MetadataFetchResponse)), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.scoped)
        }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.forkDaemon);
        const presigneds = presignedUrls.map((p, i)=>({
                url: p.url,
                key: p.key,
                name: fileUploadRequests[i].name,
                customId: fileUploadRequests[i].customId ?? null
            }));
        yield* __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.logInfo("Sending presigned URLs to client").pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.annotateLogs("presignedUrls", presigneds));
        return {
            body: presigneds,
            fiber
        };
    }).pipe(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.withLogSpan("handleUploadAction"));
function internalCreateBuilder(initDef = {}) {
    const _def = {
        $types: {},
        // Default router config
        routerConfig: {
            image: {
                maxFileSize: "4MB"
            }
        },
        routeOptions: {
            awaitServerData: true
        },
        inputParser: {
            parseAsync: ()=>Promise.resolve(undefined),
            _input: undefined,
            _output: undefined
        },
        middleware: ()=>({}),
        onUploadError: ()=>{
        // noop
        },
        onUploadComplete: ()=>undefined,
        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,
        // Overload with properties passed in
        ...initDef
    };
    return {
        input (userParser) {
            return internalCreateBuilder({
                ..._def,
                inputParser: userParser
            });
        },
        middleware (userMiddleware) {
            return internalCreateBuilder({
                ..._def,
                middleware: userMiddleware
            });
        },
        onUploadComplete (userUploadComplete) {
            return {
                ..._def,
                onUploadComplete: userUploadComplete
            };
        },
        onUploadError (userOnUploadError) {
            return internalCreateBuilder({
                ..._def,
                onUploadError: userOnUploadError
            });
        }
    };
}
function createBuilder(opts) {
    return (input, config)=>{
        return internalCreateBuilder({
            routerConfig: input,
            routeOptions: config ?? {},
            ...opts
        });
    };
}
const createUploadthing = (opts)=>createBuilder(opts);
const createRouteHandler = (opts)=>{
    const handler = makeAdapterHandler((req)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed({
            req,
            res: undefined,
            event: undefined
        }), (req)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$effect$2f$dist$2f$esm$2f$Effect$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__.succeed(req), opts, "nextjs-app");
    return {
        POST: handler,
        GET: handler
    };
};
;
}}),
"[project]/node_modules/uploadthing/next/index.js [app-route] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "UTFiles": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$internal$2f$types$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UTFiles"]),
    "createRouteHandler": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$next$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createRouteHandler"]),
    "createUploadthing": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$next$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["createUploadthing"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$internal$2f$types$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/uploadthing/internal/types.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$uploadthing$2f$next$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/uploadthing/next/index.js [app-route] (ecmascript) <locals>");
}}),

};

//# sourceMappingURL=node_modules_071ab5._.js.map